
F405_FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098ec  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009a74  08009a74  0000aa74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e9c  08009e9c  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009e9c  08009e9c  0000ae9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ea4  08009ea4  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea4  08009ea4  0000aea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ea8  08009ea8  0000aea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009eac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b060  2**0
                  CONTENTS
 10 .bss          00000bb4  20000060  20000060  0000b060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c14  20000c14  0000b060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001291b  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e00  00000000  00000000  0001d9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  000207b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc6  00000000  00000000  00021830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020908  00000000  00000000  000224f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014461  00000000  00000000  00042dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3860  00000000  00000000  0005725f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011aabf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049d0  00000000  00000000  0011ab04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011f4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a5c 	.word	0x08009a5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08009a5c 	.word	0x08009a5c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b988 	b.w	8000e3c <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	468e      	mov	lr, r1
 8000b4c:	4604      	mov	r4, r0
 8000b4e:	4688      	mov	r8, r1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d14a      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b54:	428a      	cmp	r2, r1
 8000b56:	4617      	mov	r7, r2
 8000b58:	d962      	bls.n	8000c20 <__udivmoddi4+0xdc>
 8000b5a:	fab2 f682 	clz	r6, r2
 8000b5e:	b14e      	cbz	r6, 8000b74 <__udivmoddi4+0x30>
 8000b60:	f1c6 0320 	rsb	r3, r6, #32
 8000b64:	fa01 f806 	lsl.w	r8, r1, r6
 8000b68:	fa20 f303 	lsr.w	r3, r0, r3
 8000b6c:	40b7      	lsls	r7, r6
 8000b6e:	ea43 0808 	orr.w	r8, r3, r8
 8000b72:	40b4      	lsls	r4, r6
 8000b74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b78:	fa1f fc87 	uxth.w	ip, r7
 8000b7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b80:	0c23      	lsrs	r3, r4, #16
 8000b82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0x62>
 8000b92:	18fb      	adds	r3, r7, r3
 8000b94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b98:	f080 80ea 	bcs.w	8000d70 <__udivmoddi4+0x22c>
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f240 80e7 	bls.w	8000d70 <__udivmoddi4+0x22c>
 8000ba2:	3902      	subs	r1, #2
 8000ba4:	443b      	add	r3, r7
 8000ba6:	1a9a      	subs	r2, r3, r2
 8000ba8:	b2a3      	uxth	r3, r4
 8000baa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bba:	459c      	cmp	ip, r3
 8000bbc:	d909      	bls.n	8000bd2 <__udivmoddi4+0x8e>
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc4:	f080 80d6 	bcs.w	8000d74 <__udivmoddi4+0x230>
 8000bc8:	459c      	cmp	ip, r3
 8000bca:	f240 80d3 	bls.w	8000d74 <__udivmoddi4+0x230>
 8000bce:	443b      	add	r3, r7
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bd6:	eba3 030c 	sub.w	r3, r3, ip
 8000bda:	2100      	movs	r1, #0
 8000bdc:	b11d      	cbz	r5, 8000be6 <__udivmoddi4+0xa2>
 8000bde:	40f3      	lsrs	r3, r6
 8000be0:	2200      	movs	r2, #0
 8000be2:	e9c5 3200 	strd	r3, r2, [r5]
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d905      	bls.n	8000bfa <__udivmoddi4+0xb6>
 8000bee:	b10d      	cbz	r5, 8000bf4 <__udivmoddi4+0xb0>
 8000bf0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	e7f5      	b.n	8000be6 <__udivmoddi4+0xa2>
 8000bfa:	fab3 f183 	clz	r1, r3
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d146      	bne.n	8000c90 <__udivmoddi4+0x14c>
 8000c02:	4573      	cmp	r3, lr
 8000c04:	d302      	bcc.n	8000c0c <__udivmoddi4+0xc8>
 8000c06:	4282      	cmp	r2, r0
 8000c08:	f200 8105 	bhi.w	8000e16 <__udivmoddi4+0x2d2>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4690      	mov	r8, r2
 8000c16:	2d00      	cmp	r5, #0
 8000c18:	d0e5      	beq.n	8000be6 <__udivmoddi4+0xa2>
 8000c1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c1e:	e7e2      	b.n	8000be6 <__udivmoddi4+0xa2>
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	f000 8090 	beq.w	8000d46 <__udivmoddi4+0x202>
 8000c26:	fab2 f682 	clz	r6, r2
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f040 80a4 	bne.w	8000d78 <__udivmoddi4+0x234>
 8000c30:	1a8a      	subs	r2, r1, r2
 8000c32:	0c03      	lsrs	r3, r0, #16
 8000c34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c38:	b280      	uxth	r0, r0
 8000c3a:	b2bc      	uxth	r4, r7
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x11e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x11c>
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	f200 80e0 	bhi.w	8000e20 <__udivmoddi4+0x2dc>
 8000c60:	46c4      	mov	ip, r8
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c70:	fb02 f404 	mul.w	r4, r2, r4
 8000c74:	429c      	cmp	r4, r3
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x144>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x142>
 8000c80:	429c      	cmp	r4, r3
 8000c82:	f200 80ca 	bhi.w	8000e1a <__udivmoddi4+0x2d6>
 8000c86:	4602      	mov	r2, r0
 8000c88:	1b1b      	subs	r3, r3, r4
 8000c8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c8e:	e7a5      	b.n	8000bdc <__udivmoddi4+0x98>
 8000c90:	f1c1 0620 	rsb	r6, r1, #32
 8000c94:	408b      	lsls	r3, r1
 8000c96:	fa22 f706 	lsr.w	r7, r2, r6
 8000c9a:	431f      	orrs	r7, r3
 8000c9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ca0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ca4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ca8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cac:	4323      	orrs	r3, r4
 8000cae:	fa00 f801 	lsl.w	r8, r0, r1
 8000cb2:	fa1f fc87 	uxth.w	ip, r7
 8000cb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000cba:	0c1c      	lsrs	r4, r3, #16
 8000cbc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cc0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cc4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	fa02 f201 	lsl.w	r2, r2, r1
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x1a0>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cd6:	f080 809c 	bcs.w	8000e12 <__udivmoddi4+0x2ce>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8099 	bls.w	8000e12 <__udivmoddi4+0x2ce>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	eba4 040e 	sub.w	r4, r4, lr
 8000ce8:	fa1f fe83 	uxth.w	lr, r3
 8000cec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cf0:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000cf8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x1ce>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d06:	f080 8082 	bcs.w	8000e0e <__udivmoddi4+0x2ca>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	d97f      	bls.n	8000e0e <__udivmoddi4+0x2ca>
 8000d0e:	3b02      	subs	r3, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d1e:	4564      	cmp	r4, ip
 8000d20:	4673      	mov	r3, lr
 8000d22:	46e1      	mov	r9, ip
 8000d24:	d362      	bcc.n	8000dec <__udivmoddi4+0x2a8>
 8000d26:	d05f      	beq.n	8000de8 <__udivmoddi4+0x2a4>
 8000d28:	b15d      	cbz	r5, 8000d42 <__udivmoddi4+0x1fe>
 8000d2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000d2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000d32:	fa04 f606 	lsl.w	r6, r4, r6
 8000d36:	fa22 f301 	lsr.w	r3, r2, r1
 8000d3a:	431e      	orrs	r6, r3
 8000d3c:	40cc      	lsrs	r4, r1
 8000d3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000d42:	2100      	movs	r1, #0
 8000d44:	e74f      	b.n	8000be6 <__udivmoddi4+0xa2>
 8000d46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d4a:	0c01      	lsrs	r1, r0, #16
 8000d4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d50:	b280      	uxth	r0, r0
 8000d52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d56:	463b      	mov	r3, r7
 8000d58:	4638      	mov	r0, r7
 8000d5a:	463c      	mov	r4, r7
 8000d5c:	46b8      	mov	r8, r7
 8000d5e:	46be      	mov	lr, r7
 8000d60:	2620      	movs	r6, #32
 8000d62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d66:	eba2 0208 	sub.w	r2, r2, r8
 8000d6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d6e:	e766      	b.n	8000c3e <__udivmoddi4+0xfa>
 8000d70:	4601      	mov	r1, r0
 8000d72:	e718      	b.n	8000ba6 <__udivmoddi4+0x62>
 8000d74:	4610      	mov	r0, r2
 8000d76:	e72c      	b.n	8000bd2 <__udivmoddi4+0x8e>
 8000d78:	f1c6 0220 	rsb	r2, r6, #32
 8000d7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d80:	40b7      	lsls	r7, r6
 8000d82:	40b1      	lsls	r1, r6
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d92:	b2bc      	uxth	r4, r7
 8000d94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d98:	0c11      	lsrs	r1, r2, #16
 8000d9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9e:	fb08 f904 	mul.w	r9, r8, r4
 8000da2:	40b0      	lsls	r0, r6
 8000da4:	4589      	cmp	r9, r1
 8000da6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000daa:	b280      	uxth	r0, r0
 8000dac:	d93e      	bls.n	8000e2c <__udivmoddi4+0x2e8>
 8000dae:	1879      	adds	r1, r7, r1
 8000db0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000db4:	d201      	bcs.n	8000dba <__udivmoddi4+0x276>
 8000db6:	4589      	cmp	r9, r1
 8000db8:	d81f      	bhi.n	8000dfa <__udivmoddi4+0x2b6>
 8000dba:	eba1 0109 	sub.w	r1, r1, r9
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fb09 f804 	mul.w	r8, r9, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dd0:	4542      	cmp	r2, r8
 8000dd2:	d229      	bcs.n	8000e28 <__udivmoddi4+0x2e4>
 8000dd4:	18ba      	adds	r2, r7, r2
 8000dd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000dda:	d2c4      	bcs.n	8000d66 <__udivmoddi4+0x222>
 8000ddc:	4542      	cmp	r2, r8
 8000dde:	d2c2      	bcs.n	8000d66 <__udivmoddi4+0x222>
 8000de0:	f1a9 0102 	sub.w	r1, r9, #2
 8000de4:	443a      	add	r2, r7
 8000de6:	e7be      	b.n	8000d66 <__udivmoddi4+0x222>
 8000de8:	45f0      	cmp	r8, lr
 8000dea:	d29d      	bcs.n	8000d28 <__udivmoddi4+0x1e4>
 8000dec:	ebbe 0302 	subs.w	r3, lr, r2
 8000df0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000df4:	3801      	subs	r0, #1
 8000df6:	46e1      	mov	r9, ip
 8000df8:	e796      	b.n	8000d28 <__udivmoddi4+0x1e4>
 8000dfa:	eba7 0909 	sub.w	r9, r7, r9
 8000dfe:	4449      	add	r1, r9
 8000e00:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e04:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e08:	fb09 f804 	mul.w	r8, r9, r4
 8000e0c:	e7db      	b.n	8000dc6 <__udivmoddi4+0x282>
 8000e0e:	4673      	mov	r3, lr
 8000e10:	e77f      	b.n	8000d12 <__udivmoddi4+0x1ce>
 8000e12:	4650      	mov	r0, sl
 8000e14:	e766      	b.n	8000ce4 <__udivmoddi4+0x1a0>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e6fd      	b.n	8000c16 <__udivmoddi4+0xd2>
 8000e1a:	443b      	add	r3, r7
 8000e1c:	3a02      	subs	r2, #2
 8000e1e:	e733      	b.n	8000c88 <__udivmoddi4+0x144>
 8000e20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e24:	443b      	add	r3, r7
 8000e26:	e71c      	b.n	8000c62 <__udivmoddi4+0x11e>
 8000e28:	4649      	mov	r1, r9
 8000e2a:	e79c      	b.n	8000d66 <__udivmoddi4+0x222>
 8000e2c:	eba1 0109 	sub.w	r1, r1, r9
 8000e30:	46c4      	mov	ip, r8
 8000e32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e36:	fb09 f804 	mul.w	r8, r9, r4
 8000e3a:	e7c4      	b.n	8000dc6 <__udivmoddi4+0x282>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <Check_valid_Frame>:
//    uint8_t data[MAX_PAYLOAD];
//    uint8_t CRC_val;
//}__attribute__((packed)) CrsF_Frame;


bool Check_valid_Frame(CrsF_Frame *frame){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    if(frame->header != CRSF_HEADER){
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e4e:	d001      	beq.n	8000e54 <Check_valid_Frame+0x14>
//        CDC_Transmit_FS((uint8_t *)"Invalid header", 16);
        return false;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e01d      	b.n	8000e90 <Check_valid_Frame+0x50>
    }
    if(frame ->length <2 || frame ->length > (MAX_PAYLOAD+2)){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	785b      	ldrb	r3, [r3, #1]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d903      	bls.n	8000e64 <Check_valid_Frame+0x24>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	2b18      	cmp	r3, #24
 8000e62:	d901      	bls.n	8000e68 <Check_valid_Frame+0x28>
//        CDC_Transmit_FS((uint8_t *)"Invalid length", 14);
        return false;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e013      	b.n	8000e90 <Check_valid_Frame+0x50>
    }
    uint8_t calCRC = getCRC8(&frame->type , (frame->length)-1);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1c9a      	adds	r2, r3, #2
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	785b      	ldrb	r3, [r3, #1]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4619      	mov	r1, r3
 8000e76:	4610      	mov	r0, r2
 8000e78:	f000 f97a 	bl	8001170 <getCRC8>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	73fb      	strb	r3, [r7, #15]
    if(calCRC != frame->CRC_val){
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e5b      	ldrb	r3, [r3, #25]
 8000e84:	7bfa      	ldrb	r2, [r7, #15]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d001      	beq.n	8000e8e <Check_valid_Frame+0x4e>
//        CDC_Transmit_FS((uint8_t *)"Invalid CRC", 12);
        return false;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <Check_valid_Frame+0x50>
    }
    return true;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Payload_CRsF>:
    }
    frame->CRC_val = getCRC8(&frame->type, (frame->length)-1);
}

//Xử lý payload với 16 kênh điều khiển
void Payload_CRsF(uint8_t* data){
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    CRsFChannel[0] = ((data[0]    | data[1] <<8)                     & 0x07FF);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b9a      	ldr	r3, [pc, #616]	@ (8001128 <Payload_CRsF+0x290>)
 8000ec0:	801a      	strh	r2, [r3, #0]
    CRsFChannel[1] = ((data[1] >>3 | data[2] <<5)                     & 0x07FF);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b90      	ldr	r3, [pc, #576]	@ (8001128 <Payload_CRsF+0x290>)
 8000ee8:	805a      	strh	r2, [r3, #2]
    CRsFChannel[2] = ((data[2] >>6 | data[3] <<2 | data[4]<<10)      & 0x07FF);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3302      	adds	r3, #2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	099b      	lsrs	r3, r3, #6
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3303      	adds	r3, #3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b82      	ldr	r3, [pc, #520]	@ (8001128 <Payload_CRsF+0x290>)
 8000f20:	809a      	strh	r2, [r3, #4]
    CRsFChannel[3] = ((data[4] >>1 | data[5] <<7)                     & 0x07FF);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3304      	adds	r3, #4
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	085b      	lsrs	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3305      	adds	r3, #5
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	01db      	lsls	r3, r3, #7
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b78      	ldr	r3, [pc, #480]	@ (8001128 <Payload_CRsF+0x290>)
 8000f48:	80da      	strh	r2, [r3, #6]
    CRsFChannel[4] = ((data[5] >>4 | data[6] <<4)                     & 0x07FF);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3305      	adds	r3, #5
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	091b      	lsrs	r3, r3, #4
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3306      	adds	r3, #6
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001128 <Payload_CRsF+0x290>)
 8000f70:	811a      	strh	r2, [r3, #8]
    CRsFChannel[5] = ((data[6] >>7 | data[7] <<1 | data[8]<<9)       & 0x07FF);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3306      	adds	r3, #6
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	09db      	lsrs	r3, r3, #7
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3307      	adds	r3, #7
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3308      	adds	r3, #8
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	b21b      	sxth	r3, r3
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b60      	ldr	r3, [pc, #384]	@ (8001128 <Payload_CRsF+0x290>)
 8000fa8:	815a      	strh	r2, [r3, #10]
    CRsFChannel[6] = ((data[8] >>2 | data[9] <<6)                    & 0x07FF);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3308      	adds	r3, #8
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3309      	adds	r3, #9
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	019b      	lsls	r3, r3, #6
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b56      	ldr	r3, [pc, #344]	@ (8001128 <Payload_CRsF+0x290>)
 8000fd0:	819a      	strh	r2, [r3, #12]
    CRsFChannel[7] = ((data[9] >>5 | data[10] <<3)                   & 0x07FF);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3309      	adds	r3, #9
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	095b      	lsrs	r3, r3, #5
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	330a      	adds	r3, #10
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	@ (8001128 <Payload_CRsF+0x290>)
 8000ff8:	81da      	strh	r2, [r3, #14]
    CRsFChannel[8] = ((data[11]   | data[12] <<8)                    & 0x07FF);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	330b      	adds	r3, #11
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	330c      	adds	r3, #12
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b21b      	sxth	r3, r3
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b43      	ldr	r3, [pc, #268]	@ (8001128 <Payload_CRsF+0x290>)
 800101c:	821a      	strh	r2, [r3, #16]
    CRsFChannel[9] = ((data[12] >>3 | data[13] <<5)                  & 0x07FF);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	330c      	adds	r3, #12
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	08db      	lsrs	r3, r3, #3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	b21a      	sxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	330d      	adds	r3, #13
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b21b      	sxth	r3, r3
 8001032:	015b      	lsls	r3, r3, #5
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001040:	b29a      	uxth	r2, r3
 8001042:	4b39      	ldr	r3, [pc, #228]	@ (8001128 <Payload_CRsF+0x290>)
 8001044:	825a      	strh	r2, [r3, #18]
    CRsFChannel[10] = ((data[13] >>6 | data[14] <<2 | data[15] <<10) & 0x07FF);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	330d      	adds	r3, #13
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	099b      	lsrs	r3, r3, #6
 800104e:	b2db      	uxtb	r3, r3
 8001050:	b21a      	sxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	330e      	adds	r3, #14
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b21b      	sxth	r3, r3
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	330f      	adds	r3, #15
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b21b      	sxth	r3, r3
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001078:	b29a      	uxth	r2, r3
 800107a:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <Payload_CRsF+0x290>)
 800107c:	829a      	strh	r2, [r3, #20]
    CRsFChannel[11] = ((data[15] >>1 | data[16] <<7)                 & 0x07FF);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	330f      	adds	r3, #15
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	085b      	lsrs	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b21a      	sxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3310      	adds	r3, #16
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b21b      	sxth	r3, r3
 8001092:	01db      	lsls	r3, r3, #7
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <Payload_CRsF+0x290>)
 80010a4:	82da      	strh	r2, [r3, #22]
    CRsFChannel[12] = ((data[16] >>4 | data[17] <<4)                 & 0x07FF);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3310      	adds	r3, #16
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3311      	adds	r3, #17
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <Payload_CRsF+0x290>)
 80010cc:	831a      	strh	r2, [r3, #24]
    CRsFChannel[13] = ((data[17] >>7 | data[18] <<1 | data[19] <<9)  & 0x07FF);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3311      	adds	r3, #17
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	09db      	lsrs	r3, r3, #7
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	b21a      	sxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3312      	adds	r3, #18
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3313      	adds	r3, #19
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	025b      	lsls	r3, r3, #9
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <Payload_CRsF+0x290>)
 8001104:	835a      	strh	r2, [r3, #26]
    CRsFChannel[14] = ((data[19] >>2 | data[20] <<6)                 & 0x07FF);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3313      	adds	r3, #19
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	b2db      	uxtb	r3, r3
 8001110:	b21a      	sxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3314      	adds	r3, #20
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b21b      	sxth	r3, r3
 800111a:	019b      	lsls	r3, r3, #6
 800111c:	b21b      	sxth	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b21b      	sxth	r3, r3
 8001122:	b29b      	uxth	r3, r3
 8001124:	e002      	b.n	800112c <Payload_CRsF+0x294>
 8001126:	bf00      	nop
 8001128:	2000007c 	.word	0x2000007c
 800112c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <Payload_CRsF+0x2d4>)
 8001134:	839a      	strh	r2, [r3, #28]
    CRsFChannel[15] = ((data[20] >>5 | data[21] <<3)                 & 0x07FF);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3314      	adds	r3, #20
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	095b      	lsrs	r3, r3, #5
 800113e:	b2db      	uxtb	r3, r3
 8001140:	b21a      	sxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3315      	adds	r3, #21
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b21b      	sxth	r3, r3
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	b21b      	sxth	r3, r3
 800114e:	4313      	orrs	r3, r2
 8001150:	b21b      	sxth	r3, r3
 8001152:	b29b      	uxth	r3, r3
 8001154:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b04      	ldr	r3, [pc, #16]	@ (800116c <Payload_CRsF+0x2d4>)
 800115c:	83da      	strh	r2, [r3, #30]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	2000007c 	.word	0x2000007c

08001170 <getCRC8>:

//CRC8
 uint8_t getCRC8(uint8_t *buf, uint8_t size)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc8 = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < size; i++)
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	e022      	b.n	80011cc <getCRC8+0x5c>
    {
        crc8 ^= buf[i];
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	4053      	eors	r3, r2
 8001192:	75fb      	strb	r3, [r7, #23]

        for (int j = 0; j < 8; j++)
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e012      	b.n	80011c0 <getCRC8+0x50>
        {
            if (crc8 & 0x80)
 800119a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	da08      	bge.n	80011b4 <getCRC8+0x44>
            {
                crc8 <<= 1;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	75fb      	strb	r3, [r7, #23]
                crc8 ^= CRSF_CRC_POLY;
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	f083 032a 	eor.w	r3, r3, #42	@ 0x2a
 80011ae:	43db      	mvns	r3, r3
 80011b0:	75fb      	strb	r3, [r7, #23]
 80011b2:	e002      	b.n	80011ba <getCRC8+0x4a>
            }
            else
            {
                crc8 <<= 1;
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; j++)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	dde9      	ble.n	800119a <getCRC8+0x2a>
    for (int i = 0; i < size; i++)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	3301      	adds	r3, #1
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	dbd8      	blt.n	8001186 <getCRC8+0x16>
            }
        }
    }
    return crc8;
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <Check_Status>:
//    Wait_CRC,
//}CRsF_Status;



bool Check_Status(uint8_t byte , CrsF_Frame* frame){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
    switch(status){
 80011f0:	4b3c      	ldr	r3, [pc, #240]	@ (80012e4 <Check_Status+0x100>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d86f      	bhi.n	80012d8 <Check_Status+0xf4>
 80011f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001200 <Check_Status+0x1c>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001215 	.word	0x08001215
 8001204:	0800122f 	.word	0x0800122f
 8001208:	0800125d 	.word	0x0800125d
 800120c:	08001281 	.word	0x08001281
 8001210:	080012ad 	.word	0x080012ad
        case Wait_Header:
            if(byte == CRSF_HEADER){
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2bc8      	cmp	r3, #200	@ 0xc8
 8001218:	d15b      	bne.n	80012d2 <Check_Status+0xee>
                frame_buff[0] = byte;
 800121a:	4a33      	ldr	r2, [pc, #204]	@ (80012e8 <Check_Status+0x104>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	7013      	strb	r3, [r2, #0]
                frame_index = 1;
 8001220:	4b32      	ldr	r3, [pc, #200]	@ (80012ec <Check_Status+0x108>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
                status = Wait_Length;
 8001226:	4b2f      	ldr	r3, [pc, #188]	@ (80012e4 <Check_Status+0x100>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800122c:	e051      	b.n	80012d2 <Check_Status+0xee>

        case Wait_Length:
            if(byte >=2 && byte <= (MAX_PAYLOAD+2)){
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d90f      	bls.n	8001254 <Check_Status+0x70>
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b18      	cmp	r3, #24
 8001238:	d80c      	bhi.n	8001254 <Check_Status+0x70>
                frame_buff[1] = byte;
 800123a:	4a2b      	ldr	r2, [pc, #172]	@ (80012e8 <Check_Status+0x104>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	7053      	strb	r3, [r2, #1]
                expected_length = byte;
 8001240:	4a2b      	ldr	r2, [pc, #172]	@ (80012f0 <Check_Status+0x10c>)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	7013      	strb	r3, [r2, #0]
                frame_index = 2;
 8001246:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <Check_Status+0x108>)
 8001248:	2202      	movs	r2, #2
 800124a:	701a      	strb	r2, [r3, #0]
                status = Wait_Type;
 800124c:	4b25      	ldr	r3, [pc, #148]	@ (80012e4 <Check_Status+0x100>)
 800124e:	2202      	movs	r2, #2
 8001250:	701a      	strb	r2, [r3, #0]
            }else{
                status = Wait_Header;
            }
            break;
 8001252:	e041      	b.n	80012d8 <Check_Status+0xf4>
                status = Wait_Header;
 8001254:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <Check_Status+0x100>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
            break;
 800125a:	e03d      	b.n	80012d8 <Check_Status+0xf4>

        case Wait_Type:
            frame_buff[2] = byte;
 800125c:	4a22      	ldr	r2, [pc, #136]	@ (80012e8 <Check_Status+0x104>)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	7093      	strb	r3, [r2, #2]
            frame_index = 3;
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <Check_Status+0x108>)
 8001264:	2203      	movs	r2, #3
 8001266:	701a      	strb	r2, [r3, #0]
            if(expected_length ==2){
 8001268:	4b21      	ldr	r3, [pc, #132]	@ (80012f0 <Check_Status+0x10c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d103      	bne.n	8001278 <Check_Status+0x94>
                status = Wait_CRC;
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <Check_Status+0x100>)
 8001272:	2204      	movs	r2, #4
 8001274:	701a      	strb	r2, [r3, #0]
            }else{
                status = Wait_PayLoad;
            }
            break;
 8001276:	e02f      	b.n	80012d8 <Check_Status+0xf4>
                status = Wait_PayLoad;
 8001278:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <Check_Status+0x100>)
 800127a:	2203      	movs	r2, #3
 800127c:	701a      	strb	r2, [r3, #0]
            break;
 800127e:	e02b      	b.n	80012d8 <Check_Status+0xf4>

        case Wait_PayLoad:
            frame_buff[frame_index] = byte;
 8001280:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <Check_Status+0x108>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <Check_Status+0x104>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	5453      	strb	r3, [r2, r1]
            frame_index++;
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <Check_Status+0x108>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <Check_Status+0x108>)
 8001296:	701a      	strb	r2, [r3, #0]
            if(frame_index >= (expected_length + 1)){
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <Check_Status+0x10c>)
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <Check_Status+0x108>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d218      	bcs.n	80012d6 <Check_Status+0xf2>
                status = Wait_CRC;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <Check_Status+0x100>)
 80012a6:	2204      	movs	r2, #4
 80012a8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80012aa:	e014      	b.n	80012d6 <Check_Status+0xf2>

        case Wait_CRC:
            frame_buff[frame_index] = byte;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <Check_Status+0x108>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <Check_Status+0x104>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	5453      	strb	r3, [r2, r1]
            memcpy(frame, frame_buff, (frame_index+1));
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <Check_Status+0x108>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	461a      	mov	r2, r3
 80012c0:	4909      	ldr	r1, [pc, #36]	@ (80012e8 <Check_Status+0x104>)
 80012c2:	6838      	ldr	r0, [r7, #0]
 80012c4:	f007 fba4 	bl	8008a10 <memcpy>
            status = Wait_Header;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <Check_Status+0x100>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	701a      	strb	r2, [r3, #0]
            return true;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e003      	b.n	80012da <Check_Status+0xf6>
            break;
 80012d2:	bf00      	nop
 80012d4:	e000      	b.n	80012d8 <Check_Status+0xf4>
            break;
 80012d6:	bf00      	nop
            break;
    }
    return false;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200000c2 	.word	0x200000c2
 80012e8:	200000c4 	.word	0x200000c4
 80012ec:	200000de 	.word	0x200000de
 80012f0:	200000df 	.word	0x200000df

080012f4 <map_float>:
float map_float(float x, float in_min, float in_max, float out_min, float out_max) {
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80012fe:	edc7 0a04 	vstr	s1, [r7, #16]
 8001302:	ed87 1a03 	vstr	s2, [r7, #12]
 8001306:	edc7 1a02 	vstr	s3, [r7, #8]
 800130a:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800130e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001312:	edd7 7a04 	vldr	s15, [r7, #16]
 8001316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800131a:	edd7 6a01 	vldr	s13, [r7, #4]
 800131e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001322:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001326:	ee67 6a27 	vmul.f32	s13, s14, s15
 800132a:	ed97 7a03 	vldr	s14, [r7, #12]
 800132e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800133a:	edd7 7a02 	vldr	s15, [r7, #8]
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <CRsF_Process>:
void CRsF_Process(CrsF_Frame*frame){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    if(frame == NULL){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80ad 	beq.w	80014ba <CRsF_Process+0x16a>
//        CDC_Transmit_FS((uint8_t*)"Frame NULL", 10);
        return;
    }

    if(!Check_valid_Frame(frame)){
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff fd6d 	bl	8000e40 <Check_valid_Frame>
 8001366:	4603      	mov	r3, r0
 8001368:	f083 0301 	eor.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	f040 80a5 	bne.w	80014be <CRsF_Process+0x16e>
//        CDC_Transmit_FS((uint8_t*)"Frame Invalid", 12);
        return;
    }

    uint8_t total_length = frame->length + 2;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	3302      	adds	r3, #2
 800137a:	72fb      	strb	r3, [r7, #11]
    if(total_length > MAX_FRAME_SIZE){
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	2b1a      	cmp	r3, #26
 8001380:	f200 809f 	bhi.w	80014c2 <CRsF_Process+0x172>
//        CDC_Transmit_FS((uint8_t*)"Frame too long", 14);
        return;
    }

    Data_Frame[0] = frame->header;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	4b50      	ldr	r3, [pc, #320]	@ (80014cc <CRsF_Process+0x17c>)
 800138a:	701a      	strb	r2, [r3, #0]
    Data_Frame[1] = frame->length;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	785a      	ldrb	r2, [r3, #1]
 8001390:	4b4e      	ldr	r3, [pc, #312]	@ (80014cc <CRsF_Process+0x17c>)
 8001392:	705a      	strb	r2, [r3, #1]
    Data_Frame[2] = frame->type;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	789a      	ldrb	r2, [r3, #2]
 8001398:	4b4c      	ldr	r3, [pc, #304]	@ (80014cc <CRsF_Process+0x17c>)
 800139a:	709a      	strb	r2, [r3, #2]
    uint8_t payload_length = frame->length - 2;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	3b02      	subs	r3, #2
 80013a2:	72bb      	strb	r3, [r7, #10]
    for(int i = 0 ; i<payload_length ; i++){
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e00b      	b.n	80013c2 <CRsF_Process+0x72>
        Data_Frame[i+3] = frame->data[i];
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3303      	adds	r3, #3
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	440a      	add	r2, r1
 80013b4:	3203      	adds	r2, #3
 80013b6:	7811      	ldrb	r1, [r2, #0]
 80013b8:	4a44      	ldr	r2, [pc, #272]	@ (80014cc <CRsF_Process+0x17c>)
 80013ba:	54d1      	strb	r1, [r2, r3]
    for(int i = 0 ; i<payload_length ; i++){
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	7abb      	ldrb	r3, [r7, #10]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbef      	blt.n	80013aa <CRsF_Process+0x5a>
    }
    Data_Frame[3+payload_length] = frame->CRC_val;
 80013ca:	7abb      	ldrb	r3, [r7, #10]
 80013cc:	3303      	adds	r3, #3
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	7e51      	ldrb	r1, [r2, #25]
 80013d2:	4a3e      	ldr	r2, [pc, #248]	@ (80014cc <CRsF_Process+0x17c>)
 80013d4:	54d1      	strb	r1, [r2, r3]

    if(frame->type == RC_Channel && payload_length >= 22){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	789b      	ldrb	r3, [r3, #2]
 80013da:	2b16      	cmp	r3, #22
 80013dc:	d107      	bne.n	80013ee <CRsF_Process+0x9e>
 80013de:	7abb      	ldrb	r3, [r7, #10]
 80013e0:	2b15      	cmp	r3, #21
 80013e2:	d904      	bls.n	80013ee <CRsF_Process+0x9e>
        Payload_CRsF(frame->data);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3303      	adds	r3, #3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fd55 	bl	8000e98 <Payload_CRsF>
//			CRsFChannel[CH_ROLL],
//			CRsFChannel[CH_PITCH],
//			CRsFChannel[CH_YAW],
//			CRsFChannel[CH_ARM]);
//    CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
    ScaledControllerOutput[CH_THROTTLE] = map_float(CRsFChannel[CH_THROTTLE], 183, 1811, 0, 1700);
 80013ee:	4b38      	ldr	r3, [pc, #224]	@ (80014d0 <CRsF_Process+0x180>)
 80013f0:	885b      	ldrh	r3, [r3, #2]
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fa:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 80014d4 <CRsF_Process+0x184>
 80013fe:	eddf 1a36 	vldr	s3, [pc, #216]	@ 80014d8 <CRsF_Process+0x188>
 8001402:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 80014dc <CRsF_Process+0x18c>
 8001406:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80014e0 <CRsF_Process+0x190>
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	f7ff ff71 	bl	80012f4 <map_float>
 8001412:	eef0 7a40 	vmov.f32	s15, s0
 8001416:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <CRsF_Process+0x194>)
 8001418:	edc3 7a01 	vstr	s15, [r3, #4]
    ScaledControllerOutput[CH_ROLL] = map_float(CRsFChannel[CH_ROLL], 175, 1805, 1000, 2000);
 800141c:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <CRsF_Process+0x180>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001428:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 80014e8 <CRsF_Process+0x198>
 800142c:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 80014ec <CRsF_Process+0x19c>
 8001430:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 80014f0 <CRsF_Process+0x1a0>
 8001434:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80014f4 <CRsF_Process+0x1a4>
 8001438:	eeb0 0a67 	vmov.f32	s0, s15
 800143c:	f7ff ff5a 	bl	80012f4 <map_float>
 8001440:	eef0 7a40 	vmov.f32	s15, s0
 8001444:	4b27      	ldr	r3, [pc, #156]	@ (80014e4 <CRsF_Process+0x194>)
 8001446:	edc3 7a00 	vstr	s15, [r3]
    ScaledControllerOutput[CH_PITCH] = map_float(CRsFChannel[CH_PITCH], 174, 1811, 1000, 2000);
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <CRsF_Process+0x180>)
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001456:	ed9f 2a24 	vldr	s4, [pc, #144]	@ 80014e8 <CRsF_Process+0x198>
 800145a:	eddf 1a24 	vldr	s3, [pc, #144]	@ 80014ec <CRsF_Process+0x19c>
 800145e:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80014dc <CRsF_Process+0x18c>
 8001462:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80014f8 <CRsF_Process+0x1a8>
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	f7ff ff43 	bl	80012f4 <map_float>
 800146e:	eef0 7a40 	vmov.f32	s15, s0
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <CRsF_Process+0x194>)
 8001474:	edc3 7a02 	vstr	s15, [r3, #8]
    ScaledControllerOutput[CH_YAW] = map_float(CRsFChannel[CH_YAW], 174, 1801, 1000, 2000);
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <CRsF_Process+0x180>)
 800147a:	88db      	ldrh	r3, [r3, #6]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 80014e8 <CRsF_Process+0x198>
 8001488:	eddf 1a18 	vldr	s3, [pc, #96]	@ 80014ec <CRsF_Process+0x19c>
 800148c:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 80014fc <CRsF_Process+0x1ac>
 8001490:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80014f8 <CRsF_Process+0x1a8>
 8001494:	eeb0 0a67 	vmov.f32	s0, s15
 8001498:	f7ff ff2c 	bl	80012f4 <map_float>
 800149c:	eef0 7a40 	vmov.f32	s15, s0
 80014a0:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <CRsF_Process+0x194>)
 80014a2:	edc3 7a03 	vstr	s15, [r3, #12]
    ScaledControllerOutput[CH_ARM] = CRsFChannel[CH_ARM];
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <CRsF_Process+0x180>)
 80014a8:	891b      	ldrh	r3, [r3, #8]
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <CRsF_Process+0x194>)
 80014b4:	edc3 7a04 	vstr	s15, [r3, #16]
 80014b8:	e004      	b.n	80014c4 <CRsF_Process+0x174>
        return;
 80014ba:	bf00      	nop
 80014bc:	e002      	b.n	80014c4 <CRsF_Process+0x174>
        return;
 80014be:	bf00      	nop
 80014c0:	e000      	b.n	80014c4 <CRsF_Process+0x174>
        return;
 80014c2:	bf00      	nop


}
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000a8 	.word	0x200000a8
 80014d0:	2000007c 	.word	0x2000007c
 80014d4:	44d48000 	.word	0x44d48000
 80014d8:	00000000 	.word	0x00000000
 80014dc:	44e26000 	.word	0x44e26000
 80014e0:	43370000 	.word	0x43370000
 80014e4:	20000628 	.word	0x20000628
 80014e8:	44fa0000 	.word	0x44fa0000
 80014ec:	447a0000 	.word	0x447a0000
 80014f0:	44e1a000 	.word	0x44e1a000
 80014f4:	432f0000 	.word	0x432f0000
 80014f8:	432e0000 	.word	0x432e0000
 80014fc:	44e12000 	.word	0x44e12000

08001500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <MX_DMA_Init+0xb8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a2a      	ldr	r2, [pc, #168]	@ (80015b8 <MX_DMA_Init+0xb8>)
 8001510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <MX_DMA_Init+0xb8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <MX_DMA_Init+0xb8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <MX_DMA_Init+0xb8>)
 800152c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_DMA_Init+0xb8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2101      	movs	r1, #1
 8001542:	200b      	movs	r0, #11
 8001544:	f002 fcb1 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001548:	200b      	movs	r0, #11
 800154a:	f002 fcca 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2101      	movs	r1, #1
 8001552:	200d      	movs	r0, #13
 8001554:	f002 fca9 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001558:	200d      	movs	r0, #13
 800155a:	f002 fcc2 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2101      	movs	r1, #1
 8001562:	200e      	movs	r0, #14
 8001564:	f002 fca1 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001568:	200e      	movs	r0, #14
 800156a:	f002 fcba 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 1, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	202f      	movs	r0, #47	@ 0x2f
 8001574:	f002 fc99 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001578:	202f      	movs	r0, #47	@ 0x2f
 800157a:	f002 fcb2 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2101      	movs	r1, #1
 8001582:	2038      	movs	r0, #56	@ 0x38
 8001584:	f002 fc91 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001588:	2038      	movs	r0, #56	@ 0x38
 800158a:	f002 fcaa 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2039      	movs	r0, #57	@ 0x39
 8001594:	f002 fc89 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001598:	2039      	movs	r0, #57	@ 0x39
 800159a:	f002 fca2 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2101      	movs	r1, #1
 80015a2:	203b      	movs	r0, #59	@ 0x3b
 80015a4:	f002 fc81 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80015a8:	203b      	movs	r0, #59	@ 0x3b
 80015aa:	f002 fc9a 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <Dshot_CalculateCRCandTelemtryBit>:
#include "dshot.h"



uint16_t Dshot_CalculateCRCandTelemtryBit(uint16_t value) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
    value = value << 1;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	80fb      	strh	r3, [r7, #6]
    return ((value ^ (value >> 4) ^ (value >> 8))) & 0x0F;
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4053      	eors	r3, r2
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4053      	eors	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	b29b      	uxth	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <Dshot_GetDshotFrame>:

uint16_t Dshot_GetDshotFrame(uint16_t value) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
    return ((value << 5) | Dshot_CalculateCRCandTelemtryBit(value));
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	015b      	lsls	r3, r3, #5
 8001604:	b21c      	sxth	r4, r3
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ffd7 	bl	80015bc <Dshot_CalculateCRCandTelemtryBit>
 800160e:	4603      	mov	r3, r0
 8001610:	b21b      	sxth	r3, r3
 8001612:	4323      	orrs	r3, r4
 8001614:	b21b      	sxth	r3, r3
 8001616:	b29b      	uxth	r3, r3
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}

08001620 <Dshot_DMABuffer_init>:

void Dshot_DMABuffer_init(uint32_t *MemoryBuffer){
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MEM_BUFFER_LENGTH ; i++){
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e008      	b.n	8001640 <Dshot_DMABuffer_init+0x20>
		MemoryBuffer[i] = BIT_0_CCR_REG_VALUE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	2269      	movs	r2, #105	@ 0x69
 8001638:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MEM_BUFFER_LENGTH ; i++){
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3301      	adds	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	ddf3      	ble.n	800162e <Dshot_DMABuffer_init+0xe>
	}

}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <Dshot_MemoryBuffer_init>:
void Dshot_MemoryBuffer_init(uint32_t *dmaBuffer){
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	for (int i = MEM_BUFFER_LENGTH; i < DMA_BUFFER_LENGTH; i++){
 800165c:	2310      	movs	r3, #16
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	e008      	b.n	8001674 <Dshot_MemoryBuffer_init+0x20>
		dmaBuffer[i] = 0;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
	for (int i = MEM_BUFFER_LENGTH; i < DMA_BUFFER_LENGTH; i++){
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3301      	adds	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b1f      	cmp	r3, #31
 8001678:	ddf3      	ble.n	8001662 <Dshot_MemoryBuffer_init+0xe>
	}

}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <Dshot_Calibrate>:
            (DshotFrame & 0x01) ? BIT_1_CCR_REG_VALUE : BIT_0_CCR_REG_VALUE;
        DshotFrame >>= 1;
    }
}

void Dshot_Calibrate(uint32_t *mem_buffer) {
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e008      	b.n	80016a8 <Dshot_Calibrate+0x20>
        mem_buffer[i] = BIT_0_CCR_REG_VALUE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	2269      	movs	r2, #105	@ 0x69
 80016a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3301      	adds	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	ddf3      	ble.n	8001696 <Dshot_Calibrate+0xe>
    }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <Dshot_PrepareFrame>:

void Dshot_PrepareFrame(uint16_t throttleValue, uint32_t *mem_buffer) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	80fb      	strh	r3, [r7, #6]
	throttleValue += 48; //vì Dshot đi từ 48 -> 2047
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	3330      	adds	r3, #48	@ 0x30
 80016cc:	80fb      	strh	r3, [r7, #6]
    uint16_t frame = Dshot_GetDshotFrame(throttleValue);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff8f 	bl	80015f4 <Dshot_GetDshotFrame>
 80016d6:	4603      	mov	r3, r0
 80016d8:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	e014      	b.n	800170a <Dshot_PrepareFrame+0x4e>
        mem_buffer[MEM_BUFFER_LENGTH - 1 - i] =
            (frame & 0x01) ? BIT_1_CCR_REG_VALUE : BIT_0_CCR_REG_VALUE;
 80016e0:	89fb      	ldrh	r3, [r7, #14]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <Dshot_PrepareFrame+0x32>
 80016ea:	22d2      	movs	r2, #210	@ 0xd2
 80016ec:	e000      	b.n	80016f0 <Dshot_PrepareFrame+0x34>
 80016ee:	2269      	movs	r2, #105	@ 0x69
        mem_buffer[MEM_BUFFER_LENGTH - 1 - i] =
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f1c3 030f 	rsb	r3, r3, #15
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	6839      	ldr	r1, [r7, #0]
 80016fa:	440b      	add	r3, r1
 80016fc:	601a      	str	r2, [r3, #0]
        frame >>= 1;
 80016fe:	89fb      	ldrh	r3, [r7, #14]
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	3301      	adds	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	dde7      	ble.n	80016e0 <Dshot_PrepareFrame+0x24>
    }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <IIR_Filter_1D_Init>:
#include "filter.h"
void IIR_Filter_1D_Init(IIR_Filter_1D *f, float alpha, float beta){
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	ed87 0a02 	vstr	s0, [r7, #8]
 8001726:	edc7 0a01 	vstr	s1, [r7, #4]
    f->alpha = alpha;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	601a      	str	r2, [r3, #0]
    f->beta = beta;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	605a      	str	r2, [r3, #4]
    f->prev_input = 0.0f;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
    f->prev_output = 0.0f;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <IIR_Filter_1D_Update>:
float IIR_Filter_1D_Update(IIR_Filter_1D *f, float input){
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	ed87 0a00 	vstr	s0, [r7]
    float output = f->alpha * f->prev_output + f->beta * input + f->beta * f->prev_input;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edd3 7a02 	vldr	s15, [r3, #8]
 800176a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	edd3 6a01 	vldr	s13, [r3, #4]
 8001774:	edd7 7a00 	vldr	s15, [r7]
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	edd3 6a01 	vldr	s13, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	edd3 7a03 	vldr	s15, [r3, #12]
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev_input = input;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	60da      	str	r2, [r3, #12]
    f->prev_output = output;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	609a      	str	r2, [r3, #8]
    return output;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	ee07 3a90 	vmov	s15, r3
}
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <IIR_Filter_3D_Init>:
void IIR_Filter_3D_Init(IIR_Filter_3D *f, float alpha, float beta){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017c4:	edc7 0a01 	vstr	s1, [r7, #4]
	IIR_Filter_1D_Init(&f->x, alpha, beta);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	edd7 0a01 	vldr	s1, [r7, #4]
 80017ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffa1 	bl	800171a <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->y, alpha, beta);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3310      	adds	r3, #16
 80017dc:	edd7 0a01 	vldr	s1, [r7, #4]
 80017e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff98 	bl	800171a <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->z, alpha, beta);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3320      	adds	r3, #32
 80017ee:	edd7 0a01 	vldr	s1, [r7, #4]
 80017f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff8f 	bl	800171a <IIR_Filter_1D_Init>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <IIR_Filter_3D_Update>:
void IIR_Filter_3D_Update(IIR_Filter_3D *f, float x_in, float y_in, float z_in, float *x_out, float *y_out, float *z_out){
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	61f8      	str	r0, [r7, #28]
 800180c:	ed87 0a06 	vstr	s0, [r7, #24]
 8001810:	edc7 0a05 	vstr	s1, [r7, #20]
 8001814:	ed87 1a04 	vstr	s2, [r7, #16]
 8001818:	60f9      	str	r1, [r7, #12]
 800181a:	60ba      	str	r2, [r7, #8]
 800181c:	607b      	str	r3, [r7, #4]
    *x_out = IIR_Filter_1D_Update(&f->x, x_in);
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	ed97 0a06 	vldr	s0, [r7, #24]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff94 	bl	8001752 <IIR_Filter_1D_Update>
 800182a:	eef0 7a40 	vmov.f32	s15, s0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	edc3 7a00 	vstr	s15, [r3]
    *y_out = IIR_Filter_1D_Update(&f->y, y_in);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	3310      	adds	r3, #16
 8001838:	ed97 0a05 	vldr	s0, [r7, #20]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff88 	bl	8001752 <IIR_Filter_1D_Update>
 8001842:	eef0 7a40 	vmov.f32	s15, s0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	edc3 7a00 	vstr	s15, [r3]
    *z_out = IIR_Filter_1D_Update(&f->z, z_in);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	3320      	adds	r3, #32
 8001850:	ed97 0a04 	vldr	s0, [r7, #16]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff7c 	bl	8001752 <IIR_Filter_1D_Update>
 800185a:	eef0 7a40 	vmov.f32	s15, s0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edc3 7a00 	vstr	s15, [r3]
}
 8001864:	bf00      	nop
 8001866:	3720      	adds	r7, #32
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <MX_GPIO_Init+0x98>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	4a1e      	ldr	r2, [pc, #120]	@ (8001904 <MX_GPIO_Init+0x98>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	@ 0x30
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <MX_GPIO_Init+0x98>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <MX_GPIO_Init+0x98>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <MX_GPIO_Init+0x98>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <MX_GPIO_Init+0x98>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_GPIO_Init+0x98>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <MX_GPIO_Init+0x98>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_GPIO_Init+0x98>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	2110      	movs	r1, #16
 80018da:	480b      	ldr	r0, [pc, #44]	@ (8001908 <MX_GPIO_Init+0x9c>)
 80018dc:	f003 f8ba 	bl	8004a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018e0:	2310      	movs	r3, #16
 80018e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4619      	mov	r1, r3
 80018f6:	4804      	ldr	r0, [pc, #16]	@ (8001908 <MX_GPIO_Init+0x9c>)
 80018f8:	f002 ff10 	bl	800471c <HAL_GPIO_Init>

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_TIM_PeriodElapsedCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191c:	d10c      	bne.n	8001938 <HAL_TIM_PeriodElapsedCallback+0x2c>
        if (mpu.state == 0) {
 800191e:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001920:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_TIM_PeriodElapsedCallback+0x2c>
            mpu.state = 1; // request new transfer
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            MPU6000_Start_DMA(&mpu);
 8001932:	4803      	ldr	r0, [pc, #12]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001934:	f000 ff8e 	bl	8002854 <MPU6000_Start_DMA>
        }
    }
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000234 	.word	0x20000234

08001944 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_SPI_TxRxCpltCallback+0x34>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10c      	bne.n	8001970 <HAL_SPI_TxRxCpltCallback+0x2c>
        HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 8001956:	2201      	movs	r2, #1
 8001958:	2110      	movs	r1, #16
 800195a:	4808      	ldr	r0, [pc, #32]	@ (800197c <HAL_SPI_TxRxCpltCallback+0x38>)
 800195c:	f003 f87a 	bl	8004a54 <HAL_GPIO_WritePin>
        mpu.state = 2; // DMA finished
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001962:	2202      	movs	r2, #2
 8001964:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        mpu.spi_transfer_done = true;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800196a:	2201      	movs	r2, #1
 800196c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    }
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40013000 	.word	0x40013000
 800197c:	40020000 	.word	0x40020000
 8001980:	20000234 	.word	0x20000234

08001984 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:




void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b4b0      	push	{r4, r5, r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2b      	ldr	r2, [pc, #172]	@ (8001a40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xbc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d125      	bne.n	80019e2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5e>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7f1b      	ldrb	r3, [r3, #28]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d10e      	bne.n	80019bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
        {
            memcpy(DShot_DMABufferMotor2, DShot_MemoryBufferMotor2,
 800199e:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc0>)
 80019a0:	4b29      	ldr	r3, [pc, #164]	@ (8001a48 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc4>)
 80019a2:	4614      	mov	r4, r2
 80019a4:	461d      	mov	r5, r3
 80019a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {
            memcpy(DShot_DMABufferMotor4, DShot_MemoryBufferMotor4,
                   MEM_BUFFER_LENGTH * sizeof(DShot_DMABufferMotor4[0]));
        }
    }
}
 80019ba:	e03c      	b.n	8001a36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7f1b      	ldrb	r3, [r3, #28]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d138      	bne.n	8001a36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
            memcpy(DShot_DMABufferMotor3, DShot_MemoryBufferMotor3,
 80019c4:	4a21      	ldr	r2, [pc, #132]	@ (8001a4c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>)
 80019c6:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xcc>)
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80019e0:	e029      	b.n	8001a36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
    else if (htim->Instance == TIM3){
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d124      	bne.n	8001a36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7f1b      	ldrb	r3, [r3, #28]
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d10e      	bne.n	8001a12 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8e>
            memcpy(DShot_DMABufferMotor1, DShot_MemoryBufferMotor1,
 80019f4:	4a18      	ldr	r2, [pc, #96]	@ (8001a58 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>)
 80019f6:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>)
 80019f8:	4614      	mov	r4, r2
 80019fa:	461d      	mov	r5, r3
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001a10:	e011      	b.n	8001a36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7f1b      	ldrb	r3, [r3, #28]
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d10d      	bne.n	8001a36 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
            memcpy(DShot_DMABufferMotor4, DShot_MemoryBufferMotor4,
 8001a1a:	4a11      	ldr	r2, [pc, #68]	@ (8001a60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xdc>)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>)
 8001a1e:	4614      	mov	r4, r2
 8001a20:	461d      	mov	r5, r3
 8001a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bcb0      	pop	{r4, r5, r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40000c00 	.word	0x40000c00
 8001a44:	200003f8 	.word	0x200003f8
 8001a48:	200003b8 	.word	0x200003b8
 8001a4c:	200004b8 	.word	0x200004b8
 8001a50:	20000478 	.word	0x20000478
 8001a54:	40000400 	.word	0x40000400
 8001a58:	20000338 	.word	0x20000338
 8001a5c:	200002f8 	.word	0x200002f8
 8001a60:	20000578 	.word	0x20000578
 8001a64:	20000538 	.word	0x20000538

08001a68 <constrain>:
static inline float constrain(float value, float min_val, float max_val)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a72:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a76:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_val) return min_val;
 8001a7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	d501      	bpl.n	8001a90 <constrain+0x28>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	e00b      	b.n	8001aa8 <constrain+0x40>
    else if (value > max_val) return max_val;
 8001a90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	dd01      	ble.n	8001aa6 <constrain+0x3e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	e000      	b.n	8001aa8 <constrain+0x40>
    else return value;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <init_PIDs>:
float get_roll(float Ax, float Az) {
    return atan2f(-Ax, Az) * 180.0f / M_PI;
}

void init_PIDs(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
//    PID_Init(&pid_roll,  1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
//    PID_Init(&pid_pitch, 1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
//    PID_Init(&pid_yaw,   2.0f, 0.0f, 0.10f, 400.0f, 100.0f);
	PID_Init(&PID_Controller_Pitch.inner_loop, PID_KP_PITCH_INNER, PID_KI_PITCH_INNER, PID_KD_PITCH_INNER, 200.0f, 50.0f);
 8001ac0:	ed9f 2a27 	vldr	s4, [pc, #156]	@ 8001b60 <init_PIDs+0xa4>
 8001ac4:	eddf 1a27 	vldr	s3, [pc, #156]	@ 8001b64 <init_PIDs+0xa8>
 8001ac8:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8001b68 <init_PIDs+0xac>
 8001acc:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001b68 <init_PIDs+0xac>
 8001ad0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001ad4:	4825      	ldr	r0, [pc, #148]	@ (8001b6c <init_PIDs+0xb0>)
 8001ad6:	f001 f8c8 	bl	8002c6a <PID_Init>
	PID_Init(&PID_Controller_Roll.inner_loop, PID_KP_ROLL_INNER, PID_KI_ROLL_INNER, PID_KD_ROLL_INNER, 200.0f, 50.0f);
 8001ada:	ed9f 2a21 	vldr	s4, [pc, #132]	@ 8001b60 <init_PIDs+0xa4>
 8001ade:	eddf 1a21 	vldr	s3, [pc, #132]	@ 8001b64 <init_PIDs+0xa8>
 8001ae2:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8001b68 <init_PIDs+0xac>
 8001ae6:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8001b68 <init_PIDs+0xac>
 8001aea:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001aee:	4820      	ldr	r0, [pc, #128]	@ (8001b70 <init_PIDs+0xb4>)
 8001af0:	f001 f8bb 	bl	8002c6a <PID_Init>
	PID_Init(&PID_Controller_Yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW, 400.0f, 100.0f);
 8001af4:	ed9f 2a1f 	vldr	s4, [pc, #124]	@ 8001b74 <init_PIDs+0xb8>
 8001af8:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 8001b78 <init_PIDs+0xbc>
 8001afc:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8001b68 <init_PIDs+0xac>
 8001b00:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001b68 <init_PIDs+0xac>
 8001b04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001b08:	481c      	ldr	r0, [pc, #112]	@ (8001b7c <init_PIDs+0xc0>)
 8001b0a:	f001 f8ae 	bl	8002c6a <PID_Init>

	PID_Init(&PID_Controller_Pitch.outer_loop, PID_KP_PITCH_OUTER, PID_KI_PITCH_OUTER, PID_KD_PITCH_OUTER, 200.0f, 50.0f);
 8001b0e:	ed9f 2a14 	vldr	s4, [pc, #80]	@ 8001b60 <init_PIDs+0xa4>
 8001b12:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8001b64 <init_PIDs+0xa8>
 8001b16:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8001b68 <init_PIDs+0xac>
 8001b1a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001b68 <init_PIDs+0xac>
 8001b1e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001b22:	4817      	ldr	r0, [pc, #92]	@ (8001b80 <init_PIDs+0xc4>)
 8001b24:	f001 f8a1 	bl	8002c6a <PID_Init>
	PID_Init(&PID_Controller_Roll.outer_loop, PID_KP_ROLL_OUTER, PID_KI_ROLL_OUTER, PID_KD_ROLL_OUTER, 200.0f, 50.0f);
 8001b28:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8001b60 <init_PIDs+0xa4>
 8001b2c:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8001b64 <init_PIDs+0xa8>
 8001b30:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 8001b68 <init_PIDs+0xac>
 8001b34:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8001b68 <init_PIDs+0xac>
 8001b38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001b3c:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <init_PIDs+0xc8>)
 8001b3e:	f001 f894 	bl	8002c6a <PID_Init>
	PID_Init(&PID_Controller_Yaw_Rate, PID_KP_YAW_RATE, PID_KI_YAW_RATE, PID_KD_YAW_RATE, 200.0f, 50.0f);
 8001b42:	ed9f 2a07 	vldr	s4, [pc, #28]	@ 8001b60 <init_PIDs+0xa4>
 8001b46:	eddf 1a07 	vldr	s3, [pc, #28]	@ 8001b64 <init_PIDs+0xa8>
 8001b4a:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8001b68 <init_PIDs+0xac>
 8001b4e:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001b68 <init_PIDs+0xac>
 8001b52:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001b56:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <init_PIDs+0xcc>)
 8001b58:	f001 f887 	bl	8002c6a <PID_Init>

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	42480000 	.word	0x42480000
 8001b64:	43480000 	.word	0x43480000
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	200001a4 	.word	0x200001a4
 8001b70:	20000144 	.word	0x20000144
 8001b74:	42c80000 	.word	0x42c80000
 8001b78:	43c80000 	.word	0x43c80000
 8001b7c:	200001d4 	.word	0x200001d4
 8001b80:	20000174 	.word	0x20000174
 8001b84:	20000114 	.word	0x20000114
 8001b88:	20000204 	.word	0x20000204

08001b8c <CRSF_IdleHandler>:

void CRSF_IdleHandler(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
    uint16_t dma_remaining = __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);
 8001b92:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <CRSF_IdleHandler+0xbc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	813b      	strh	r3, [r7, #8]
    uint16_t new_pos = CRSF_DMA_BUF_SIZE - dma_remaining;
 8001b9a:	893b      	ldrh	r3, [r7, #8]
 8001b9c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001ba0:	80fb      	strh	r3, [r7, #6]

    if(new_pos >= old_pos) {
 8001ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c4c <CRSF_IdleHandler+0xc0>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d318      	bcc.n	8001bde <CRSF_IdleHandler+0x52>
        for(uint16_t i = old_pos; i < new_pos; i++) {
 8001bac:	4b27      	ldr	r3, [pc, #156]	@ (8001c4c <CRSF_IdleHandler+0xc0>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	81fb      	strh	r3, [r7, #14]
 8001bb2:	e00f      	b.n	8001bd4 <CRSF_IdleHandler+0x48>
            if(Check_Status(crsf_dma_buf[i], &receive_frame)) {
 8001bb4:	89fb      	ldrh	r3, [r7, #14]
 8001bb6:	4a26      	ldr	r2, [pc, #152]	@ (8001c50 <CRSF_IdleHandler+0xc4>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	4926      	ldr	r1, [pc, #152]	@ (8001c54 <CRSF_IdleHandler+0xc8>)
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fb11 	bl	80011e4 <Check_Status>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <CRSF_IdleHandler+0x42>
                CRsF_Process(&receive_frame);
 8001bc8:	4822      	ldr	r0, [pc, #136]	@ (8001c54 <CRSF_IdleHandler+0xc8>)
 8001bca:	f7ff fbc1 	bl	8001350 <CRsF_Process>
        for(uint16_t i = old_pos; i < new_pos; i++) {
 8001bce:	89fb      	ldrh	r3, [r7, #14]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	81fb      	strh	r3, [r7, #14]
 8001bd4:	89fa      	ldrh	r2, [r7, #14]
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d3eb      	bcc.n	8001bb4 <CRSF_IdleHandler+0x28>
 8001bdc:	e02d      	b.n	8001c3a <CRSF_IdleHandler+0xae>
            }
        }
    } else {
        for(uint16_t i = old_pos; i < CRSF_DMA_BUF_SIZE; i++) {
 8001bde:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <CRSF_IdleHandler+0xc0>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	81bb      	strh	r3, [r7, #12]
 8001be4:	e00f      	b.n	8001c06 <CRSF_IdleHandler+0x7a>
            if(Check_Status(crsf_dma_buf[i], &receive_frame)) {
 8001be6:	89bb      	ldrh	r3, [r7, #12]
 8001be8:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <CRSF_IdleHandler+0xc4>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	4919      	ldr	r1, [pc, #100]	@ (8001c54 <CRSF_IdleHandler+0xc8>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff faf8 	bl	80011e4 <Check_Status>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <CRSF_IdleHandler+0x74>
                CRsF_Process(&receive_frame);
 8001bfa:	4816      	ldr	r0, [pc, #88]	@ (8001c54 <CRSF_IdleHandler+0xc8>)
 8001bfc:	f7ff fba8 	bl	8001350 <CRsF_Process>
        for(uint16_t i = old_pos; i < CRSF_DMA_BUF_SIZE; i++) {
 8001c00:	89bb      	ldrh	r3, [r7, #12]
 8001c02:	3301      	adds	r3, #1
 8001c04:	81bb      	strh	r3, [r7, #12]
 8001c06:	89bb      	ldrh	r3, [r7, #12]
 8001c08:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c0a:	d9ec      	bls.n	8001be6 <CRSF_IdleHandler+0x5a>
            }
        }
        for(uint16_t i = 0; i < new_pos; i++) {
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	817b      	strh	r3, [r7, #10]
 8001c10:	e00f      	b.n	8001c32 <CRSF_IdleHandler+0xa6>
            if(Check_Status(crsf_dma_buf[i], &receive_frame)) {
 8001c12:	897b      	ldrh	r3, [r7, #10]
 8001c14:	4a0e      	ldr	r2, [pc, #56]	@ (8001c50 <CRSF_IdleHandler+0xc4>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	490e      	ldr	r1, [pc, #56]	@ (8001c54 <CRSF_IdleHandler+0xc8>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fae2 	bl	80011e4 <Check_Status>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <CRSF_IdleHandler+0xa0>
                CRsF_Process(&receive_frame);
 8001c26:	480b      	ldr	r0, [pc, #44]	@ (8001c54 <CRSF_IdleHandler+0xc8>)
 8001c28:	f7ff fb92 	bl	8001350 <CRsF_Process>
        for(uint16_t i = 0; i < new_pos; i++) {
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	817b      	strh	r3, [r7, #10]
 8001c32:	897a      	ldrh	r2, [r7, #10]
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3eb      	bcc.n	8001c12 <CRSF_IdleHandler+0x86>
            }
        }
    }

    old_pos = new_pos;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <CRSF_IdleHandler+0xc0>)
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	8013      	strh	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000a78 	.word	0x20000a78
 8001c4c:	200006bc 	.word	0x200006bc
 8001c50:	2000063c 	.word	0x2000063c
 8001c54:	2000060c 	.word	0x2000060c

08001c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	ed2d 8b02 	vpush	{d8}
 8001c5e:	b08c      	sub	sp, #48	@ 0x30
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c62:	f001 ffb1 	bl	8003bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c66:	f000 fce9 	bl	800263c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6a:	f7ff fdff 	bl	800186c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c6e:	f7ff fc47 	bl	8001500 <MX_DMA_Init>
  MX_SPI1_Init();
 8001c72:	f001 f9e7 	bl	8003044 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001c76:	f001 fbb5 	bl	80033e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c7a:	f001 fbff 	bl	800347c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001c7e:	f001 fc81 	bl	8003584 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001c82:	f001 fec7 	bl	8003a14 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  IIR_Filter_3D_Init(&acc_filtered, IIR_ACC_ALPHA, IIR_ACC_BETA);
 8001c86:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8001dd8 <main+0x180>
 8001c8a:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8001ddc <main+0x184>
 8001c8e:	4854      	ldr	r0, [pc, #336]	@ (8001de0 <main+0x188>)
 8001c90:	f7ff fd92 	bl	80017b8 <IIR_Filter_3D_Init>
  IIR_Filter_3D_Init(&gyro_filtered, IIR_GYR_ALPHA, IIR_GYR_BETA);
 8001c94:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8001de4 <main+0x18c>
 8001c98:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001de8 <main+0x190>
 8001c9c:	4853      	ldr	r0, [pc, #332]	@ (8001dec <main+0x194>)
 8001c9e:	f7ff fd8b 	bl	80017b8 <IIR_Filter_3D_Init>
  MPU6000_Init(&mpu, &hspi1);
 8001ca2:	4953      	ldr	r1, [pc, #332]	@ (8001df0 <main+0x198>)
 8001ca4:	4853      	ldr	r0, [pc, #332]	@ (8001df4 <main+0x19c>)
 8001ca6:	f000 fd8d 	bl	80027c4 <MPU6000_Init>

  mpu.state=0;
 8001caa:	4b52      	ldr	r3, [pc, #328]	@ (8001df4 <main+0x19c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  for(int i=0;i<=14;i++) mpu.tx_buffer[i]=0xFF;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cb6:	e008      	b.n	8001cca <main+0x72>
 8001cb8:	4a4e      	ldr	r2, [pc, #312]	@ (8001df4 <main+0x19c>)
 8001cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3338      	adds	r3, #56	@ 0x38
 8001cc0:	22ff      	movs	r2, #255	@ 0xff
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ccc:	2b0e      	cmp	r3, #14
 8001cce:	ddf3      	ble.n	8001cb8 <main+0x60>
  init_PIDs();
 8001cd0:	f7ff fef4 	bl	8001abc <init_PIDs>
  MPU6000_Calibrate(&mpu);
 8001cd4:	4847      	ldr	r0, [pc, #284]	@ (8001df4 <main+0x19c>)
 8001cd6:	f000 fefd 	bl	8002ad4 <MPU6000_Calibrate>

  Dshot_DMABuffer_init(DShot_DMABufferMotor1);
 8001cda:	4847      	ldr	r0, [pc, #284]	@ (8001df8 <main+0x1a0>)
 8001cdc:	f7ff fca0 	bl	8001620 <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor2);
 8001ce0:	4846      	ldr	r0, [pc, #280]	@ (8001dfc <main+0x1a4>)
 8001ce2:	f7ff fc9d 	bl	8001620 <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor3);
 8001ce6:	4846      	ldr	r0, [pc, #280]	@ (8001e00 <main+0x1a8>)
 8001ce8:	f7ff fc9a 	bl	8001620 <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor4);
 8001cec:	4845      	ldr	r0, [pc, #276]	@ (8001e04 <main+0x1ac>)
 8001cee:	f7ff fc97 	bl	8001620 <Dshot_DMABuffer_init>


  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor1);
 8001cf2:	4845      	ldr	r0, [pc, #276]	@ (8001e08 <main+0x1b0>)
 8001cf4:	f7ff fcae 	bl	8001654 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor2);
 8001cf8:	4844      	ldr	r0, [pc, #272]	@ (8001e0c <main+0x1b4>)
 8001cfa:	f7ff fcab 	bl	8001654 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor3);
 8001cfe:	4844      	ldr	r0, [pc, #272]	@ (8001e10 <main+0x1b8>)
 8001d00:	f7ff fca8 	bl	8001654 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor4);
 8001d04:	4843      	ldr	r0, [pc, #268]	@ (8001e14 <main+0x1bc>)
 8001d06:	f7ff fca5 	bl	8001654 <Dshot_MemoryBuffer_init>

  Dshot_Calibrate(DShot_DMABufferMotor1);
 8001d0a:	483b      	ldr	r0, [pc, #236]	@ (8001df8 <main+0x1a0>)
 8001d0c:	f7ff fcbc 	bl	8001688 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor2);
 8001d10:	483a      	ldr	r0, [pc, #232]	@ (8001dfc <main+0x1a4>)
 8001d12:	f7ff fcb9 	bl	8001688 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor3);
 8001d16:	483a      	ldr	r0, [pc, #232]	@ (8001e00 <main+0x1a8>)
 8001d18:	f7ff fcb6 	bl	8001688 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor4);
 8001d1c:	4839      	ldr	r0, [pc, #228]	@ (8001e04 <main+0x1ac>)
 8001d1e:	f7ff fcb3 	bl	8001688 <Dshot_Calibrate>

  //HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_1, DShot_DMABufferMotor1, DMA_BUFFER_LENGTH);
  HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, DShot_DMABufferMotor1, DMA_BUFFER_LENGTH);
 8001d22:	2320      	movs	r3, #32
 8001d24:	4a34      	ldr	r2, [pc, #208]	@ (8001df8 <main+0x1a0>)
 8001d26:	210c      	movs	r1, #12
 8001d28:	483b      	ldr	r0, [pc, #236]	@ (8001e18 <main+0x1c0>)
 8001d2a:	f004 fc27 	bl	800657c <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, DShot_DMABufferMotor2, DMA_BUFFER_LENGTH);
 8001d2e:	2320      	movs	r3, #32
 8001d30:	4a32      	ldr	r2, [pc, #200]	@ (8001dfc <main+0x1a4>)
 8001d32:	2108      	movs	r1, #8
 8001d34:	4839      	ldr	r0, [pc, #228]	@ (8001e1c <main+0x1c4>)
 8001d36:	f004 fc21 	bl	800657c <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, DShot_DMABufferMotor3, DMA_BUFFER_LENGTH);
 8001d3a:	2320      	movs	r3, #32
 8001d3c:	4a30      	ldr	r2, [pc, #192]	@ (8001e00 <main+0x1a8>)
 8001d3e:	210c      	movs	r1, #12
 8001d40:	4836      	ldr	r0, [pc, #216]	@ (8001e1c <main+0x1c4>)
 8001d42:	f004 fc1b 	bl	800657c <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_3, DShot_DMABufferMotor4, DMA_BUFFER_LENGTH);
 8001d46:	2320      	movs	r3, #32
 8001d48:	4a2e      	ldr	r2, [pc, #184]	@ (8001e04 <main+0x1ac>)
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	4832      	ldr	r0, [pc, #200]	@ (8001e18 <main+0x1c0>)
 8001d4e:	f004 fc15 	bl	800657c <HAL_TIM_PWM_Start_DMA>
  motor_armed = true;
 8001d52:	4b33      	ldr	r3, [pc, #204]	@ (8001e20 <main+0x1c8>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]

  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor1);
 8001d58:	492b      	ldr	r1, [pc, #172]	@ (8001e08 <main+0x1b0>)
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff fcae 	bl	80016bc <Dshot_PrepareFrame>
  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor2);
 8001d60:	492a      	ldr	r1, [pc, #168]	@ (8001e0c <main+0x1b4>)
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7ff fcaa 	bl	80016bc <Dshot_PrepareFrame>
  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor3);
 8001d68:	4929      	ldr	r1, [pc, #164]	@ (8001e10 <main+0x1b8>)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f7ff fca6 	bl	80016bc <Dshot_PrepareFrame>
  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor4);
 8001d70:	4928      	ldr	r1, [pc, #160]	@ (8001e14 <main+0x1bc>)
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fca2 	bl	80016bc <Dshot_PrepareFrame>

  HAL_Delay(3000);
 8001d78:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001d7c:	f001 ff96 	bl	8003cac <HAL_Delay>

  HAL_UART_Receive_DMA(&huart6, crsf_dma_buf, CRSF_DMA_BUF_SIZE);
 8001d80:	2280      	movs	r2, #128	@ 0x80
 8001d82:	4928      	ldr	r1, [pc, #160]	@ (8001e24 <main+0x1cc>)
 8001d84:	4828      	ldr	r0, [pc, #160]	@ (8001e28 <main+0x1d0>)
 8001d86:	f005 fd33 	bl	80077f0 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);  // enable IDLE interrupt
 8001d8a:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <main+0x1d0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <main+0x1d0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0210 	orr.w	r2, r2, #16
 8001d98:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 8001d9a:	4824      	ldr	r0, [pc, #144]	@ (8001e2c <main+0x1d4>)
 8001d9c:	f004 fb24 	bl	80063e8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (ScaledControllerOutput[CH_ARM] < 1500){
 8001da0:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <main+0x1d8>)
 8001da2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001e34 <main+0x1dc>
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	d541      	bpl.n	8001e38 <main+0x1e0>
		  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor1);
 8001db4:	4914      	ldr	r1, [pc, #80]	@ (8001e08 <main+0x1b0>)
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fc80 	bl	80016bc <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor2);
 8001dbc:	4913      	ldr	r1, [pc, #76]	@ (8001e0c <main+0x1b4>)
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fc7c 	bl	80016bc <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor3);
 8001dc4:	4912      	ldr	r1, [pc, #72]	@ (8001e10 <main+0x1b8>)
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff fc78 	bl	80016bc <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor4);
 8001dcc:	4911      	ldr	r1, [pc, #68]	@ (8001e14 <main+0x1bc>)
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fc74 	bl	80016bc <Dshot_PrepareFrame>
 8001dd4:	e060      	b.n	8001e98 <main+0x240>
 8001dd6:	bf00      	nop
 8001dd8:	3cf9db23 	.word	0x3cf9db23
 8001ddc:	3f7068dc 	.word	0x3f7068dc
 8001de0:	20000298 	.word	0x20000298
 8001de4:	3d727bb3 	.word	0x3d727bb3
 8001de8:	3f61b08a 	.word	0x3f61b08a
 8001dec:	200002c8 	.word	0x200002c8
 8001df0:	200006c0 	.word	0x200006c0
 8001df4:	20000234 	.word	0x20000234
 8001df8:	20000338 	.word	0x20000338
 8001dfc:	200003f8 	.word	0x200003f8
 8001e00:	200004b8 	.word	0x200004b8
 8001e04:	20000578 	.word	0x20000578
 8001e08:	200002f8 	.word	0x200002f8
 8001e0c:	200003b8 	.word	0x200003b8
 8001e10:	20000478 	.word	0x20000478
 8001e14:	20000538 	.word	0x20000538
 8001e18:	20000868 	.word	0x20000868
 8001e1c:	20000820 	.word	0x20000820
 8001e20:	200005f8 	.word	0x200005f8
 8001e24:	2000063c 	.word	0x2000063c
 8001e28:	20000a30 	.word	0x20000a30
 8001e2c:	200007d8 	.word	0x200007d8
 8001e30:	20000628 	.word	0x20000628
 8001e34:	44bb8000 	.word	0x44bb8000

	  }
	  else{
		  //0 <= m1, m2, m3, m4 <= 1999
		  Dshot_PrepareFrame(m1, DShot_MemoryBufferMotor1);
 8001e38:	4bd5      	ldr	r3, [pc, #852]	@ (8002190 <main+0x538>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e42:	ee17 3a90 	vmov	r3, s15
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	49d2      	ldr	r1, [pc, #840]	@ (8002194 <main+0x53c>)
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fc36 	bl	80016bc <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(m2, DShot_MemoryBufferMotor2);
 8001e50:	4bd1      	ldr	r3, [pc, #836]	@ (8002198 <main+0x540>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e5a:	ee17 3a90 	vmov	r3, s15
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	49ce      	ldr	r1, [pc, #824]	@ (800219c <main+0x544>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fc2a 	bl	80016bc <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(m3, DShot_MemoryBufferMotor3);
 8001e68:	4bcd      	ldr	r3, [pc, #820]	@ (80021a0 <main+0x548>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e72:	ee17 3a90 	vmov	r3, s15
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	49ca      	ldr	r1, [pc, #808]	@ (80021a4 <main+0x54c>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fc1e 	bl	80016bc <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(m4, DShot_MemoryBufferMotor4);
 8001e80:	4bc9      	ldr	r3, [pc, #804]	@ (80021a8 <main+0x550>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8a:	ee17 3a90 	vmov	r3, s15
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	49c6      	ldr	r1, [pc, #792]	@ (80021ac <main+0x554>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fc12 	bl	80016bc <Dshot_PrepareFrame>
	  }

	  if (mpu.state==2){
 8001e98:	4bc5      	ldr	r3, [pc, #788]	@ (80021b0 <main+0x558>)
 8001e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	f47f af7d 	bne.w	8001da0 <main+0x148>
		  MPU6000_Process_DMA(&mpu);
 8001ea6:	48c2      	ldr	r0, [pc, #776]	@ (80021b0 <main+0x558>)
 8001ea8:	f000 fd0a 	bl	80028c0 <MPU6000_Process_DMA>
		  mpu.state = 0;
 8001eac:	4bc0      	ldr	r3, [pc, #768]	@ (80021b0 <main+0x558>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59


		  /*low-pass filter*/
		  IIR_Filter_3D_Update(&acc_filtered, mpu.acc[0], mpu.acc[1], mpu.acc[2], &acc_x, &acc_y, &acc_z);
 8001eb4:	4bbe      	ldr	r3, [pc, #760]	@ (80021b0 <main+0x558>)
 8001eb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eba:	4bbd      	ldr	r3, [pc, #756]	@ (80021b0 <main+0x558>)
 8001ebc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ec0:	4bbb      	ldr	r3, [pc, #748]	@ (80021b0 <main+0x558>)
 8001ec2:	edd3 6a03 	vldr	s13, [r3, #12]
 8001ec6:	4bbb      	ldr	r3, [pc, #748]	@ (80021b4 <main+0x55c>)
 8001ec8:	4abb      	ldr	r2, [pc, #748]	@ (80021b8 <main+0x560>)
 8001eca:	49bc      	ldr	r1, [pc, #752]	@ (80021bc <main+0x564>)
 8001ecc:	eeb0 1a66 	vmov.f32	s2, s13
 8001ed0:	eef0 0a47 	vmov.f32	s1, s14
 8001ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed8:	48b9      	ldr	r0, [pc, #740]	@ (80021c0 <main+0x568>)
 8001eda:	f7ff fc93 	bl	8001804 <IIR_Filter_3D_Update>
		  IIR_Filter_3D_Update(&gyro_filtered, mpu.gyro[0], mpu.gyro[1], mpu.gyro[2], &gyro_p, &gyro_q, &gyro_r);
 8001ede:	4bb4      	ldr	r3, [pc, #720]	@ (80021b0 <main+0x558>)
 8001ee0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ee4:	4bb2      	ldr	r3, [pc, #712]	@ (80021b0 <main+0x558>)
 8001ee6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001eea:	4bb1      	ldr	r3, [pc, #708]	@ (80021b0 <main+0x558>)
 8001eec:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ef0:	4bb4      	ldr	r3, [pc, #720]	@ (80021c4 <main+0x56c>)
 8001ef2:	4ab5      	ldr	r2, [pc, #724]	@ (80021c8 <main+0x570>)
 8001ef4:	49b5      	ldr	r1, [pc, #724]	@ (80021cc <main+0x574>)
 8001ef6:	eeb0 1a66 	vmov.f32	s2, s13
 8001efa:	eef0 0a47 	vmov.f32	s1, s14
 8001efe:	eeb0 0a67 	vmov.f32	s0, s15
 8001f02:	48b3      	ldr	r0, [pc, #716]	@ (80021d0 <main+0x578>)
 8001f04:	f7ff fc7e 	bl	8001804 <IIR_Filter_3D_Update>

		  /*Estimate pitch and roll*/
		  rollHat_acc_rad = atan2f(acc_y, acc_z);
 8001f08:	4bab      	ldr	r3, [pc, #684]	@ (80021b8 <main+0x560>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	4ba9      	ldr	r3, [pc, #676]	@ (80021b4 <main+0x55c>)
 8001f10:	ed93 7a00 	vldr	s14, [r3]
 8001f14:	eef0 0a47 	vmov.f32	s1, s14
 8001f18:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1c:	f006 fd86 	bl	8008a2c <atan2f>
 8001f20:	eef0 7a40 	vmov.f32	s15, s0
 8001f24:	4bab      	ldr	r3, [pc, #684]	@ (80021d4 <main+0x57c>)
 8001f26:	edc3 7a00 	vstr	s15, [r3]
		  pitchHat_acc_rad = atan2f(-acc_x, sqrtf(acc_y * acc_y + acc_z * acc_z));
 8001f2a:	4ba4      	ldr	r3, [pc, #656]	@ (80021bc <main+0x564>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	eeb1 8a67 	vneg.f32	s16, s15
 8001f34:	4ba0      	ldr	r3, [pc, #640]	@ (80021b8 <main+0x560>)
 8001f36:	ed93 7a00 	vldr	s14, [r3]
 8001f3a:	4b9f      	ldr	r3, [pc, #636]	@ (80021b8 <main+0x560>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	4b9b      	ldr	r3, [pc, #620]	@ (80021b4 <main+0x55c>)
 8001f46:	edd3 6a00 	vldr	s13, [r3]
 8001f4a:	4b9a      	ldr	r3, [pc, #616]	@ (80021b4 <main+0x55c>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f58:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5c:	f006 fd68 	bl	8008a30 <sqrtf>
 8001f60:	eef0 7a40 	vmov.f32	s15, s0
 8001f64:	eef0 0a67 	vmov.f32	s1, s15
 8001f68:	eeb0 0a48 	vmov.f32	s0, s16
 8001f6c:	f006 fd5e 	bl	8008a2c <atan2f>
 8001f70:	eef0 7a40 	vmov.f32	s15, s0
 8001f74:	4b98      	ldr	r3, [pc, #608]	@ (80021d8 <main+0x580>)
 8001f76:	edc3 7a00 	vstr	s15, [r3]

		  float yawDot_rad = gyro_r * (M_PI / 180.0f);
 8001f7a:	4b92      	ldr	r3, [pc, #584]	@ (80021c4 <main+0x56c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fa86 	bl	8000490 <__aeabi_f2d>
 8001f84:	a37c      	add	r3, pc, #496	@ (adr r3, 8002178 <main+0x520>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fad9 	bl	8000540 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fd6d 	bl	8000a74 <__aeabi_d2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
		  float rollDot_rad = (gyro_p * (M_PI / 180.0f) + tanf(pitchHat_acc_rad) * sinf(rollHat_acc_rad) * gyro_q * (M_PI / 180.0f) + tanf(pitchHat_acc_rad) * cosf(rollHat_acc_rad) * gyro_r * (M_PI / 180.0f));
 8001f9e:	4b8b      	ldr	r3, [pc, #556]	@ (80021cc <main+0x574>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fa74 	bl	8000490 <__aeabi_f2d>
 8001fa8:	a373      	add	r3, pc, #460	@ (adr r3, 8002178 <main+0x520>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fac7 	bl	8000540 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	461d      	mov	r5, r3
 8001fba:	4b87      	ldr	r3, [pc, #540]	@ (80021d8 <main+0x580>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	f006 fddc 	bl	8008b80 <tanf>
 8001fc8:	eeb0 8a40 	vmov.f32	s16, s0
 8001fcc:	4b81      	ldr	r3, [pc, #516]	@ (80021d4 <main+0x57c>)
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd6:	f006 fd8d 	bl	8008af4 <sinf>
 8001fda:	eef0 7a40 	vmov.f32	s15, s0
 8001fde:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001fe2:	4b79      	ldr	r3, [pc, #484]	@ (80021c8 <main+0x570>)
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fec:	ee17 0a90 	vmov	r0, s15
 8001ff0:	f7fe fa4e 	bl	8000490 <__aeabi_f2d>
 8001ff4:	a360      	add	r3, pc, #384	@ (adr r3, 8002178 <main+0x520>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe faa1 	bl	8000540 <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe f8e5 	bl	80001d4 <__adddf3>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4614      	mov	r4, r2
 8002010:	461d      	mov	r5, r3
 8002012:	4b71      	ldr	r3, [pc, #452]	@ (80021d8 <main+0x580>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eeb0 0a67 	vmov.f32	s0, s15
 800201c:	f006 fdb0 	bl	8008b80 <tanf>
 8002020:	eeb0 8a40 	vmov.f32	s16, s0
 8002024:	4b6b      	ldr	r3, [pc, #428]	@ (80021d4 <main+0x57c>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	eeb0 0a67 	vmov.f32	s0, s15
 800202e:	f006 fd1d 	bl	8008a6c <cosf>
 8002032:	eef0 7a40 	vmov.f32	s15, s0
 8002036:	ee28 7a27 	vmul.f32	s14, s16, s15
 800203a:	4b62      	ldr	r3, [pc, #392]	@ (80021c4 <main+0x56c>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002044:	ee17 0a90 	vmov	r0, s15
 8002048:	f7fe fa22 	bl	8000490 <__aeabi_f2d>
 800204c:	a34a      	add	r3, pc, #296	@ (adr r3, 8002178 <main+0x520>)
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f7fe fa75 	bl	8000540 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4620      	mov	r0, r4
 800205c:	4629      	mov	r1, r5
 800205e:	f7fe f8b9 	bl	80001d4 <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fd03 	bl	8000a74 <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
		  float pitchDot_rad = (cosf(rollHat_acc_rad) * gyro_q * (M_PI / 180.0f) - sinf(rollHat_acc_rad) * gyro_r * (M_PI / 180.0f));
 8002072:	4b58      	ldr	r3, [pc, #352]	@ (80021d4 <main+0x57c>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	eeb0 0a67 	vmov.f32	s0, s15
 800207c:	f006 fcf6 	bl	8008a6c <cosf>
 8002080:	eeb0 7a40 	vmov.f32	s14, s0
 8002084:	4b50      	ldr	r3, [pc, #320]	@ (80021c8 <main+0x570>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	ee17 0a90 	vmov	r0, s15
 8002092:	f7fe f9fd 	bl	8000490 <__aeabi_f2d>
 8002096:	a338      	add	r3, pc, #224	@ (adr r3, 8002178 <main+0x520>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fa50 	bl	8000540 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4614      	mov	r4, r2
 80020a6:	461d      	mov	r5, r3
 80020a8:	4b4a      	ldr	r3, [pc, #296]	@ (80021d4 <main+0x57c>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	f006 fd1f 	bl	8008af4 <sinf>
 80020b6:	eeb0 7a40 	vmov.f32	s14, s0
 80020ba:	4b42      	ldr	r3, [pc, #264]	@ (80021c4 <main+0x56c>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	ee17 0a90 	vmov	r0, s15
 80020c8:	f7fe f9e2 	bl	8000490 <__aeabi_f2d>
 80020cc:	a32a      	add	r3, pc, #168	@ (adr r3, 8002178 <main+0x520>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	f7fe fa35 	bl	8000540 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4620      	mov	r0, r4
 80020dc:	4629      	mov	r1, r5
 80020de:	f7fe f877 	bl	80001d0 <__aeabi_dsub>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fcc3 	bl	8000a74 <__aeabi_d2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	623b      	str	r3, [r7, #32]

		  //Complementary filter
		  roll_rad = (1.0f - COMP_ALPHA) * rollHat_acc_rad + COMP_ALPHA * (roll_rad + rollDot_rad * dt );
 80020f2:	4b38      	ldr	r3, [pc, #224]	@ (80021d4 <main+0x57c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f9ca 	bl	8000490 <__aeabi_f2d>
 80020fc:	a320      	add	r3, pc, #128	@ (adr r3, 8002180 <main+0x528>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fa1d 	bl	8000540 <__aeabi_dmul>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4614      	mov	r4, r2
 800210c:	461d      	mov	r5, r3
 800210e:	4b33      	ldr	r3, [pc, #204]	@ (80021dc <main+0x584>)
 8002110:	ed93 7a00 	vldr	s14, [r3]
 8002114:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211c:	4b30      	ldr	r3, [pc, #192]	@ (80021e0 <main+0x588>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	ee17 0a90 	vmov	r0, s15
 800212a:	f7fe f9b1 	bl	8000490 <__aeabi_f2d>
 800212e:	a316      	add	r3, pc, #88	@ (adr r3, 8002188 <main+0x530>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa04 	bl	8000540 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f848 	bl	80001d4 <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fc92 	bl	8000a74 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a23      	ldr	r2, [pc, #140]	@ (80021e0 <main+0x588>)
 8002154:	6013      	str	r3, [r2, #0]
		  pitch_rad = (1.0f - COMP_ALPHA) * pitchHat_acc_rad + COMP_ALPHA * (pitch_rad + pitchDot_rad * dt );
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <main+0x580>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f998 	bl	8000490 <__aeabi_f2d>
 8002160:	a307      	add	r3, pc, #28	@ (adr r3, 8002180 <main+0x528>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	f7fe f9eb 	bl	8000540 <__aeabi_dmul>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4614      	mov	r4, r2
 8002170:	e038      	b.n	80021e4 <main+0x58c>
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	a2529d39 	.word	0xa2529d39
 800217c:	3f91df46 	.word	0x3f91df46
 8002180:	999999a0 	.word	0x999999a0
 8002184:	3fa99999 	.word	0x3fa99999
 8002188:	66666666 	.word	0x66666666
 800218c:	3fee6666 	.word	0x3fee6666
 8002190:	200005fc 	.word	0x200005fc
 8002194:	200002f8 	.word	0x200002f8
 8002198:	20000600 	.word	0x20000600
 800219c:	200003b8 	.word	0x200003b8
 80021a0:	20000604 	.word	0x20000604
 80021a4:	20000478 	.word	0x20000478
 80021a8:	20000608 	.word	0x20000608
 80021ac:	20000538 	.word	0x20000538
 80021b0:	20000234 	.word	0x20000234
 80021b4:	200000e8 	.word	0x200000e8
 80021b8:	200000e4 	.word	0x200000e4
 80021bc:	200000e0 	.word	0x200000e0
 80021c0:	20000298 	.word	0x20000298
 80021c4:	200000f4 	.word	0x200000f4
 80021c8:	200000f0 	.word	0x200000f0
 80021cc:	200000ec 	.word	0x200000ec
 80021d0:	200002c8 	.word	0x200002c8
 80021d4:	20000290 	.word	0x20000290
 80021d8:	20000294 	.word	0x20000294
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000108 	.word	0x20000108
 80021e4:	461d      	mov	r5, r3
 80021e6:	4b2e      	ldr	r3, [pc, #184]	@ (80022a0 <main+0x648>)
 80021e8:	ed93 7a00 	vldr	s14, [r3]
 80021ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80021f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f4:	4b2b      	ldr	r3, [pc, #172]	@ (80022a4 <main+0x64c>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f945 	bl	8000490 <__aeabi_f2d>
 8002206:	a322      	add	r3, pc, #136	@ (adr r3, 8002290 <main+0x638>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe f998 	bl	8000540 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fd ffdc 	bl	80001d4 <__adddf3>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe fc26 	bl	8000a74 <__aeabi_d2f>
 8002228:	4603      	mov	r3, r0
 800222a:	4a1e      	ldr	r2, [pc, #120]	@ (80022a4 <main+0x64c>)
 800222c:	6013      	str	r3, [r2, #0]
		  yaw_rad = yaw_rad + yawDot_rad*dt;
 800222e:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <main+0x648>)
 8002230:	ed93 7a00 	vldr	s14, [r3]
 8002234:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <main+0x650>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <main+0x650>)
 8002248:	edc3 7a00 	vstr	s15, [r3]

		  while (yaw_rad >= 2.0f * M_PI) yaw_rad -= 2.0f * M_PI;
 800224c:	e012      	b.n	8002274 <main+0x61c>
 800224e:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <main+0x650>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f91c 	bl	8000490 <__aeabi_f2d>
 8002258:	a30f      	add	r3, pc, #60	@ (adr r3, 8002298 <main+0x640>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fd ffb7 	bl	80001d0 <__aeabi_dsub>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f7fe fc03 	bl	8000a74 <__aeabi_d2f>
 800226e:	4603      	mov	r3, r0
 8002270:	4a0d      	ldr	r2, [pc, #52]	@ (80022a8 <main+0x650>)
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <main+0x650>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f909 	bl	8000490 <__aeabi_f2d>
 800227e:	a306      	add	r3, pc, #24	@ (adr r3, 8002298 <main+0x640>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe fbe2 	bl	8000a4c <__aeabi_dcmpge>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1df      	bne.n	800224e <main+0x5f6>
		  while (yaw_rad < 0.0f)         yaw_rad += 2.0f * M_PI;
 800228e:	e020      	b.n	80022d2 <main+0x67a>
 8002290:	66666666 	.word	0x66666666
 8002294:	3fee6666 	.word	0x3fee6666
 8002298:	54442d18 	.word	0x54442d18
 800229c:	401921fb 	.word	0x401921fb
 80022a0:	20000000 	.word	0x20000000
 80022a4:	2000010c 	.word	0x2000010c
 80022a8:	20000110 	.word	0x20000110
 80022ac:	4bce      	ldr	r3, [pc, #824]	@ (80025e8 <main+0x990>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f8ed 	bl	8000490 <__aeabi_f2d>
 80022b6:	a3c8      	add	r3, pc, #800	@ (adr r3, 80025d8 <main+0x980>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fd ff8a 	bl	80001d4 <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fbd4 	bl	8000a74 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4ac6      	ldr	r2, [pc, #792]	@ (80025e8 <main+0x990>)
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4bc5      	ldr	r3, [pc, #788]	@ (80025e8 <main+0x990>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e0:	d4e4      	bmi.n	80022ac <main+0x654>

		  float yawDot = yawDot_rad * (180.0f / M_PI);
 80022e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022e4:	f7fe f8d4 	bl	8000490 <__aeabi_f2d>
 80022e8:	a3bd      	add	r3, pc, #756	@ (adr r3, 80025e0 <main+0x988>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fe f927 	bl	8000540 <__aeabi_dmul>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7fe fbbb 	bl	8000a74 <__aeabi_d2f>
 80022fe:	4603      	mov	r3, r0
 8002300:	61fb      	str	r3, [r7, #28]
		  float rollDot = rollDot_rad * (180.0f / M_PI);
 8002302:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002304:	f7fe f8c4 	bl	8000490 <__aeabi_f2d>
 8002308:	a3b5      	add	r3, pc, #724	@ (adr r3, 80025e0 <main+0x988>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe f917 	bl	8000540 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fbab 	bl	8000a74 <__aeabi_d2f>
 800231e:	4603      	mov	r3, r0
 8002320:	61bb      	str	r3, [r7, #24]
		  float pitchDot = pitchDot_rad * (180.0f / M_PI);
 8002322:	6a38      	ldr	r0, [r7, #32]
 8002324:	f7fe f8b4 	bl	8000490 <__aeabi_f2d>
 8002328:	a3ad      	add	r3, pc, #692	@ (adr r3, 80025e0 <main+0x988>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f907 	bl	8000540 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f7fe fb9b 	bl	8000a74 <__aeabi_d2f>
 800233e:	4603      	mov	r3, r0
 8002340:	617b      	str	r3, [r7, #20]

		  roll = roll_rad * (180.0f / M_PI);
 8002342:	4baa      	ldr	r3, [pc, #680]	@ (80025ec <main+0x994>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe f8a2 	bl	8000490 <__aeabi_f2d>
 800234c:	a3a4      	add	r3, pc, #656	@ (adr r3, 80025e0 <main+0x988>)
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f7fe f8f5 	bl	8000540 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fb89 	bl	8000a74 <__aeabi_d2f>
 8002362:	4603      	mov	r3, r0
 8002364:	4aa2      	ldr	r2, [pc, #648]	@ (80025f0 <main+0x998>)
 8002366:	6013      	str	r3, [r2, #0]
		  pitch = pitch_rad * (180.0f / M_PI);
 8002368:	4ba2      	ldr	r3, [pc, #648]	@ (80025f4 <main+0x99c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f88f 	bl	8000490 <__aeabi_f2d>
 8002372:	a39b      	add	r3, pc, #620	@ (adr r3, 80025e0 <main+0x988>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe f8e2 	bl	8000540 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4610      	mov	r0, r2
 8002382:	4619      	mov	r1, r3
 8002384:	f7fe fb76 	bl	8000a74 <__aeabi_d2f>
 8002388:	4603      	mov	r3, r0
 800238a:	4a9b      	ldr	r2, [pc, #620]	@ (80025f8 <main+0x9a0>)
 800238c:	6013      	str	r3, [r2, #0]
		  yaw = yaw_rad * (180.0f / M_PI);
 800238e:	4b96      	ldr	r3, [pc, #600]	@ (80025e8 <main+0x990>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe f87c 	bl	8000490 <__aeabi_f2d>
 8002398:	a391      	add	r3, pc, #580	@ (adr r3, 80025e0 <main+0x988>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fe f8cf 	bl	8000540 <__aeabi_dmul>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4610      	mov	r0, r2
 80023a8:	4619      	mov	r1, r3
 80023aa:	f7fe fb63 	bl	8000a74 <__aeabi_d2f>
 80023ae:	4603      	mov	r3, r0
 80023b0:	4a92      	ldr	r2, [pc, #584]	@ (80025fc <main+0x9a4>)
 80023b2:	6013      	str	r3, [r2, #0]



		  float roll_out = PID_Double_Calculation(&PID_Controller_Roll, (ScaledControllerOutput[CH_ROLL] - 1500), roll, rollDot, dt);
 80023b4:	4b92      	ldr	r3, [pc, #584]	@ (8002600 <main+0x9a8>)
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8002604 <main+0x9ac>
 80023be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023c2:	4b8b      	ldr	r3, [pc, #556]	@ (80025f0 <main+0x998>)
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002608 <main+0x9b0>)
 80023ca:	edd3 6a00 	vldr	s13, [r3]
 80023ce:	eef0 1a66 	vmov.f32	s3, s13
 80023d2:	ed97 1a06 	vldr	s2, [r7, #24]
 80023d6:	eef0 0a47 	vmov.f32	s1, s14
 80023da:	eeb0 0a67 	vmov.f32	s0, s15
 80023de:	488b      	ldr	r0, [pc, #556]	@ (800260c <main+0x9b4>)
 80023e0:	f000 fc82 	bl	8002ce8 <PID_Double_Calculation>
 80023e4:	ed87 0a04 	vstr	s0, [r7, #16]
		  float pitch_out = PID_Double_Calculation(&PID_Controller_Pitch,(ScaledControllerOutput[CH_PITCH] - 1500), pitch, pitchDot, dt);
 80023e8:	4b85      	ldr	r3, [pc, #532]	@ (8002600 <main+0x9a8>)
 80023ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ee:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002604 <main+0x9ac>
 80023f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023f6:	4b80      	ldr	r3, [pc, #512]	@ (80025f8 <main+0x9a0>)
 80023f8:	ed93 7a00 	vldr	s14, [r3]
 80023fc:	4b82      	ldr	r3, [pc, #520]	@ (8002608 <main+0x9b0>)
 80023fe:	edd3 6a00 	vldr	s13, [r3]
 8002402:	eef0 1a66 	vmov.f32	s3, s13
 8002406:	ed97 1a05 	vldr	s2, [r7, #20]
 800240a:	eef0 0a47 	vmov.f32	s1, s14
 800240e:	eeb0 0a67 	vmov.f32	s0, s15
 8002412:	487f      	ldr	r0, [pc, #508]	@ (8002610 <main+0x9b8>)
 8002414:	f000 fc68 	bl	8002ce8 <PID_Double_Calculation>
 8002418:	ed87 0a03 	vstr	s0, [r7, #12]
		  float yaw_out = PID_Yaw_Angle_Calculation(&PID_Controller_Yaw, yaw_target, yaw, yawDot, dt);
 800241c:	4b7d      	ldr	r3, [pc, #500]	@ (8002614 <main+0x9bc>)
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	4b76      	ldr	r3, [pc, #472]	@ (80025fc <main+0x9a4>)
 8002424:	ed93 7a00 	vldr	s14, [r3]
 8002428:	4b77      	ldr	r3, [pc, #476]	@ (8002608 <main+0x9b0>)
 800242a:	edd3 6a00 	vldr	s13, [r3]
 800242e:	eef0 1a66 	vmov.f32	s3, s13
 8002432:	ed97 1a07 	vldr	s2, [r7, #28]
 8002436:	eef0 0a47 	vmov.f32	s1, s14
 800243a:	eeb0 0a67 	vmov.f32	s0, s15
 800243e:	4876      	ldr	r0, [pc, #472]	@ (8002618 <main+0x9c0>)
 8002440:	f000 fd74 	bl	8002f2c <PID_Yaw_Angle_Calculation>
 8002444:	ed87 0a02 	vstr	s0, [r7, #8]


		  // Clamp PID outputs to safe range
		  const float max_correction = 200.0f;  // adjust based on tuning
 8002448:	4b74      	ldr	r3, [pc, #464]	@ (800261c <main+0x9c4>)
 800244a:	607b      	str	r3, [r7, #4]
		  roll_out  = constrain(roll_out,  -max_correction, max_correction);
 800244c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002450:	eef1 7a67 	vneg.f32	s15, s15
 8002454:	ed97 1a01 	vldr	s2, [r7, #4]
 8002458:	eef0 0a67 	vmov.f32	s1, s15
 800245c:	ed97 0a04 	vldr	s0, [r7, #16]
 8002460:	f7ff fb02 	bl	8001a68 <constrain>
 8002464:	ed87 0a04 	vstr	s0, [r7, #16]
		  pitch_out = constrain(pitch_out, -max_correction, max_correction);
 8002468:	edd7 7a01 	vldr	s15, [r7, #4]
 800246c:	eef1 7a67 	vneg.f32	s15, s15
 8002470:	ed97 1a01 	vldr	s2, [r7, #4]
 8002474:	eef0 0a67 	vmov.f32	s1, s15
 8002478:	ed97 0a03 	vldr	s0, [r7, #12]
 800247c:	f7ff faf4 	bl	8001a68 <constrain>
 8002480:	ed87 0a03 	vstr	s0, [r7, #12]
		  yaw_out   = constrain(yaw_out,   -max_correction, max_correction);
 8002484:	edd7 7a01 	vldr	s15, [r7, #4]
 8002488:	eef1 7a67 	vneg.f32	s15, s15
 800248c:	ed97 1a01 	vldr	s2, [r7, #4]
 8002490:	eef0 0a67 	vmov.f32	s1, s15
 8002494:	ed97 0a02 	vldr	s0, [r7, #8]
 8002498:	f7ff fae6 	bl	8001a68 <constrain>
 800249c:	ed87 0a02 	vstr	s0, [r7, #8]

		  // Motor mix
		  m1 = 100 + ScaledControllerOutput[CH_THROTTLE] - pitch_out - roll_out - yaw_out;
 80024a0:	4b57      	ldr	r3, [pc, #348]	@ (8002600 <main+0x9a8>)
 80024a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80024a6:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002620 <main+0x9c8>
 80024aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80024ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024be:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c6:	4b57      	ldr	r3, [pc, #348]	@ (8002624 <main+0x9cc>)
 80024c8:	edc3 7a00 	vstr	s15, [r3]
		  m2 = 100 + ScaledControllerOutput[CH_THROTTLE] + pitch_out - roll_out + yaw_out;
 80024cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002600 <main+0x9a8>)
 80024ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80024d2:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002620 <main+0x9c8>
 80024d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80024da:	edd7 7a03 	vldr	s15, [r7, #12]
 80024de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002628 <main+0x9d0>)
 80024f4:	edc3 7a00 	vstr	s15, [r3]
		  m3 = 100 + ScaledControllerOutput[CH_THROTTLE] - pitch_out + roll_out + yaw_out;
 80024f8:	4b41      	ldr	r3, [pc, #260]	@ (8002600 <main+0x9a8>)
 80024fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80024fe:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002620 <main+0x9c8>
 8002502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002506:	edd7 7a03 	vldr	s15, [r7, #12]
 800250a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002512:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002516:	edd7 7a02 	vldr	s15, [r7, #8]
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	4b43      	ldr	r3, [pc, #268]	@ (800262c <main+0x9d4>)
 8002520:	edc3 7a00 	vstr	s15, [r3]
		  m4 = 100 + ScaledControllerOutput[CH_THROTTLE] + pitch_out + roll_out - yaw_out;
 8002524:	4b36      	ldr	r3, [pc, #216]	@ (8002600 <main+0x9a8>)
 8002526:	edd3 7a01 	vldr	s15, [r3, #4]
 800252a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002620 <main+0x9c8>
 800252e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002532:	edd7 7a03 	vldr	s15, [r7, #12]
 8002536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800253a:	edd7 7a04 	vldr	s15, [r7, #16]
 800253e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002542:	edd7 7a02 	vldr	s15, [r7, #8]
 8002546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254a:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <main+0x9d8>)
 800254c:	edc3 7a00 	vstr	s15, [r3]

		  // Clamp final motor values
		  m1 = constrain(m1, 0, 1999);
 8002550:	4b34      	ldr	r3, [pc, #208]	@ (8002624 <main+0x9cc>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 8002634 <main+0x9dc>
 800255a:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8002638 <main+0x9e0>
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	f7ff fa81 	bl	8001a68 <constrain>
 8002566:	eef0 7a40 	vmov.f32	s15, s0
 800256a:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <main+0x9cc>)
 800256c:	edc3 7a00 	vstr	s15, [r3]
		  m2 = constrain(m2, 0, 1999);
 8002570:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <main+0x9d0>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 8002634 <main+0x9dc>
 800257a:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8002638 <main+0x9e0>
 800257e:	eeb0 0a67 	vmov.f32	s0, s15
 8002582:	f7ff fa71 	bl	8001a68 <constrain>
 8002586:	eef0 7a40 	vmov.f32	s15, s0
 800258a:	4b27      	ldr	r3, [pc, #156]	@ (8002628 <main+0x9d0>)
 800258c:	edc3 7a00 	vstr	s15, [r3]
		  m3 = constrain(m3, 0, 1999);
 8002590:	4b26      	ldr	r3, [pc, #152]	@ (800262c <main+0x9d4>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8002634 <main+0x9dc>
 800259a:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8002638 <main+0x9e0>
 800259e:	eeb0 0a67 	vmov.f32	s0, s15
 80025a2:	f7ff fa61 	bl	8001a68 <constrain>
 80025a6:	eef0 7a40 	vmov.f32	s15, s0
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <main+0x9d4>)
 80025ac:	edc3 7a00 	vstr	s15, [r3]
		  m4 = constrain(m4, 0, 1999);
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <main+0x9d8>)
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8002634 <main+0x9dc>
 80025ba:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8002638 <main+0x9e0>
 80025be:	eeb0 0a67 	vmov.f32	s0, s15
 80025c2:	f7ff fa51 	bl	8001a68 <constrain>
 80025c6:	eef0 7a40 	vmov.f32	s15, s0
 80025ca:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <main+0x9d8>)
 80025cc:	edc3 7a00 	vstr	s15, [r3]
	  if (ScaledControllerOutput[CH_ARM] < 1500){
 80025d0:	f7ff bbe6 	b.w	8001da0 <main+0x148>
 80025d4:	f3af 8000 	nop.w
 80025d8:	54442d18 	.word	0x54442d18
 80025dc:	401921fb 	.word	0x401921fb
 80025e0:	1a63c1f8 	.word	0x1a63c1f8
 80025e4:	404ca5dc 	.word	0x404ca5dc
 80025e8:	20000110 	.word	0x20000110
 80025ec:	20000108 	.word	0x20000108
 80025f0:	20000100 	.word	0x20000100
 80025f4:	2000010c 	.word	0x2000010c
 80025f8:	200000fc 	.word	0x200000fc
 80025fc:	20000104 	.word	0x20000104
 8002600:	20000628 	.word	0x20000628
 8002604:	44bb8000 	.word	0x44bb8000
 8002608:	20000000 	.word	0x20000000
 800260c:	20000114 	.word	0x20000114
 8002610:	20000174 	.word	0x20000174
 8002614:	200000f8 	.word	0x200000f8
 8002618:	200001d4 	.word	0x200001d4
 800261c:	43480000 	.word	0x43480000
 8002620:	42c80000 	.word	0x42c80000
 8002624:	200005fc 	.word	0x200005fc
 8002628:	20000600 	.word	0x20000600
 800262c:	20000604 	.word	0x20000604
 8002630:	20000608 	.word	0x20000608
 8002634:	44f9e000 	.word	0x44f9e000
 8002638:	00000000 	.word	0x00000000

0800263c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b094      	sub	sp, #80	@ 0x50
 8002640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002642:	f107 0320 	add.w	r3, r7, #32
 8002646:	2230      	movs	r2, #48	@ 0x30
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f006 f9ae 	bl	80089ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	4b28      	ldr	r3, [pc, #160]	@ (8002708 <SystemClock_Config+0xcc>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	4a27      	ldr	r2, [pc, #156]	@ (8002708 <SystemClock_Config+0xcc>)
 800266a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800266e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002670:	4b25      	ldr	r3, [pc, #148]	@ (8002708 <SystemClock_Config+0xcc>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800267c:	2300      	movs	r3, #0
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	4b22      	ldr	r3, [pc, #136]	@ (800270c <SystemClock_Config+0xd0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a21      	ldr	r2, [pc, #132]	@ (800270c <SystemClock_Config+0xd0>)
 8002686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <SystemClock_Config+0xd0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002698:	2302      	movs	r3, #2
 800269a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269c:	2301      	movs	r3, #1
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026a0:	2310      	movs	r3, #16
 80026a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a4:	2302      	movs	r3, #2
 80026a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026a8:	2300      	movs	r3, #0
 80026aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026ac:	2308      	movs	r3, #8
 80026ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026b0:	23a8      	movs	r3, #168	@ 0xa8
 80026b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026b4:	2302      	movs	r3, #2
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026b8:	2307      	movs	r3, #7
 80026ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f107 0320 	add.w	r3, r7, #32
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 f9e1 	bl	8004a88 <HAL_RCC_OscConfig>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026cc:	f000 f820 	bl	8002710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d0:	230f      	movs	r3, #15
 80026d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026d4:	2302      	movs	r3, #2
 80026d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	2105      	movs	r1, #5
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fc42 	bl	8004f78 <HAL_RCC_ClockConfig>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80026fa:	f000 f809 	bl	8002710 <Error_Handler>
  }
}
 80026fe:	bf00      	nop
 8002700:	3750      	adds	r7, #80	@ 0x50
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40007000 	.word	0x40007000

08002710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002714:	b672      	cpsid	i
}
 8002716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <Error_Handler+0x8>

0800271c <MPU6000_Read>:
#include "mpu6000.h"
uint16_t MPU6000_Read(MPU6000 *dev, uint8_t reg) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af02      	add	r7, sp, #8
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
    uint8_t tx[2] = {reg | 0x80, 0x00}; // reg addr + dummy
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800272e:	b2db      	uxtb	r3, r3
 8002730:	733b      	strb	r3, [r7, #12]
 8002732:	2300      	movs	r3, #0
 8002734:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2] = {0};
 8002736:	2300      	movs	r3, #0
 8002738:	813b      	strh	r3, [r7, #8]

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 800273a:	2200      	movs	r2, #0
 800273c:	2110      	movs	r1, #16
 800273e:	480c      	ldr	r0, [pc, #48]	@ (8002770 <MPU6000_Read+0x54>)
 8002740:	f002 f988 	bl	8004a54 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(dev->hspi, tx, rx, 2, HAL_MAX_DELAY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	f107 0208 	add.w	r2, r7, #8
 800274c:	f107 010c 	add.w	r1, r7, #12
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2302      	movs	r3, #2
 8002758:	f002 fffb 	bl	8005752 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	2110      	movs	r1, #16
 8002760:	4803      	ldr	r0, [pc, #12]	@ (8002770 <MPU6000_Read+0x54>)
 8002762:	f002 f977 	bl	8004a54 <HAL_GPIO_WritePin>

    return rx[1]; // the second byte is the register value
 8002766:	7a7b      	ldrb	r3, [r7, #9]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40020000 	.word	0x40020000

08002774 <MPU6000_Write>:

void MPU6000_Write(MPU6000 *dev, uint8_t reg, uint8_t data) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
 8002780:	4613      	mov	r3, r2
 8002782:	70bb      	strb	r3, [r7, #2]
    uint8_t tx[2] = {reg & 0x7F, data};
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800278a:	b2db      	uxtb	r3, r3
 800278c:	733b      	strb	r3, [r7, #12]
 800278e:	78bb      	ldrb	r3, [r7, #2]
 8002790:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8002792:	2200      	movs	r2, #0
 8002794:	2110      	movs	r1, #16
 8002796:	480a      	ldr	r0, [pc, #40]	@ (80027c0 <MPU6000_Write+0x4c>)
 8002798:	f002 f95c 	bl	8004a54 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(dev->hspi, tx, 2, HAL_MAX_DELAY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	f107 010c 	add.w	r1, r7, #12
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	2202      	movs	r2, #2
 80027aa:	f002 fe8e 	bl	80054ca <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80027ae:	2201      	movs	r2, #1
 80027b0:	2110      	movs	r1, #16
 80027b2:	4803      	ldr	r0, [pc, #12]	@ (80027c0 <MPU6000_Write+0x4c>)
 80027b4:	f002 f94e 	bl	8004a54 <HAL_GPIO_WritePin>
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40020000 	.word	0x40020000

080027c4 <MPU6000_Init>:

void MPU6000_Init(MPU6000 *dev, SPI_HandleTypeDef *hspi) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
    dev->hspi = hspi;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	601a      	str	r2, [r3, #0]

    dev->acc[0] = 0.0f;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	605a      	str	r2, [r3, #4]
    dev->acc[1] = 0.0f;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
    dev->acc[2] = 0.0f;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80027ec:	2201      	movs	r2, #1
 80027ee:	2110      	movs	r1, #16
 80027f0:	4817      	ldr	r0, [pc, #92]	@ (8002850 <MPU6000_Init+0x8c>)
 80027f2:	f002 f92f 	bl	8004a54 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80027f6:	2064      	movs	r0, #100	@ 0x64
 80027f8:	f001 fa58 	bl	8003cac <HAL_Delay>

    // Reset device
    MPU6000_Write(dev, MPU6000_PWR_MGMT_1, 0x80);
 80027fc:	2280      	movs	r2, #128	@ 0x80
 80027fe:	216b      	movs	r1, #107	@ 0x6b
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffb7 	bl	8002774 <MPU6000_Write>
    HAL_Delay(100);
 8002806:	2064      	movs	r0, #100	@ 0x64
 8002808:	f001 fa50 	bl	8003cac <HAL_Delay>

    // Wake up
    MPU6000_Write(dev, MPU6000_PWR_MGMT_1, 0x00);
 800280c:	2200      	movs	r2, #0
 800280e:	216b      	movs	r1, #107	@ 0x6b
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff ffaf 	bl	8002774 <MPU6000_Write>
    HAL_Delay(10);
 8002816:	200a      	movs	r0, #10
 8002818:	f001 fa48 	bl	8003cac <HAL_Delay>

    // Configure ranges
    MPU6000_Write(dev, MPU6000_GYRO_CONFIG, 0x00);   // ±250 dps
 800281c:	2200      	movs	r2, #0
 800281e:	211b      	movs	r1, #27
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ffa7 	bl	8002774 <MPU6000_Write>
    MPU6000_Write(dev, MPU6000_ACCEL_CONFIG, 0x00);  // ±2 g
 8002826:	2200      	movs	r2, #0
 8002828:	211c      	movs	r1, #28
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ffa2 	bl	8002774 <MPU6000_Write>

    // Verify WHO_AM_I
    uint8_t whoami = MPU6000_Read(dev, MPU6000_WHO_AM_I);
 8002830:	2175      	movs	r1, #117	@ 0x75
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff72 	bl	800271c <MPU6000_Read>
 8002838:	4603      	mov	r3, r0
 800283a:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 800283c:	2200      	movs	r2, #0
 800283e:	2110      	movs	r1, #16
 8002840:	4803      	ldr	r0, [pc, #12]	@ (8002850 <MPU6000_Init+0x8c>)
 8002842:	f002 f907 	bl	8004a54 <HAL_GPIO_WritePin>
}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40020000 	.word	0x40020000

08002854 <MPU6000_Start_DMA>:


void MPU6000_Start_DMA(MPU6000 *dev) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    // Prepare TX buffer: [reg|0x80, dummy...]
    dev->tx_buffer[0] = 0x3B | 0x80; // ACCEL_XOUT_H
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	22bb      	movs	r2, #187	@ 0xbb
 8002860:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    for (int i = 1; i < 15; i++) {
 8002864:	2301      	movs	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e008      	b.n	800287c <MPU6000_Start_DMA+0x28>
        dev->tx_buffer[i] = 0xFF; // dummy bytes
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4413      	add	r3, r2
 8002870:	3338      	adds	r3, #56	@ 0x38
 8002872:	22ff      	movs	r2, #255	@ 0xff
 8002874:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < 15; i++) {
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3301      	adds	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b0e      	cmp	r3, #14
 8002880:	ddf3      	ble.n	800286a <MPU6000_Start_DMA+0x16>
    }

    // Pull CS low before starting transfer
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	2110      	movs	r1, #16
 8002886:	480d      	ldr	r0, [pc, #52]	@ (80028bc <MPU6000_Start_DMA+0x68>)
 8002888:	f002 f8e4 	bl	8004a54 <HAL_GPIO_WritePin>

    // Start DMA (15 bytes total: 1 addr + 14 data)
    if (HAL_SPI_TransmitReceive_DMA(dev->hspi, dev->tx_buffer, dev->dma_buffer, 15) != HAL_OK) {
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800289c:	230f      	movs	r3, #15
 800289e:	f003 f901 	bl	8005aa4 <HAL_SPI_TransmitReceive_DMA>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <MPU6000_Start_DMA+0x5e>
        // Handle error if needed
        HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	2110      	movs	r1, #16
 80028ac:	4803      	ldr	r0, [pc, #12]	@ (80028bc <MPU6000_Start_DMA+0x68>)
 80028ae:	f002 f8d1 	bl	8004a54 <HAL_GPIO_WritePin>
    }
}
 80028b2:	bf00      	nop
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40020000 	.word	0x40020000

080028c0 <MPU6000_Process_DMA>:


void MPU6000_Process_DMA(MPU6000 *dev) {
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
    int16_t raw_acc_x = (dev->dma_buffer[1] << 8) | dev->dma_buffer[2];
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80028da:	b21b      	sxth	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	82bb      	strh	r3, [r7, #20]
    int16_t raw_acc_y = (dev->dma_buffer[3] << 8) | dev->dma_buffer[4];
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80028e6:	b21b      	sxth	r3, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	b21a      	sxth	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	4313      	orrs	r3, r2
 80028f6:	827b      	strh	r3, [r7, #18]
    int16_t raw_acc_z = (dev->dma_buffer[5] << 8) | dev->dma_buffer[6];
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80028fe:	b21b      	sxth	r3, r3
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b21a      	sxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800290a:	b21b      	sxth	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	823b      	strh	r3, [r7, #16]

    int16_t raw_temp  = (dev->dma_buffer[7] << 8) | dev->dma_buffer[8];
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8002916:	b21b      	sxth	r3, r3
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	b21a      	sxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002922:	b21b      	sxth	r3, r3
 8002924:	4313      	orrs	r3, r2
 8002926:	81fb      	strh	r3, [r7, #14]

    int16_t raw_gyro_x = (dev->dma_buffer[9] << 8) | dev->dma_buffer[10];
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800292e:	b21b      	sxth	r3, r3
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	b21a      	sxth	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800293a:	b21b      	sxth	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	81bb      	strh	r3, [r7, #12]
    int16_t raw_gyro_y = (dev->dma_buffer[11] << 8) | dev->dma_buffer[12];
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8002946:	b21b      	sxth	r3, r3
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	b21a      	sxth	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002952:	b21b      	sxth	r3, r3
 8002954:	4313      	orrs	r3, r2
 8002956:	817b      	strh	r3, [r7, #10]
    int16_t raw_gyro_z = (dev->dma_buffer[13] << 8) | dev->dma_buffer[14];
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800295e:	b21b      	sxth	r3, r3
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	b21a      	sxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800296a:	b21b      	sxth	r3, r3
 800296c:	4313      	orrs	r3, r2
 800296e:	813b      	strh	r3, [r7, #8]

    dev->acc[0] = (float)raw_acc_x / ACCEL_SCALE;   // ±4g scale
 8002970:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800297c:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002ac4 <MPU6000_Process_DMA+0x204>
 8002980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	edc3 7a01 	vstr	s15, [r3, #4]
    dev->acc[1] = -(float)raw_acc_y / ACCEL_SCALE;
 800298a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002996:	eeb1 7a67 	vneg.f32	s14, s15
 800299a:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8002ac4 <MPU6000_Process_DMA+0x204>
 800299e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	edc3 7a02 	vstr	s15, [r3, #8]
    dev->acc[2] = -(float)raw_acc_z / ACCEL_SCALE;
 80029a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029ac:	ee07 3a90 	vmov	s15, r3
 80029b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b4:	eeb1 7a67 	vneg.f32	s14, s15
 80029b8:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8002ac4 <MPU6000_Process_DMA+0x204>
 80029bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	edc3 7a03 	vstr	s15, [r3, #12]

    dev->temp = ((float)raw_temp) / 340.0f + 36.53f;
 80029c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002ac8 <MPU6000_Process_DMA+0x208>
 80029d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029da:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002acc <MPU6000_Process_DMA+0x20c>
 80029de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    dev->gyro[0] = (float)raw_gyro_x / GYRO_SCALE;   // ±500°/s
 80029e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029ec:	ee07 3a90 	vmov	s15, r3
 80029f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029f4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002ad0 <MPU6000_Process_DMA+0x210>
 80029f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	edc3 7a04 	vstr	s15, [r3, #16]
    dev->gyro[1] = -(float)raw_gyro_y / GYRO_SCALE;
 8002a02:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a0e:	eeb1 7a67 	vneg.f32	s14, s15
 8002a12:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8002ad0 <MPU6000_Process_DMA+0x210>
 8002a16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	edc3 7a05 	vstr	s15, [r3, #20]
    dev->gyro[2] = -(float)raw_gyro_z / GYRO_SCALE;
 8002a20:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002a24:	ee07 3a90 	vmov	s15, r3
 8002a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a2c:	eeb1 7a67 	vneg.f32	s14, s15
 8002a30:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002ad0 <MPU6000_Process_DMA+0x210>
 8002a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	edc3 7a06 	vstr	s15, [r3, #24]

    if (dev->calibrated){
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d037      	beq.n	8002ab8 <MPU6000_Process_DMA+0x1f8>
        for (uint8_t i = 0; i < 3; i++){
 8002a48:	2300      	movs	r3, #0
 8002a4a:	75fb      	strb	r3, [r7, #23]
 8002a4c:	e031      	b.n	8002ab2 <MPU6000_Process_DMA+0x1f2>
        	dev->acc[i] -= dev->acc_offset[i];
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3304      	adds	r3, #4
 8002a58:	ed93 7a00 	vldr	s14, [r3]
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	3306      	adds	r3, #6
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	3304      	adds	r3, #4
 8002a7a:	edc3 7a00 	vstr	s15, [r3]
        	dev->gyro[i] -= dev->gyro_offset[i];
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	ed93 7a00 	vldr	s14, [r3]
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	330a      	adds	r3, #10
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	edd3 7a00 	vldr	s15, [r3]
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t i = 0; i < 3; i++){
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d9ca      	bls.n	8002a4e <MPU6000_Process_DMA+0x18e>
        }
    }
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	46800000 	.word	0x46800000
 8002ac8:	43aa0000 	.word	0x43aa0000
 8002acc:	42121eb8 	.word	0x42121eb8
 8002ad0:	43030000 	.word	0x43030000

08002ad4 <MPU6000_Calibrate>:

void MPU6000_Calibrate(MPU6000 *dev) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08a      	sub	sp, #40	@ 0x28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    const uint16_t samples = 3000;
 8002adc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002ae0:	847b      	strh	r3, [r7, #34]	@ 0x22
    float acc_sum[3] = {0}, gyro_sum[3] = {0};
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	609a      	str	r2, [r3, #8]

    dev->calibrated = false;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    for (uint16_t i = 0; i < samples; i++) {
 8002b02:	2300      	movs	r3, #0
 8002b04:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002b06:	e05a      	b.n	8002bbe <MPU6000_Calibrate+0xea>
        // Start a DMA read
        dev->spi_transfer_done = false;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
        MPU6000_Start_DMA(dev);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fe9f 	bl	8002854 <MPU6000_Start_DMA>

        // Wait until DMA completes
        while (!dev->spi_transfer_done) { }
 8002b16:	bf00      	nop
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f6      	bne.n	8002b18 <MPU6000_Calibrate+0x44>

        // Process latest sample
        MPU6000_Process_DMA(dev);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fec8 	bl	80028c0 <MPU6000_Process_DMA>

        for (uint8_t axis = 0; axis < 3; axis++) {
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002b36:	e038      	b.n	8002baa <MPU6000_Calibrate+0xd6>
            acc_sum[axis]  += dev->acc[axis];
 8002b38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	3328      	adds	r3, #40	@ 0x28
 8002b40:	443b      	add	r3, r7
 8002b42:	3b14      	subs	r3, #20
 8002b44:	ed93 7a00 	vldr	s14, [r3]
 8002b48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	3328      	adds	r3, #40	@ 0x28
 8002b64:	443b      	add	r3, r7
 8002b66:	3b14      	subs	r3, #20
 8002b68:	edc3 7a00 	vstr	s15, [r3]
            gyro_sum[axis] += dev->gyro[axis];
 8002b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3328      	adds	r3, #40	@ 0x28
 8002b74:	443b      	add	r3, r7
 8002b76:	3b20      	subs	r3, #32
 8002b78:	ed93 7a00 	vldr	s14, [r3]
 8002b7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	3328      	adds	r3, #40	@ 0x28
 8002b98:	443b      	add	r3, r7
 8002b9a:	3b20      	subs	r3, #32
 8002b9c:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t axis = 0; axis < 3; axis++) {
 8002ba0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002baa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d9c2      	bls.n	8002b38 <MPU6000_Calibrate+0x64>
        }

        HAL_Delay(1); // ~1 kHz sample rate
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f001 f87a 	bl	8003cac <HAL_Delay>
    for (uint16_t i = 0; i < samples; i++) {
 8002bb8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002bba:	3301      	adds	r3, #1
 8002bbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002bbe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002bc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3a0      	bcc.n	8002b08 <MPU6000_Calibrate+0x34>
    }

    for (uint8_t axis = 0; axis < 3; axis++) {
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002bcc:	e033      	b.n	8002c36 <MPU6000_Calibrate+0x162>
        dev->acc_offset[axis]  = acc_sum[axis] / samples;
 8002bce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3328      	adds	r3, #40	@ 0x28
 8002bd6:	443b      	add	r3, r7
 8002bd8:	3b14      	subs	r3, #20
 8002bda:	edd3 6a00 	vldr	s13, [r3]
 8002bde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002be8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	3306      	adds	r3, #6
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	edc3 7a00 	vstr	s15, [r3]
        dev->gyro_offset[axis] = gyro_sum[axis] / samples;
 8002bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	3328      	adds	r3, #40	@ 0x28
 8002c06:	443b      	add	r3, r7
 8002c08:	3b20      	subs	r3, #32
 8002c0a:	edd3 6a00 	vldr	s13, [r3]
 8002c0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	330a      	adds	r3, #10
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t axis = 0; axis < 3; axis++) {
 8002c2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c30:	3301      	adds	r3, #1
 8002c32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002c36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d9c7      	bls.n	8002bce <MPU6000_Calibrate+0xfa>
    }

    // Subtract gravity on Z axis
    dev->acc_offset[2] -= 1.0f;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002c44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    dev->state = 0;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    dev->calibrated = true;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8002c62:	bf00      	nop
 8002c64:	3728      	adds	r7, #40	@ 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <PID_Init>:
#include "pid.h"

void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float output_limit, float integral_limit)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b087      	sub	sp, #28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6178      	str	r0, [r7, #20]
 8002c72:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c76:	edc7 0a03 	vstr	s1, [r7, #12]
 8002c7a:	ed87 1a02 	vstr	s2, [r7, #8]
 8002c7e:	edc7 1a01 	vstr	s3, [r7, #4]
 8002c82:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]

    pid->target_value = 0.0f;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
    pid->measured_value = 0.0f;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
    pid->measured_value_prev = 0.0f;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]

    pid->error = 0.0f;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
    pid->error_sum = 0.0f;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	61da      	str	r2, [r3, #28]
    pid->error_deriv = 0.0f;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	621a      	str	r2, [r3, #32]

    pid->output = 0.0f;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	62da      	str	r2, [r3, #44]	@ 0x2c

    pid->output_limit = output_limit;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->integral_limit = integral_limit;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cdc:	bf00      	nop
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <PID_Double_Calculation>:
        pid->output = -pid->output_limit;

    return pid->output;
}

float PID_Double_Calculation(Double_PID_Controller *axis, float target_angle, float measured_angle, float measured_rate, float dt){
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6178      	str	r0, [r7, #20]
 8002cf0:	ed87 0a04 	vstr	s0, [r7, #16]
 8002cf4:	edc7 0a03 	vstr	s1, [r7, #12]
 8002cf8:	ed87 1a02 	vstr	s2, [r7, #8]
 8002cfc:	edc7 1a01 	vstr	s3, [r7, #4]
	/*Double PID outer loop calculation */
	axis->outer_loop.target_value = target_angle;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	60da      	str	r2, [r3, #12]
	axis->outer_loop.measured_value = measured_angle;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	611a      	str	r2, [r3, #16]

	axis->outer_loop.error = axis->outer_loop.target_value - axis->outer_loop.measured_value;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->outer_loop.error_sum += axis->outer_loop.error * dt;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	edd3 6a06 	vldr	s13, [r3, #24]
 8002d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	edc3 7a07 	vstr	s15, [r3, #28]

	if (axis->outer_loop.error_sum > axis->outer_loop.integral_limit) axis->outer_loop.error_sum = axis->outer_loop.integral_limit;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d54:	dd04      	ble.n	8002d60 <PID_Double_Calculation+0x78>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	61da      	str	r2, [r3, #28]
 8002d5e:	e014      	b.n	8002d8a <PID_Double_Calculation+0xa2>
	else if (axis->outer_loop.error_sum < -axis->outer_loop.integral_limit) axis->outer_loop.error_sum = -axis->outer_loop.integral_limit;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002d6c:	eef1 7a67 	vneg.f32	s15, s15
 8002d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d78:	d507      	bpl.n	8002d8a <PID_Double_Calculation+0xa2>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002d80:	eef1 7a67 	vneg.f32	s15, s15
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	edc3 7a07 	vstr	s15, [r3, #28]

	axis->outer_loop.error_deriv = -measured_rate;
 8002d8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d8e:	eef1 7a67 	vneg.f32	s15, s15
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	edc3 7a08 	vstr	s15, [r3, #32]

	axis->outer_loop.output = axis->outer_loop.Kd * axis->outer_loop.error +
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002da4:	ee27 7a27 	vmul.f32	s14, s14, s15
							  axis->outer_loop.Ki * axis->outer_loop.error_sum +
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	edd3 6a01 	vldr	s13, [r3, #4]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->outer_loop.output = axis->outer_loop.Kd * axis->outer_loop.error +
 8002db8:	ee37 7a27 	vadd.f32	s14, s14, s15
							  axis->outer_loop.Kp * axis->outer_loop.error_deriv;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	edd3 6a00 	vldr	s13, [r3]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	edd3 7a08 	vldr	s15, [r3, #32]
 8002dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
							  axis->outer_loop.Ki * axis->outer_loop.error_sum +
 8002dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->outer_loop.output = axis->outer_loop.Kd * axis->outer_loop.error +
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	if (axis->outer_loop.output > axis->outer_loop.output_limit) axis->outer_loop.output = axis->outer_loop.output_limit;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	dd04      	ble.n	8002df6 <PID_Double_Calculation+0x10e>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002df4:	e014      	b.n	8002e20 <PID_Double_Calculation+0x138>
	else if (axis->outer_loop.output < -axis->outer_loop.output_limit) axis->outer_loop.output = -axis->outer_loop.output_limit;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002e02:	eef1 7a67 	vneg.f32	s15, s15
 8002e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	d507      	bpl.n	8002e20 <PID_Double_Calculation+0x138>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002e16:	eef1 7a67 	vneg.f32	s15, s15
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	/*Double PID inner loop calculation*/
	axis->inner_loop.target_value = axis->outer_loop.output;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	63da      	str	r2, [r3, #60]	@ 0x3c
	axis->inner_loop.measured_value = measured_rate;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	641a      	str	r2, [r3, #64]	@ 0x40

	axis->inner_loop.error = axis->inner_loop.target_value - axis->inner_loop.measured_value;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	axis->inner_loop.error_sum += axis->inner_loop.error * dt;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8002e50:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	if (axis->inner_loop.error_sum > axis->inner_loop.integral_limit) axis->inner_loop.error_sum = axis->inner_loop.integral_limit;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	dd04      	ble.n	8002e82 <PID_Double_Calculation+0x19a>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002e80:	e014      	b.n	8002eac <PID_Double_Calculation+0x1c4>
	else if (axis->inner_loop.error_sum < -axis->inner_loop.integral_limit) axis->inner_loop.error_sum = -axis->inner_loop.integral_limit;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002e8e:	eef1 7a67 	vneg.f32	s15, s15
 8002e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9a:	d507      	bpl.n	8002eac <PID_Double_Calculation+0x1c4>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002ea2:	eef1 7a67 	vneg.f32	s15, s15
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	axis->inner_loop.error_deriv = -(axis->inner_loop.measured_value - axis->inner_loop.measured_value_prev) / dt;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ebc:	eef1 6a67 	vneg.f32	s13, s15
 8002ec0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	axis->inner_loop.measured_value_prev = axis->inner_loop.measured_value;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44

	axis->inner_loop.output = axis->inner_loop.Kd * axis->inner_loop.error +
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
			  	  	  	  	  axis->inner_loop.Ki * axis->inner_loop.error_sum +
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->inner_loop.output = axis->inner_loop.Kd * axis->inner_loop.error +
 8002ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
							  axis->inner_loop.Kp * axis->inner_loop.error_deriv;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  	  	  	  	  axis->inner_loop.Ki * axis->inner_loop.error_sum +
 8002f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->inner_loop.output = axis->inner_loop.Kd * axis->inner_loop.error +
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	return axis->inner_loop.output;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f18:	ee07 3a90 	vmov	s15, r3
}
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <PID_Yaw_Angle_Calculation>:

/*
 * Yaw angle duoc dung khi throttle chinh yaw duoc giu nguyen -> giu cho heading khong thay doi
 * Yaw rate duoc dung khi throttle di chuyen -> dung pid dieu chinh toc do
 */
float PID_Yaw_Angle_Calculation(PID_Controller *axis, float target_angle, float measured_angle, float measured_rate, float dt){
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6178      	str	r0, [r7, #20]
 8002f34:	ed87 0a04 	vstr	s0, [r7, #16]
 8002f38:	edc7 0a03 	vstr	s1, [r7, #12]
 8002f3c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002f40:	edc7 1a01 	vstr	s3, [r7, #4]
	axis->target_value = target_angle;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	60da      	str	r2, [r3, #12]
	axis->measured_value = measured_angle;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	611a      	str	r2, [r3, #16]

	axis->error = axis->target_value - axis->measured_value;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	edc3 7a06 	vstr	s15, [r3, #24]
	//Deal voi truong hop di tu 10 do quay sang 350 do chang han
	if (axis->error > 180.f) axis->error -= 360.f;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f6c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003038 <PID_Yaw_Angle_Calculation+0x10c>
 8002f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	dd0a      	ble.n	8002f90 <PID_Yaw_Angle_Calculation+0x64>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f80:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800303c <PID_Yaw_Angle_Calculation+0x110>
 8002f84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	edc3 7a06 	vstr	s15, [r3, #24]
 8002f8e:	e013      	b.n	8002fb8 <PID_Yaw_Angle_Calculation+0x8c>
	else if (axis->error < -180.f) axis->error += 360.f;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f96:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003040 <PID_Yaw_Angle_Calculation+0x114>
 8002f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d509      	bpl.n	8002fb8 <PID_Yaw_Angle_Calculation+0x8c>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002faa:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800303c <PID_Yaw_Angle_Calculation+0x110>
 8002fae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	edc3 7a06 	vstr	s15, [r3, #24]

	axis->error_sum += axis->error * dt;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	ed93 7a07 	vldr	s14, [r3, #28]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	edd3 6a06 	vldr	s13, [r3, #24]
 8002fc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	edc3 7a07 	vstr	s15, [r3, #28]

	axis->error_deriv = -measured_rate;
 8002fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fda:	eef1 7a67 	vneg.f32	s15, s15
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	edc3 7a08 	vstr	s15, [r3, #32]

	axis->output = axis->Kd * axis->error +
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ff0:	ee27 7a27 	vmul.f32	s14, s14, s15
  	  	  	  	   axis->Ki * axis->error_sum +
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	edd3 7a07 	vldr	s15, [r3, #28]
 8003000:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->output = axis->Kd * axis->error +
 8003004:	ee37 7a27 	vadd.f32	s14, s14, s15
				   axis->Kp * axis->error_deriv;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	edd3 6a00 	vldr	s13, [r3]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	edd3 7a08 	vldr	s15, [r3, #32]
 8003014:	ee66 7aa7 	vmul.f32	s15, s13, s15
  	  	  	  	   axis->Ki * axis->error_sum +
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->output = axis->Kd * axis->error +
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	return axis->output;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	ee07 3a90 	vmov	s15, r3
}
 800302a:	eeb0 0a67 	vmov.f32	s0, s15
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	43340000 	.word	0x43340000
 800303c:	43b40000 	.word	0x43b40000
 8003040:	c3340000 	.word	0xc3340000

08003044 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003048:	4b17      	ldr	r3, [pc, #92]	@ (80030a8 <MX_SPI1_Init+0x64>)
 800304a:	4a18      	ldr	r2, [pc, #96]	@ (80030ac <MX_SPI1_Init+0x68>)
 800304c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800304e:	4b16      	ldr	r3, [pc, #88]	@ (80030a8 <MX_SPI1_Init+0x64>)
 8003050:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003056:	4b14      	ldr	r3, [pc, #80]	@ (80030a8 <MX_SPI1_Init+0x64>)
 8003058:	2200      	movs	r2, #0
 800305a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800305c:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <MX_SPI1_Init+0x64>)
 800305e:	2200      	movs	r2, #0
 8003060:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003062:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <MX_SPI1_Init+0x64>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003068:	4b0f      	ldr	r3, [pc, #60]	@ (80030a8 <MX_SPI1_Init+0x64>)
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800306e:	4b0e      	ldr	r3, [pc, #56]	@ (80030a8 <MX_SPI1_Init+0x64>)
 8003070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003076:	4b0c      	ldr	r3, [pc, #48]	@ (80030a8 <MX_SPI1_Init+0x64>)
 8003078:	2210      	movs	r2, #16
 800307a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800307c:	4b0a      	ldr	r3, [pc, #40]	@ (80030a8 <MX_SPI1_Init+0x64>)
 800307e:	2200      	movs	r2, #0
 8003080:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003082:	4b09      	ldr	r3, [pc, #36]	@ (80030a8 <MX_SPI1_Init+0x64>)
 8003084:	2200      	movs	r2, #0
 8003086:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003088:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <MX_SPI1_Init+0x64>)
 800308a:	2200      	movs	r2, #0
 800308c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <MX_SPI1_Init+0x64>)
 8003090:	220a      	movs	r2, #10
 8003092:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003094:	4804      	ldr	r0, [pc, #16]	@ (80030a8 <MX_SPI1_Init+0x64>)
 8003096:	f002 f98f 	bl	80053b8 <HAL_SPI_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030a0:	f7ff fb36 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	200006c0 	.word	0x200006c0
 80030ac:	40013000 	.word	0x40013000

080030b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003200 <HAL_SPI_MspInit+0x150>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f040 8092 	bne.w	80031f8 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003204 <HAL_SPI_MspInit+0x154>)
 80030da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030dc:	4a49      	ldr	r2, [pc, #292]	@ (8003204 <HAL_SPI_MspInit+0x154>)
 80030de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e4:	4b47      	ldr	r3, [pc, #284]	@ (8003204 <HAL_SPI_MspInit+0x154>)
 80030e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	4b43      	ldr	r3, [pc, #268]	@ (8003204 <HAL_SPI_MspInit+0x154>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	4a42      	ldr	r2, [pc, #264]	@ (8003204 <HAL_SPI_MspInit+0x154>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003100:	4b40      	ldr	r3, [pc, #256]	@ (8003204 <HAL_SPI_MspInit+0x154>)
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800310c:	23e0      	movs	r3, #224	@ 0xe0
 800310e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800311c:	2305      	movs	r3, #5
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	4619      	mov	r1, r3
 8003126:	4838      	ldr	r0, [pc, #224]	@ (8003208 <HAL_SPI_MspInit+0x158>)
 8003128:	f001 faf8 	bl	800471c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800312c:	4b37      	ldr	r3, [pc, #220]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 800312e:	4a38      	ldr	r2, [pc, #224]	@ (8003210 <HAL_SPI_MspInit+0x160>)
 8003130:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003132:	4b36      	ldr	r3, [pc, #216]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003134:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003138:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800313a:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 800313c:	2200      	movs	r2, #0
 800313e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003140:	4b32      	ldr	r3, [pc, #200]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003146:	4b31      	ldr	r3, [pc, #196]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003148:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800314c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800314e:	4b2f      	ldr	r3, [pc, #188]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003150:	2200      	movs	r2, #0
 8003152:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003154:	4b2d      	ldr	r3, [pc, #180]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003156:	2200      	movs	r2, #0
 8003158:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800315a:	4b2c      	ldr	r3, [pc, #176]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 800315c:	2200      	movs	r2, #0
 800315e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003160:	4b2a      	ldr	r3, [pc, #168]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003162:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003166:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003168:	4b28      	ldr	r3, [pc, #160]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 800316a:	2200      	movs	r2, #0
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800316e:	4827      	ldr	r0, [pc, #156]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003170:	f000 fed2 	bl	8003f18 <HAL_DMA_Init>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800317a:	f7ff fac9 	bl	8002710 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a22      	ldr	r2, [pc, #136]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003182:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003184:	4a21      	ldr	r2, [pc, #132]	@ (800320c <HAL_SPI_MspInit+0x15c>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800318a:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 800318c:	4a22      	ldr	r2, [pc, #136]	@ (8003218 <HAL_SPI_MspInit+0x168>)
 800318e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003190:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 8003192:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003196:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003198:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 800319a:	2240      	movs	r2, #64	@ 0x40
 800319c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800319e:	4b1d      	ldr	r3, [pc, #116]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031aa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ac:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b2:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80031b8:	4b16      	ldr	r3, [pc, #88]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80031be:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031c4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c6:	4b13      	ldr	r3, [pc, #76]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80031cc:	4811      	ldr	r0, [pc, #68]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031ce:	f000 fea3 	bl	8003f18 <HAL_DMA_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80031d8:	f7ff fa9a 	bl	8002710 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a0d      	ldr	r2, [pc, #52]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031e0:	649a      	str	r2, [r3, #72]	@ 0x48
 80031e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003214 <HAL_SPI_MspInit+0x164>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80031e8:	2200      	movs	r2, #0
 80031ea:	2101      	movs	r1, #1
 80031ec:	2023      	movs	r0, #35	@ 0x23
 80031ee:	f000 fe5c 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80031f2:	2023      	movs	r0, #35	@ 0x23
 80031f4:	f000 fe75 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80031f8:	bf00      	nop
 80031fa:	3728      	adds	r7, #40	@ 0x28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40013000 	.word	0x40013000
 8003204:	40023800 	.word	0x40023800
 8003208:	40020000 	.word	0x40020000
 800320c:	20000718 	.word	0x20000718
 8003210:	40026410 	.word	0x40026410
 8003214:	20000778 	.word	0x20000778
 8003218:	40026458 	.word	0x40026458

0800321c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <HAL_MspInit+0x4c>)
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	4a0f      	ldr	r2, [pc, #60]	@ (8003268 <HAL_MspInit+0x4c>)
 800322c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003230:	6453      	str	r3, [r2, #68]	@ 0x44
 8003232:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <HAL_MspInit+0x4c>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323a:	607b      	str	r3, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_MspInit+0x4c>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003246:	4a08      	ldr	r2, [pc, #32]	@ (8003268 <HAL_MspInit+0x4c>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	@ 0x40
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_MspInit+0x4c>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800

0800326c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <NMI_Handler+0x4>

08003274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <HardFault_Handler+0x4>

0800327c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <MemManage_Handler+0x4>

08003284 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <BusFault_Handler+0x4>

0800328c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <UsageFault_Handler+0x4>

08003294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c2:	f000 fcd3 	bl	8003c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 80032d0:	4802      	ldr	r0, [pc, #8]	@ (80032dc <DMA1_Stream0_IRQHandler+0x10>)
 80032d2:	f000 ffb9 	bl	8004248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000970 	.word	0x20000970

080032e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80032e4:	4802      	ldr	r0, [pc, #8]	@ (80032f0 <DMA1_Stream2_IRQHandler+0x10>)
 80032e6:	f000 ffaf 	bl	8004248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000910 	.word	0x20000910

080032f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 80032f8:	4802      	ldr	r0, [pc, #8]	@ (8003304 <DMA1_Stream3_IRQHandler+0x10>)
 80032fa:	f000 ffa5 	bl	8004248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200009d0 	.word	0x200009d0

08003308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800330c:	4802      	ldr	r0, [pc, #8]	@ (8003318 <TIM2_IRQHandler+0x10>)
 800330e:	f003 fafd 	bl	800690c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200007d8 	.word	0x200007d8

0800331c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003320:	4802      	ldr	r0, [pc, #8]	@ (800332c <SPI1_IRQHandler+0x10>)
 8003322:	f002 fcbb 	bl	8005c9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200006c0 	.word	0x200006c0

08003330 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003334:	4802      	ldr	r0, [pc, #8]	@ (8003340 <DMA1_Stream7_IRQHandler+0x10>)
 8003336:	f000 ff87 	bl	8004248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200008b0 	.word	0x200008b0

08003344 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <DMA2_Stream0_IRQHandler+0x10>)
 800334a:	f000 ff7d 	bl	8004248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000718 	.word	0x20000718

08003358 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <DMA2_Stream1_IRQHandler+0x10>)
 800335e:	f000 ff73 	bl	8004248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000a78 	.word	0x20000a78

0800336c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <DMA2_Stream3_IRQHandler+0x10>)
 8003372:	f000 ff69 	bl	8004248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000778 	.word	0x20000778

08003380 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
    if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 8003386:	4b0d      	ldr	r3, [pc, #52]	@ (80033bc <USART6_IRQHandler+0x3c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	d10c      	bne.n	80033ae <USART6_IRQHandler+0x2e>
        __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 8003394:	2300      	movs	r3, #0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	4b08      	ldr	r3, [pc, #32]	@ (80033bc <USART6_IRQHandler+0x3c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <USART6_IRQHandler+0x3c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
        CRSF_IdleHandler();   // calls your parser
 80033aa:	f7fe fbef 	bl	8001b8c <CRSF_IdleHandler>
    }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80033ae:	4803      	ldr	r0, [pc, #12]	@ (80033bc <USART6_IRQHandler+0x3c>)
 80033b0:	f004 fa44 	bl	800783c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000a30 	.word	0x20000a30

080033c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033c4:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <SystemInit+0x20>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	4a05      	ldr	r2, [pc, #20]	@ (80033e0 <SystemInit+0x20>)
 80033cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch3_up;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ea:	f107 0308 	add.w	r3, r7, #8
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f8:	463b      	mov	r3, r7
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003400:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <MX_TIM2_Init+0x94>)
 8003402:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8003408:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <MX_TIM2_Init+0x94>)
 800340a:	22a7      	movs	r2, #167	@ 0xa7
 800340c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340e:	4b1a      	ldr	r3, [pc, #104]	@ (8003478 <MX_TIM2_Init+0x94>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003414:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <MX_TIM2_Init+0x94>)
 8003416:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800341a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341c:	4b16      	ldr	r3, [pc, #88]	@ (8003478 <MX_TIM2_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003422:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <MX_TIM2_Init+0x94>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003428:	4813      	ldr	r0, [pc, #76]	@ (8003478 <MX_TIM2_Init+0x94>)
 800342a:	f002 ff8d 	bl	8006348 <HAL_TIM_Base_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003434:	f7ff f96c 	bl	8002710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003438:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800343c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800343e:	f107 0308 	add.w	r3, r7, #8
 8003442:	4619      	mov	r1, r3
 8003444:	480c      	ldr	r0, [pc, #48]	@ (8003478 <MX_TIM2_Init+0x94>)
 8003446:	f003 fc13 	bl	8006c70 <HAL_TIM_ConfigClockSource>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003450:	f7ff f95e 	bl	8002710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800345c:	463b      	mov	r3, r7
 800345e:	4619      	mov	r1, r3
 8003460:	4805      	ldr	r0, [pc, #20]	@ (8003478 <MX_TIM2_Init+0x94>)
 8003462:	f004 f8e5 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800346c:	f7ff f950 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200007d8 	.word	0x200007d8

0800347c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08e      	sub	sp, #56	@ 0x38
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003482:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003490:	f107 0320 	add.w	r3, r7, #32
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800349a:	1d3b      	adds	r3, r7, #4
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
 80034a8:	615a      	str	r2, [r3, #20]
 80034aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034ac:	4b33      	ldr	r3, [pc, #204]	@ (800357c <MX_TIM3_Init+0x100>)
 80034ae:	4a34      	ldr	r2, [pc, #208]	@ (8003580 <MX_TIM3_Init+0x104>)
 80034b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034b2:	4b32      	ldr	r3, [pc, #200]	@ (800357c <MX_TIM3_Init+0x100>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b8:	4b30      	ldr	r3, [pc, #192]	@ (800357c <MX_TIM3_Init+0x100>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 280-1;
 80034be:	4b2f      	ldr	r3, [pc, #188]	@ (800357c <MX_TIM3_Init+0x100>)
 80034c0:	f240 1217 	movw	r2, #279	@ 0x117
 80034c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c6:	4b2d      	ldr	r3, [pc, #180]	@ (800357c <MX_TIM3_Init+0x100>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034cc:	4b2b      	ldr	r3, [pc, #172]	@ (800357c <MX_TIM3_Init+0x100>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034d2:	482a      	ldr	r0, [pc, #168]	@ (800357c <MX_TIM3_Init+0x100>)
 80034d4:	f002 ff38 	bl	8006348 <HAL_TIM_Base_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80034de:	f7ff f917 	bl	8002710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034ec:	4619      	mov	r1, r3
 80034ee:	4823      	ldr	r0, [pc, #140]	@ (800357c <MX_TIM3_Init+0x100>)
 80034f0:	f003 fbbe 	bl	8006c70 <HAL_TIM_ConfigClockSource>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80034fa:	f7ff f909 	bl	8002710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034fe:	481f      	ldr	r0, [pc, #124]	@ (800357c <MX_TIM3_Init+0x100>)
 8003500:	f002 ffe2 	bl	80064c8 <HAL_TIM_PWM_Init>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800350a:	f7ff f901 	bl	8002710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003516:	f107 0320 	add.w	r3, r7, #32
 800351a:	4619      	mov	r1, r3
 800351c:	4817      	ldr	r0, [pc, #92]	@ (800357c <MX_TIM3_Init+0x100>)
 800351e:	f004 f887 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003528:	f7ff f8f2 	bl	8002710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800352c:	2360      	movs	r3, #96	@ 0x60
 800352e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 105;
 8003530:	2369      	movs	r3, #105	@ 0x69
 8003532:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003538:	2304      	movs	r3, #4
 800353a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	2208      	movs	r2, #8
 8003540:	4619      	mov	r1, r3
 8003542:	480e      	ldr	r0, [pc, #56]	@ (800357c <MX_TIM3_Init+0x100>)
 8003544:	f003 fad2 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800354e:	f7ff f8df 	bl	8002710 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	220c      	movs	r2, #12
 800355a:	4619      	mov	r1, r3
 800355c:	4807      	ldr	r0, [pc, #28]	@ (800357c <MX_TIM3_Init+0x100>)
 800355e:	f003 fac5 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8003568:	f7ff f8d2 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800356c:	4803      	ldr	r0, [pc, #12]	@ (800357c <MX_TIM3_Init+0x100>)
 800356e:	f000 f9ef 	bl	8003950 <HAL_TIM_MspPostInit>

}
 8003572:	bf00      	nop
 8003574:	3738      	adds	r7, #56	@ 0x38
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000820 	.word	0x20000820
 8003580:	40000400 	.word	0x40000400

08003584 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08e      	sub	sp, #56	@ 0x38
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800358a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003598:	f107 0320 	add.w	r3, r7, #32
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035a2:	1d3b      	adds	r3, r7, #4
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
 80035b0:	615a      	str	r2, [r3, #20]
 80035b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035b4:	4b32      	ldr	r3, [pc, #200]	@ (8003680 <MX_TIM5_Init+0xfc>)
 80035b6:	4a33      	ldr	r2, [pc, #204]	@ (8003684 <MX_TIM5_Init+0x100>)
 80035b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80035ba:	4b31      	ldr	r3, [pc, #196]	@ (8003680 <MX_TIM5_Init+0xfc>)
 80035bc:	2200      	movs	r2, #0
 80035be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003680 <MX_TIM5_Init+0xfc>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 280-1;
 80035c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003680 <MX_TIM5_Init+0xfc>)
 80035c8:	f240 1217 	movw	r2, #279	@ 0x117
 80035cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <MX_TIM5_Init+0xfc>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003680 <MX_TIM5_Init+0xfc>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035da:	4829      	ldr	r0, [pc, #164]	@ (8003680 <MX_TIM5_Init+0xfc>)
 80035dc:	f002 feb4 	bl	8006348 <HAL_TIM_Base_Init>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80035e6:	f7ff f893 	bl	8002710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80035f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035f4:	4619      	mov	r1, r3
 80035f6:	4822      	ldr	r0, [pc, #136]	@ (8003680 <MX_TIM5_Init+0xfc>)
 80035f8:	f003 fb3a 	bl	8006c70 <HAL_TIM_ConfigClockSource>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8003602:	f7ff f885 	bl	8002710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003606:	481e      	ldr	r0, [pc, #120]	@ (8003680 <MX_TIM5_Init+0xfc>)
 8003608:	f002 ff5e 	bl	80064c8 <HAL_TIM_PWM_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8003612:	f7ff f87d 	bl	8002710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800361e:	f107 0320 	add.w	r3, r7, #32
 8003622:	4619      	mov	r1, r3
 8003624:	4816      	ldr	r0, [pc, #88]	@ (8003680 <MX_TIM5_Init+0xfc>)
 8003626:	f004 f803 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8003630:	f7ff f86e 	bl	8002710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003634:	2360      	movs	r3, #96	@ 0x60
 8003636:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 105;
 8003638:	2369      	movs	r3, #105	@ 0x69
 800363a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003640:	2304      	movs	r3, #4
 8003642:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	2208      	movs	r2, #8
 8003648:	4619      	mov	r1, r3
 800364a:	480d      	ldr	r0, [pc, #52]	@ (8003680 <MX_TIM5_Init+0xfc>)
 800364c:	f003 fa4e 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8003656:	f7ff f85b 	bl	8002710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	220c      	movs	r2, #12
 800365e:	4619      	mov	r1, r3
 8003660:	4807      	ldr	r0, [pc, #28]	@ (8003680 <MX_TIM5_Init+0xfc>)
 8003662:	f003 fa43 	bl	8006aec <HAL_TIM_PWM_ConfigChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 800366c:	f7ff f850 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003670:	4803      	ldr	r0, [pc, #12]	@ (8003680 <MX_TIM5_Init+0xfc>)
 8003672:	f000 f96d 	bl	8003950 <HAL_TIM_MspPostInit>

}
 8003676:	bf00      	nop
 8003678:	3738      	adds	r7, #56	@ 0x38
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000868 	.word	0x20000868
 8003684:	40000c00 	.word	0x40000c00

08003688 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003698:	d116      	bne.n	80036c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_TIM_Base_MspInit+0x164>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_TIM_Base_MspInit+0x164>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036aa:	4b50      	ldr	r3, [pc, #320]	@ (80037ec <HAL_TIM_Base_MspInit+0x164>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2105      	movs	r1, #5
 80036ba:	201c      	movs	r0, #28
 80036bc:	f000 fbf5 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036c0:	201c      	movs	r0, #28
 80036c2:	f000 fc0e 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80036c6:	e133      	b.n	8003930 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a48      	ldr	r2, [pc, #288]	@ (80037f0 <HAL_TIM_Base_MspInit+0x168>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	f040 8098 	bne.w	8003804 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	4b44      	ldr	r3, [pc, #272]	@ (80037ec <HAL_TIM_Base_MspInit+0x164>)
 80036da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036dc:	4a43      	ldr	r2, [pc, #268]	@ (80037ec <HAL_TIM_Base_MspInit+0x164>)
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80036e4:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <HAL_TIM_Base_MspInit+0x164>)
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 80036f0:	4b40      	ldr	r3, [pc, #256]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 80036f2:	4a41      	ldr	r2, [pc, #260]	@ (80037f8 <HAL_TIM_Base_MspInit+0x170>)
 80036f4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 80036f6:	4b3f      	ldr	r3, [pc, #252]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 80036f8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80036fc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036fe:	4b3d      	ldr	r3, [pc, #244]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 8003700:	2240      	movs	r2, #64	@ 0x40
 8003702:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003704:	4b3b      	ldr	r3, [pc, #236]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 8003706:	2200      	movs	r2, #0
 8003708:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800370a:	4b3a      	ldr	r3, [pc, #232]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 800370c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003710:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003712:	4b38      	ldr	r3, [pc, #224]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 8003714:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003718:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800371a:	4b36      	ldr	r3, [pc, #216]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 800371c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003720:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8003722:	4b34      	ldr	r3, [pc, #208]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 8003724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003728:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800372a:	4b32      	ldr	r3, [pc, #200]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 800372c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003730:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003732:	4b30      	ldr	r3, [pc, #192]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 8003734:	2204      	movs	r2, #4
 8003736:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003738:	4b2e      	ldr	r3, [pc, #184]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 800373a:	2203      	movs	r2, #3
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 800373e:	4b2d      	ldr	r3, [pc, #180]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 8003740:	2200      	movs	r2, #0
 8003742:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003744:	4b2b      	ldr	r3, [pc, #172]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 8003746:	2200      	movs	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800374a:	482a      	ldr	r0, [pc, #168]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 800374c:	f000 fbe4 	bl	8003f18 <HAL_DMA_Init>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_TIM_Base_MspInit+0xd2>
      Error_Handler();
 8003756:	f7fe ffdb 	bl	8002710 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a25      	ldr	r2, [pc, #148]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 800375e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003760:	4a24      	ldr	r2, [pc, #144]	@ (80037f4 <HAL_TIM_Base_MspInit+0x16c>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8003766:	4b25      	ldr	r3, [pc, #148]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 8003768:	4a25      	ldr	r2, [pc, #148]	@ (8003800 <HAL_TIM_Base_MspInit+0x178>)
 800376a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 800376c:	4b23      	ldr	r3, [pc, #140]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 800376e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003772:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003774:	4b21      	ldr	r3, [pc, #132]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 8003776:	2240      	movs	r2, #64	@ 0x40
 8003778:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800377a:	4b20      	ldr	r3, [pc, #128]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 800377c:	2200      	movs	r2, #0
 800377e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003780:	4b1e      	ldr	r3, [pc, #120]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 8003782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003786:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003788:	4b1c      	ldr	r3, [pc, #112]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 800378a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800378e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003790:	4b1a      	ldr	r3, [pc, #104]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 8003792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003796:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8003798:	4b18      	ldr	r3, [pc, #96]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 800379a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800379e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037a0:	4b16      	ldr	r3, [pc, #88]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80037a6:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037aa:	2204      	movs	r2, #4
 80037ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80037ae:	4b13      	ldr	r3, [pc, #76]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037b0:	2203      	movs	r2, #3
 80037b2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 80037b4:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80037ba:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80037c0:	480e      	ldr	r0, [pc, #56]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037c2:	f000 fba9 	bl	8003f18 <HAL_DMA_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_TIM_Base_MspInit+0x148>
      Error_Handler();
 80037cc:	f7fe ffa0 	bl	8002710 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0a      	ldr	r2, [pc, #40]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80037d6:	4a09      	ldr	r2, [pc, #36]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a07      	ldr	r2, [pc, #28]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037e0:	621a      	str	r2, [r3, #32]
 80037e2:	4a06      	ldr	r2, [pc, #24]	@ (80037fc <HAL_TIM_Base_MspInit+0x174>)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80037e8:	e0a2      	b.n	8003930 <HAL_TIM_Base_MspInit+0x2a8>
 80037ea:	bf00      	nop
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40000400 	.word	0x40000400
 80037f4:	200008b0 	.word	0x200008b0
 80037f8:	400260b8 	.word	0x400260b8
 80037fc:	20000910 	.word	0x20000910
 8003800:	40026040 	.word	0x40026040
  else if(tim_baseHandle->Instance==TIM5)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a4b      	ldr	r2, [pc, #300]	@ (8003938 <HAL_TIM_Base_MspInit+0x2b0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	f040 8090 	bne.w	8003930 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	4b49      	ldr	r3, [pc, #292]	@ (800393c <HAL_TIM_Base_MspInit+0x2b4>)
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	4a48      	ldr	r2, [pc, #288]	@ (800393c <HAL_TIM_Base_MspInit+0x2b4>)
 800381a:	f043 0308 	orr.w	r3, r3, #8
 800381e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003820:	4b46      	ldr	r3, [pc, #280]	@ (800393c <HAL_TIM_Base_MspInit+0x2b4>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 800382c:	4b44      	ldr	r3, [pc, #272]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 800382e:	4a45      	ldr	r2, [pc, #276]	@ (8003944 <HAL_TIM_Base_MspInit+0x2bc>)
 8003830:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 8003832:	4b43      	ldr	r3, [pc, #268]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003834:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8003838:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800383a:	4b41      	ldr	r3, [pc, #260]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 800383c:	2240      	movs	r2, #64	@ 0x40
 800383e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003840:	4b3f      	ldr	r3, [pc, #252]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8003846:	4b3e      	ldr	r3, [pc, #248]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003848:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800384c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800384e:	4b3c      	ldr	r3, [pc, #240]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003850:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003854:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003856:	4b3a      	ldr	r3, [pc, #232]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003858:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800385c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_CIRCULAR;
 800385e:	4b38      	ldr	r3, [pc, #224]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003860:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003864:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003866:	4b36      	ldr	r3, [pc, #216]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003868:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800386c:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800386e:	4b34      	ldr	r3, [pc, #208]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003870:	2204      	movs	r2, #4
 8003872:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003874:	4b32      	ldr	r3, [pc, #200]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003876:	2203      	movs	r2, #3
 8003878:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 800387a:	4b31      	ldr	r3, [pc, #196]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 800387c:	2200      	movs	r2, #0
 800387e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003880:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 8003886:	482e      	ldr	r0, [pc, #184]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 8003888:	f000 fb46 	bl	8003f18 <HAL_DMA_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_TIM_Base_MspInit+0x20e>
      Error_Handler();
 8003892:	f7fe ff3d 	bl	8002710 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a29      	ldr	r2, [pc, #164]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 800389a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800389c:	4a28      	ldr	r2, [pc, #160]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a26      	ldr	r2, [pc, #152]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 80038a6:	621a      	str	r2, [r3, #32]
 80038a8:	4a25      	ldr	r2, [pc, #148]	@ (8003940 <HAL_TIM_Base_MspInit+0x2b8>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 80038ae:	4b26      	ldr	r3, [pc, #152]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038b0:	4a26      	ldr	r2, [pc, #152]	@ (800394c <HAL_TIM_Base_MspInit+0x2c4>)
 80038b2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 80038b4:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038b6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80038ba:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038bc:	4b22      	ldr	r3, [pc, #136]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038be:	2240      	movs	r2, #64	@ 0x40
 80038c0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80038c2:	4b21      	ldr	r3, [pc, #132]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038ce:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038d6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038de:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_CIRCULAR;
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038e6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80038e8:	4b17      	ldr	r3, [pc, #92]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80038ee:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038f0:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038f2:	2204      	movs	r2, #4
 80038f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80038f6:	4b14      	ldr	r3, [pc, #80]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038f8:	2203      	movs	r2, #3
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 80038fc:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 80038fe:	2200      	movs	r2, #0
 8003900:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003902:	4b11      	ldr	r3, [pc, #68]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 8003908:	480f      	ldr	r0, [pc, #60]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 800390a:	f000 fb05 	bl	8003f18 <HAL_DMA_Init>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_TIM_Base_MspInit+0x290>
      Error_Handler();
 8003914:	f7fe fefc 	bl	8002710 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0b      	ldr	r2, [pc, #44]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
 800391e:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a08      	ldr	r2, [pc, #32]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38
 800392a:	4a07      	ldr	r2, [pc, #28]	@ (8003948 <HAL_TIM_Base_MspInit+0x2c0>)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003930:	bf00      	nop
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40000c00 	.word	0x40000c00
 800393c:	40023800 	.word	0x40023800
 8003940:	20000970 	.word	0x20000970
 8003944:	40026010 	.word	0x40026010
 8003948:	200009d0 	.word	0x200009d0
 800394c:	40026058 	.word	0x40026058

08003950 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08a      	sub	sp, #40	@ 0x28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a24      	ldr	r2, [pc, #144]	@ (8003a00 <HAL_TIM_MspPostInit+0xb0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d11e      	bne.n	80039b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <HAL_TIM_MspPostInit+0xb4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	4a22      	ldr	r2, [pc, #136]	@ (8003a04 <HAL_TIM_MspPostInit+0xb4>)
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	6313      	str	r3, [r2, #48]	@ 0x30
 8003982:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <HAL_TIM_MspPostInit+0xb4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800398e:	2303      	movs	r3, #3
 8003990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800399e:	2302      	movs	r3, #2
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	4619      	mov	r1, r3
 80039a8:	4817      	ldr	r0, [pc, #92]	@ (8003a08 <HAL_TIM_MspPostInit+0xb8>)
 80039aa:	f000 feb7 	bl	800471c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80039ae:	e022      	b.n	80039f6 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a15      	ldr	r2, [pc, #84]	@ (8003a0c <HAL_TIM_MspPostInit+0xbc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d11d      	bne.n	80039f6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b11      	ldr	r3, [pc, #68]	@ (8003a04 <HAL_TIM_MspPostInit+0xb4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	4a10      	ldr	r2, [pc, #64]	@ (8003a04 <HAL_TIM_MspPostInit+0xb4>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <HAL_TIM_MspPostInit+0xb4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039d6:	230c      	movs	r3, #12
 80039d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80039e6:	2302      	movs	r3, #2
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	4807      	ldr	r0, [pc, #28]	@ (8003a10 <HAL_TIM_MspPostInit+0xc0>)
 80039f2:	f000 fe93 	bl	800471c <HAL_GPIO_Init>
}
 80039f6:	bf00      	nop
 80039f8:	3728      	adds	r7, #40	@ 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40020400 	.word	0x40020400
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40020000 	.word	0x40020000

08003a14 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a1a:	4a12      	ldr	r2, [pc, #72]	@ (8003a64 <MX_USART6_UART_Init+0x50>)
 8003a1c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 420000;
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a20:	4a11      	ldr	r2, [pc, #68]	@ (8003a68 <MX_USART6_UART_Init+0x54>)
 8003a22:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003a36:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a38:	220c      	movs	r2, #12
 8003a3a:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003a4a:	4805      	ldr	r0, [pc, #20]	@ (8003a60 <MX_USART6_UART_Init+0x4c>)
 8003a4c:	f003 fe80 	bl	8007750 <HAL_UART_Init>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003a56:	f7fe fe5b 	bl	8002710 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20000a30 	.word	0x20000a30
 8003a64:	40011400 	.word	0x40011400
 8003a68:	000668a0 	.word	0x000668a0

08003a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	@ 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a35      	ldr	r2, [pc, #212]	@ (8003b60 <HAL_UART_MspInit+0xf4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d163      	bne.n	8003b56 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	4b34      	ldr	r3, [pc, #208]	@ (8003b64 <HAL_UART_MspInit+0xf8>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	4a33      	ldr	r2, [pc, #204]	@ (8003b64 <HAL_UART_MspInit+0xf8>)
 8003a98:	f043 0320 	orr.w	r3, r3, #32
 8003a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a9e:	4b31      	ldr	r3, [pc, #196]	@ (8003b64 <HAL_UART_MspInit+0xf8>)
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <HAL_UART_MspInit+0xf8>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b64 <HAL_UART_MspInit+0xf8>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aba:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <HAL_UART_MspInit+0xf8>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ac6:	23c0      	movs	r3, #192	@ 0xc0
 8003ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4821      	ldr	r0, [pc, #132]	@ (8003b68 <HAL_UART_MspInit+0xfc>)
 8003ae2:	f000 fe1b 	bl	800471c <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003ae6:	4b21      	ldr	r3, [pc, #132]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003ae8:	4a21      	ldr	r2, [pc, #132]	@ (8003b70 <HAL_UART_MspInit+0x104>)
 8003aea:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003aec:	4b1f      	ldr	r3, [pc, #124]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003aee:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003af2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003afa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b00:	4b1a      	ldr	r3, [pc, #104]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b06:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b08:	4b18      	ldr	r3, [pc, #96]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b0e:	4b17      	ldr	r3, [pc, #92]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003b14:	4b15      	ldr	r3, [pc, #84]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b1a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b1c:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b1e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b22:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b24:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003b2a:	4810      	ldr	r0, [pc, #64]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b2c:	f000 f9f4 	bl	8003f18 <HAL_DMA_Init>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003b36:	f7fe fdeb 	bl	8002710 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b40:	4a0a      	ldr	r2, [pc, #40]	@ (8003b6c <HAL_UART_MspInit+0x100>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	2047      	movs	r0, #71	@ 0x47
 8003b4c:	f000 f9ad 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b50:	2047      	movs	r0, #71	@ 0x47
 8003b52:	f000 f9c6 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003b56:	bf00      	nop
 8003b58:	3728      	adds	r7, #40	@ 0x28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40011400 	.word	0x40011400
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	20000a78 	.word	0x20000a78
 8003b70:	40026428 	.word	0x40026428

08003b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b78:	f7ff fc22 	bl	80033c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b7c:	480c      	ldr	r0, [pc, #48]	@ (8003bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b7e:	490d      	ldr	r1, [pc, #52]	@ (8003bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b80:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b84:	e002      	b.n	8003b8c <LoopCopyDataInit>

08003b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b8a:	3304      	adds	r3, #4

08003b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b90:	d3f9      	bcc.n	8003b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b92:	4a0a      	ldr	r2, [pc, #40]	@ (8003bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b94:	4c0a      	ldr	r4, [pc, #40]	@ (8003bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b98:	e001      	b.n	8003b9e <LoopFillZerobss>

08003b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b9c:	3204      	adds	r2, #4

08003b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba0:	d3fb      	bcc.n	8003b9a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003ba2:	f004 ff11 	bl	80089c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ba6:	f7fe f857 	bl	8001c58 <main>
  bx  lr    
 8003baa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bb4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003bb8:	08009eac 	.word	0x08009eac
  ldr r2, =_sbss
 8003bbc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003bc0:	20000c14 	.word	0x20000c14

08003bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bc4:	e7fe      	b.n	8003bc4 <ADC_IRQHandler>
	...

08003bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <HAL_Init+0x40>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8003c08 <HAL_Init+0x40>)
 8003bd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_Init+0x40>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <HAL_Init+0x40>)
 8003bde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003be2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be4:	4b08      	ldr	r3, [pc, #32]	@ (8003c08 <HAL_Init+0x40>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a07      	ldr	r2, [pc, #28]	@ (8003c08 <HAL_Init+0x40>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bf0:	2003      	movs	r0, #3
 8003bf2:	f000 f94f 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bf6:	200f      	movs	r0, #15
 8003bf8:	f000 f808 	bl	8003c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bfc:	f7ff fb0e 	bl	800321c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023c00 	.word	0x40023c00

08003c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c14:	4b12      	ldr	r3, [pc, #72]	@ (8003c60 <HAL_InitTick+0x54>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <HAL_InitTick+0x58>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 f967 	bl	8003efe <HAL_SYSTICK_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00e      	b.n	8003c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b0f      	cmp	r3, #15
 8003c3e:	d80a      	bhi.n	8003c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c40:	2200      	movs	r2, #0
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	f000 f92f 	bl	8003eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c4c:	4a06      	ldr	r2, [pc, #24]	@ (8003c68 <HAL_InitTick+0x5c>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e000      	b.n	8003c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000004 	.word	0x20000004
 8003c64:	2000000c 	.word	0x2000000c
 8003c68:	20000008 	.word	0x20000008

08003c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c70:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <HAL_IncTick+0x20>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b06      	ldr	r3, [pc, #24]	@ (8003c90 <HAL_IncTick+0x24>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	4a04      	ldr	r2, [pc, #16]	@ (8003c90 <HAL_IncTick+0x24>)
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	2000000c 	.word	0x2000000c
 8003c90:	20000ad8 	.word	0x20000ad8

08003c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return uwTick;
 8003c98:	4b03      	ldr	r3, [pc, #12]	@ (8003ca8 <HAL_GetTick+0x14>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000ad8 	.word	0x20000ad8

08003cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7ff ffee 	bl	8003c94 <HAL_GetTick>
 8003cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d005      	beq.n	8003cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <HAL_Delay+0x44>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cd2:	bf00      	nop
 8003cd4:	f7ff ffde 	bl	8003c94 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d8f7      	bhi.n	8003cd4 <HAL_Delay+0x28>
  {
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	@ (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	@ (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	@ (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	@ 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e60:	d301      	bcc.n	8003e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <SysTick_Config+0x40>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6e:	210f      	movs	r1, #15
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	f7ff ff8e 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <SysTick_Config+0x40>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7e:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <SysTick_Config+0x40>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff29 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ebc:	f7ff ff3e 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff8e 	bl	8003de8 <NVIC_EncodePriority>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff5d 	bl	8003d94 <__NVIC_SetPriority>
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff31 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffa2 	bl	8003e50 <SysTick_Config>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff feb6 	bl	8003c94 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e099      	b.n	8004068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f54:	e00f      	b.n	8003f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f56:	f7ff fe9d 	bl	8003c94 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d908      	bls.n	8003f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e078      	b.n	8004068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e8      	bne.n	8003f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4b38      	ldr	r3, [pc, #224]	@ (8004070 <HAL_DMA_Init+0x158>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	2b04      	cmp	r3, #4
 8004008:	d117      	bne.n	800403a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fb01 	bl	8004624 <DMA_CheckFifoParam>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2240      	movs	r2, #64	@ 0x40
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004036:	2301      	movs	r3, #1
 8004038:	e016      	b.n	8004068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fab8 	bl	80045b8 <DMA_CalcBaseAndBitshift>
 8004048:	4603      	mov	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	223f      	movs	r2, #63	@ 0x3f
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	f010803f 	.word	0xf010803f

08004074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_DMA_Start_IT+0x26>
 8004096:	2302      	movs	r3, #2
 8004098:	e040      	b.n	800411c <HAL_DMA_Start_IT+0xa8>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d12f      	bne.n	800410e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 fa4a 	bl	800455c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	223f      	movs	r2, #63	@ 0x3f
 80040ce:	409a      	lsls	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0216 	orr.w	r2, r2, #22
 80040e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0208 	orr.w	r2, r2, #8
 80040fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e005      	b.n	800411a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004130:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004132:	f7ff fdaf 	bl	8003c94 <HAL_GetTick>
 8004136:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2280      	movs	r2, #128	@ 0x80
 8004148:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e052      	b.n	80041fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0216 	bic.w	r2, r2, #22
 8004164:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004174:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <HAL_DMA_Abort+0x62>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0208 	bic.w	r2, r2, #8
 8004194:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041a6:	e013      	b.n	80041d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041a8:	f7ff fd74 	bl	8003c94 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b05      	cmp	r3, #5
 80041b4:	d90c      	bls.n	80041d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2203      	movs	r2, #3
 80041c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e015      	b.n	80041fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e4      	bne.n	80041a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	223f      	movs	r2, #63	@ 0x3f
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d004      	beq.n	8004222 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e00c      	b.n	800423c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2205      	movs	r2, #5
 8004226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0201 	bic.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004254:	4b8e      	ldr	r3, [pc, #568]	@ (8004490 <HAL_DMA_IRQHandler+0x248>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a8e      	ldr	r2, [pc, #568]	@ (8004494 <HAL_DMA_IRQHandler+0x24c>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0a9b      	lsrs	r3, r3, #10
 8004260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004272:	2208      	movs	r2, #8
 8004274:	409a      	lsls	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01a      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a0:	2208      	movs	r2, #8
 80042a2:	409a      	lsls	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ac:	f043 0201 	orr.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00b      	beq.n	80042ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	2201      	movs	r2, #1
 80042d8:	409a      	lsls	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e2:	f043 0202 	orr.w	r2, r3, #2
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ee:	2204      	movs	r2, #4
 80042f0:	409a      	lsls	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d012      	beq.n	8004320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00b      	beq.n	8004320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	2204      	movs	r2, #4
 800430e:	409a      	lsls	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004318:	f043 0204 	orr.w	r2, r3, #4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004324:	2210      	movs	r2, #16
 8004326:	409a      	lsls	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d043      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d03c      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004342:	2210      	movs	r2, #16
 8004344:	409a      	lsls	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d018      	beq.n	800438a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d024      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	4798      	blx	r3
 8004376:	e01f      	b.n	80043b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01b      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
 8004388:	e016      	b.n	80043b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0208 	bic.w	r2, r2, #8
 80043a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043bc:	2220      	movs	r2, #32
 80043be:	409a      	lsls	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 808f 	beq.w	80044e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8087 	beq.w	80044e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043de:	2220      	movs	r2, #32
 80043e0:	409a      	lsls	r2, r3
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d136      	bne.n	8004460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f022 0216 	bic.w	r2, r2, #22
 8004400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d103      	bne.n	8004422 <HAL_DMA_IRQHandler+0x1da>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441e:	2b00      	cmp	r3, #0
 8004420:	d007      	beq.n	8004432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0208 	bic.w	r2, r2, #8
 8004430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004436:	223f      	movs	r2, #63	@ 0x3f
 8004438:	409a      	lsls	r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004452:	2b00      	cmp	r3, #0
 8004454:	d07e      	beq.n	8004554 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
        }
        return;
 800445e:	e079      	b.n	8004554 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01d      	beq.n	80044aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10d      	bne.n	8004498 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004480:	2b00      	cmp	r3, #0
 8004482:	d031      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	4798      	blx	r3
 800448c:	e02c      	b.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
 800448e:	bf00      	nop
 8004490:	20000004 	.word	0x20000004
 8004494:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d023      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
 80044a8:	e01e      	b.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10f      	bne.n	80044d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0210 	bic.w	r2, r2, #16
 80044c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d032      	beq.n	8004556 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d022      	beq.n	8004542 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2205      	movs	r2, #5
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3301      	adds	r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	429a      	cmp	r2, r3
 800451e:	d307      	bcc.n	8004530 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f2      	bne.n	8004514 <HAL_DMA_IRQHandler+0x2cc>
 800452e:	e000      	b.n	8004532 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004530:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
 8004552:	e000      	b.n	8004556 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004554:	bf00      	nop
    }
  }
}
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004578:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b40      	cmp	r3, #64	@ 0x40
 8004588:	d108      	bne.n	800459c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800459a:	e007      	b.n	80045ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	3b10      	subs	r3, #16
 80045c8:	4a14      	ldr	r2, [pc, #80]	@ (800461c <DMA_CalcBaseAndBitshift+0x64>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045d2:	4a13      	ldr	r2, [pc, #76]	@ (8004620 <DMA_CalcBaseAndBitshift+0x68>)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d909      	bls.n	80045fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	1d1a      	adds	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	@ 0x58
 80045f8:	e007      	b.n	800460a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	aaaaaaab 	.word	0xaaaaaaab
 8004620:	08009a8c 	.word	0x08009a8c

08004624 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004634:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11f      	bne.n	800467e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d856      	bhi.n	80046f2 <DMA_CheckFifoParam+0xce>
 8004644:	a201      	add	r2, pc, #4	@ (adr r2, 800464c <DMA_CheckFifoParam+0x28>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	0800465d 	.word	0x0800465d
 8004650:	0800466f 	.word	0x0800466f
 8004654:	0800465d 	.word	0x0800465d
 8004658:	080046f3 	.word	0x080046f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004660:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d046      	beq.n	80046f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466c:	e043      	b.n	80046f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004676:	d140      	bne.n	80046fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467c:	e03d      	b.n	80046fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004686:	d121      	bne.n	80046cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b03      	cmp	r3, #3
 800468c:	d837      	bhi.n	80046fe <DMA_CheckFifoParam+0xda>
 800468e:	a201      	add	r2, pc, #4	@ (adr r2, 8004694 <DMA_CheckFifoParam+0x70>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046a5 	.word	0x080046a5
 8004698:	080046ab 	.word	0x080046ab
 800469c:	080046a5 	.word	0x080046a5
 80046a0:	080046bd 	.word	0x080046bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e030      	b.n	800470c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d025      	beq.n	8004702 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ba:	e022      	b.n	8004702 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046c4:	d11f      	bne.n	8004706 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046ca:	e01c      	b.n	8004706 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d903      	bls.n	80046da <DMA_CheckFifoParam+0xb6>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d003      	beq.n	80046e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046d8:	e018      	b.n	800470c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
      break;
 80046de:	e015      	b.n	800470c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00e      	beq.n	800470a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
      break;
 80046f0:	e00b      	b.n	800470a <DMA_CheckFifoParam+0xe6>
      break;
 80046f2:	bf00      	nop
 80046f4:	e00a      	b.n	800470c <DMA_CheckFifoParam+0xe8>
      break;
 80046f6:	bf00      	nop
 80046f8:	e008      	b.n	800470c <DMA_CheckFifoParam+0xe8>
      break;
 80046fa:	bf00      	nop
 80046fc:	e006      	b.n	800470c <DMA_CheckFifoParam+0xe8>
      break;
 80046fe:	bf00      	nop
 8004700:	e004      	b.n	800470c <DMA_CheckFifoParam+0xe8>
      break;
 8004702:	bf00      	nop
 8004704:	e002      	b.n	800470c <DMA_CheckFifoParam+0xe8>
      break;   
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <DMA_CheckFifoParam+0xe8>
      break;
 800470a:	bf00      	nop
    }
  } 
  
  return status; 
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop

0800471c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	@ 0x24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e16b      	b.n	8004a10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004738:	2201      	movs	r2, #1
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	429a      	cmp	r2, r3
 8004752:	f040 815a 	bne.w	8004a0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d005      	beq.n	800476e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800476a:	2b02      	cmp	r3, #2
 800476c:	d130      	bne.n	80047d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	2203      	movs	r2, #3
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047a4:	2201      	movs	r2, #1
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 0201 	and.w	r2, r3, #1
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d017      	beq.n	800480c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	2203      	movs	r2, #3
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d123      	bne.n	8004860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	08da      	lsrs	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3208      	adds	r2, #8
 8004820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	220f      	movs	r2, #15
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	08da      	lsrs	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3208      	adds	r2, #8
 800485a:	69b9      	ldr	r1, [r7, #24]
 800485c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	2203      	movs	r2, #3
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4013      	ands	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 0203 	and.w	r2, r3, #3
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4313      	orrs	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80b4 	beq.w	8004a0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	4b60      	ldr	r3, [pc, #384]	@ (8004a28 <HAL_GPIO_Init+0x30c>)
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	4a5f      	ldr	r2, [pc, #380]	@ (8004a28 <HAL_GPIO_Init+0x30c>)
 80048ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80048b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004a28 <HAL_GPIO_Init+0x30c>)
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048be:	4a5b      	ldr	r2, [pc, #364]	@ (8004a2c <HAL_GPIO_Init+0x310>)
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	089b      	lsrs	r3, r3, #2
 80048c4:	3302      	adds	r3, #2
 80048c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	220f      	movs	r2, #15
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a52      	ldr	r2, [pc, #328]	@ (8004a30 <HAL_GPIO_Init+0x314>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02b      	beq.n	8004942 <HAL_GPIO_Init+0x226>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a51      	ldr	r2, [pc, #324]	@ (8004a34 <HAL_GPIO_Init+0x318>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d025      	beq.n	800493e <HAL_GPIO_Init+0x222>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a50      	ldr	r2, [pc, #320]	@ (8004a38 <HAL_GPIO_Init+0x31c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01f      	beq.n	800493a <HAL_GPIO_Init+0x21e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a4f      	ldr	r2, [pc, #316]	@ (8004a3c <HAL_GPIO_Init+0x320>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d019      	beq.n	8004936 <HAL_GPIO_Init+0x21a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a4e      	ldr	r2, [pc, #312]	@ (8004a40 <HAL_GPIO_Init+0x324>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_GPIO_Init+0x216>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a4d      	ldr	r2, [pc, #308]	@ (8004a44 <HAL_GPIO_Init+0x328>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00d      	beq.n	800492e <HAL_GPIO_Init+0x212>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a4c      	ldr	r2, [pc, #304]	@ (8004a48 <HAL_GPIO_Init+0x32c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <HAL_GPIO_Init+0x20e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a4b      	ldr	r2, [pc, #300]	@ (8004a4c <HAL_GPIO_Init+0x330>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_GPIO_Init+0x20a>
 8004922:	2307      	movs	r3, #7
 8004924:	e00e      	b.n	8004944 <HAL_GPIO_Init+0x228>
 8004926:	2308      	movs	r3, #8
 8004928:	e00c      	b.n	8004944 <HAL_GPIO_Init+0x228>
 800492a:	2306      	movs	r3, #6
 800492c:	e00a      	b.n	8004944 <HAL_GPIO_Init+0x228>
 800492e:	2305      	movs	r3, #5
 8004930:	e008      	b.n	8004944 <HAL_GPIO_Init+0x228>
 8004932:	2304      	movs	r3, #4
 8004934:	e006      	b.n	8004944 <HAL_GPIO_Init+0x228>
 8004936:	2303      	movs	r3, #3
 8004938:	e004      	b.n	8004944 <HAL_GPIO_Init+0x228>
 800493a:	2302      	movs	r3, #2
 800493c:	e002      	b.n	8004944 <HAL_GPIO_Init+0x228>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_GPIO_Init+0x228>
 8004942:	2300      	movs	r3, #0
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	f002 0203 	and.w	r2, r2, #3
 800494a:	0092      	lsls	r2, r2, #2
 800494c:	4093      	lsls	r3, r2
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004954:	4935      	ldr	r1, [pc, #212]	@ (8004a2c <HAL_GPIO_Init+0x310>)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	3302      	adds	r3, #2
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004962:	4b3b      	ldr	r3, [pc, #236]	@ (8004a50 <HAL_GPIO_Init+0x334>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004986:	4a32      	ldr	r2, [pc, #200]	@ (8004a50 <HAL_GPIO_Init+0x334>)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800498c:	4b30      	ldr	r3, [pc, #192]	@ (8004a50 <HAL_GPIO_Init+0x334>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	43db      	mvns	r3, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4013      	ands	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049b0:	4a27      	ldr	r2, [pc, #156]	@ (8004a50 <HAL_GPIO_Init+0x334>)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049b6:	4b26      	ldr	r3, [pc, #152]	@ (8004a50 <HAL_GPIO_Init+0x334>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049da:	4a1d      	ldr	r2, [pc, #116]	@ (8004a50 <HAL_GPIO_Init+0x334>)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a50 <HAL_GPIO_Init+0x334>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a04:	4a12      	ldr	r2, [pc, #72]	@ (8004a50 <HAL_GPIO_Init+0x334>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	f67f ae90 	bls.w	8004738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	3724      	adds	r7, #36	@ 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40013800 	.word	0x40013800
 8004a30:	40020000 	.word	0x40020000
 8004a34:	40020400 	.word	0x40020400
 8004a38:	40020800 	.word	0x40020800
 8004a3c:	40020c00 	.word	0x40020c00
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40021400 	.word	0x40021400
 8004a48:	40021800 	.word	0x40021800
 8004a4c:	40021c00 	.word	0x40021c00
 8004a50:	40013c00 	.word	0x40013c00

08004a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]
 8004a60:	4613      	mov	r3, r2
 8004a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a64:	787b      	ldrb	r3, [r7, #1]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a6a:	887a      	ldrh	r2, [r7, #2]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a70:	e003      	b.n	8004a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a72:	887b      	ldrh	r3, [r7, #2]
 8004a74:	041a      	lsls	r2, r3, #16
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	619a      	str	r2, [r3, #24]
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e267      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d075      	beq.n	8004b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aa6:	4b88      	ldr	r3, [pc, #544]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d00c      	beq.n	8004acc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab2:	4b85      	ldr	r3, [pc, #532]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d112      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004abe:	4b82      	ldr	r3, [pc, #520]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aca:	d10b      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004acc:	4b7e      	ldr	r3, [pc, #504]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d05b      	beq.n	8004b90 <HAL_RCC_OscConfig+0x108>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d157      	bne.n	8004b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e242      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aec:	d106      	bne.n	8004afc <HAL_RCC_OscConfig+0x74>
 8004aee:	4b76      	ldr	r3, [pc, #472]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a75      	ldr	r2, [pc, #468]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e01d      	b.n	8004b38 <HAL_RCC_OscConfig+0xb0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0x98>
 8004b06:	4b70      	ldr	r3, [pc, #448]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a6f      	ldr	r2, [pc, #444]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6c      	ldr	r2, [pc, #432]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_OscConfig+0xb0>
 8004b20:	4b69      	ldr	r3, [pc, #420]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a68      	ldr	r2, [pc, #416]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b66      	ldr	r3, [pc, #408]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a65      	ldr	r2, [pc, #404]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7ff f8a8 	bl	8003c94 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7ff f8a4 	bl	8003c94 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e207      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0xc0>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7ff f894 	bl	8003c94 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7ff f890 	bl	8003c94 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e1f3      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	4b51      	ldr	r3, [pc, #324]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0xe8>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d063      	beq.n	8004c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004baa:	4b47      	ldr	r3, [pc, #284]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d11c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bb6:	4b44      	ldr	r3, [pc, #272]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d116      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc2:	4b41      	ldr	r3, [pc, #260]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_RCC_OscConfig+0x152>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d001      	beq.n	8004bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e1c7      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bda:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4937      	ldr	r1, [pc, #220]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bee:	e03a      	b.n	8004c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf8:	4b34      	ldr	r3, [pc, #208]	@ (8004ccc <HAL_RCC_OscConfig+0x244>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfe:	f7ff f849 	bl	8003c94 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c06:	f7ff f845 	bl	8003c94 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1a8      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c24:	4b28      	ldr	r3, [pc, #160]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4925      	ldr	r1, [pc, #148]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]
 8004c38:	e015      	b.n	8004c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ccc <HAL_RCC_OscConfig+0x244>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7ff f828 	bl	8003c94 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7ff f824 	bl	8003c94 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e187      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d036      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d016      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7a:	4b15      	ldr	r3, [pc, #84]	@ (8004cd0 <HAL_RCC_OscConfig+0x248>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c80:	f7ff f808 	bl	8003c94 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c88:	f7ff f804 	bl	8003c94 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e167      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x200>
 8004ca6:	e01b      	b.n	8004ce0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca8:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <HAL_RCC_OscConfig+0x248>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cae:	f7fe fff1 	bl	8003c94 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb4:	e00e      	b.n	8004cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb6:	f7fe ffed 	bl	8003c94 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d907      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e150      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	42470000 	.word	0x42470000
 8004cd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd4:	4b88      	ldr	r3, [pc, #544]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1ea      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8097 	beq.w	8004e1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf2:	4b81      	ldr	r3, [pc, #516]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10f      	bne.n	8004d1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	4b7d      	ldr	r3, [pc, #500]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	4a7c      	ldr	r2, [pc, #496]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b77      	ldr	r3, [pc, #476]	@ (8004efc <HAL_RCC_OscConfig+0x474>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d118      	bne.n	8004d5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2a:	4b74      	ldr	r3, [pc, #464]	@ (8004efc <HAL_RCC_OscConfig+0x474>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a73      	ldr	r2, [pc, #460]	@ (8004efc <HAL_RCC_OscConfig+0x474>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d36:	f7fe ffad 	bl	8003c94 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3e:	f7fe ffa9 	bl	8003c94 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e10c      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b6a      	ldr	r3, [pc, #424]	@ (8004efc <HAL_RCC_OscConfig+0x474>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d106      	bne.n	8004d72 <HAL_RCC_OscConfig+0x2ea>
 8004d64:	4b64      	ldr	r3, [pc, #400]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d68:	4a63      	ldr	r2, [pc, #396]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d70:	e01c      	b.n	8004dac <HAL_RCC_OscConfig+0x324>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b05      	cmp	r3, #5
 8004d78:	d10c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x30c>
 8004d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d86:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d92:	e00b      	b.n	8004dac <HAL_RCC_OscConfig+0x324>
 8004d94:	4b58      	ldr	r3, [pc, #352]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d98:	4a57      	ldr	r2, [pc, #348]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da0:	4b55      	ldr	r3, [pc, #340]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da4:	4a54      	ldr	r2, [pc, #336]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004da6:	f023 0304 	bic.w	r3, r3, #4
 8004daa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d015      	beq.n	8004de0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fe ff6e 	bl	8003c94 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dba:	e00a      	b.n	8004dd2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbc:	f7fe ff6a 	bl	8003c94 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e0cb      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd2:	4b49      	ldr	r3, [pc, #292]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0ee      	beq.n	8004dbc <HAL_RCC_OscConfig+0x334>
 8004dde:	e014      	b.n	8004e0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de0:	f7fe ff58 	bl	8003c94 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de6:	e00a      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f7fe ff54 	bl	8003c94 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e0b5      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1ee      	bne.n	8004de8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d105      	bne.n	8004e1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e10:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e14:	4a38      	ldr	r2, [pc, #224]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004e16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 80a1 	beq.w	8004f68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e26:	4b34      	ldr	r3, [pc, #208]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d05c      	beq.n	8004eec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d141      	bne.n	8004ebe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b31      	ldr	r3, [pc, #196]	@ (8004f00 <HAL_RCC_OscConfig+0x478>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7fe ff28 	bl	8003c94 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e48:	f7fe ff24 	bl	8003c94 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e087      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	4b27      	ldr	r3, [pc, #156]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69da      	ldr	r2, [r3, #28]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	041b      	lsls	r3, r3, #16
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	061b      	lsls	r3, r3, #24
 8004e8a:	491b      	ldr	r1, [pc, #108]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e90:	4b1b      	ldr	r3, [pc, #108]	@ (8004f00 <HAL_RCC_OscConfig+0x478>)
 8004e92:	2201      	movs	r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e96:	f7fe fefd 	bl	8003c94 <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9c:	e008      	b.n	8004eb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9e:	f7fe fef9 	bl	8003c94 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e05c      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0f0      	beq.n	8004e9e <HAL_RCC_OscConfig+0x416>
 8004ebc:	e054      	b.n	8004f68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ebe:	4b10      	ldr	r3, [pc, #64]	@ (8004f00 <HAL_RCC_OscConfig+0x478>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec4:	f7fe fee6 	bl	8003c94 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ecc:	f7fe fee2 	bl	8003c94 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e045      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x444>
 8004eea:	e03d      	b.n	8004f68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d107      	bne.n	8004f04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e038      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40007000 	.word	0x40007000
 8004f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f04:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <HAL_RCC_OscConfig+0x4ec>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d028      	beq.n	8004f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d121      	bne.n	8004f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d11a      	bne.n	8004f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f34:	4013      	ands	r3, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d111      	bne.n	8004f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d107      	bne.n	8004f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d001      	beq.n	8004f68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800

08004f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e0cc      	b.n	8005126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f8c:	4b68      	ldr	r3, [pc, #416]	@ (8005130 <HAL_RCC_ClockConfig+0x1b8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d90c      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f9a:	4b65      	ldr	r3, [pc, #404]	@ (8005130 <HAL_RCC_ClockConfig+0x1b8>)
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa2:	4b63      	ldr	r3, [pc, #396]	@ (8005130 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0b8      	b.n	8005126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d020      	beq.n	8005002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fcc:	4b59      	ldr	r3, [pc, #356]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	4a58      	ldr	r2, [pc, #352]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fe4:	4b53      	ldr	r3, [pc, #332]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4a52      	ldr	r2, [pc, #328]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff0:	4b50      	ldr	r3, [pc, #320]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	494d      	ldr	r1, [pc, #308]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d044      	beq.n	8005098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005016:	4b47      	ldr	r3, [pc, #284]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d119      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e07f      	b.n	8005126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d003      	beq.n	8005036 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005032:	2b03      	cmp	r3, #3
 8005034:	d107      	bne.n	8005046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005036:	4b3f      	ldr	r3, [pc, #252]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e06f      	b.n	8005126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005046:	4b3b      	ldr	r3, [pc, #236]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e067      	b.n	8005126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005056:	4b37      	ldr	r3, [pc, #220]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f023 0203 	bic.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4934      	ldr	r1, [pc, #208]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	4313      	orrs	r3, r2
 8005066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005068:	f7fe fe14 	bl	8003c94 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	e00a      	b.n	8005086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005070:	f7fe fe10 	bl	8003c94 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e04f      	b.n	8005126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005086:	4b2b      	ldr	r3, [pc, #172]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 020c 	and.w	r2, r3, #12
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	429a      	cmp	r2, r3
 8005096:	d1eb      	bne.n	8005070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005098:	4b25      	ldr	r3, [pc, #148]	@ (8005130 <HAL_RCC_ClockConfig+0x1b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d20c      	bcs.n	80050c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b22      	ldr	r3, [pc, #136]	@ (8005130 <HAL_RCC_ClockConfig+0x1b8>)
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ae:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <HAL_RCC_ClockConfig+0x1b8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e032      	b.n	8005126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050cc:	4b19      	ldr	r3, [pc, #100]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4916      	ldr	r1, [pc, #88]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ea:	4b12      	ldr	r3, [pc, #72]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	490e      	ldr	r1, [pc, #56]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050fe:	f000 f821 	bl	8005144 <HAL_RCC_GetSysClockFreq>
 8005102:	4602      	mov	r2, r0
 8005104:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	490a      	ldr	r1, [pc, #40]	@ (8005138 <HAL_RCC_ClockConfig+0x1c0>)
 8005110:	5ccb      	ldrb	r3, [r1, r3]
 8005112:	fa22 f303 	lsr.w	r3, r2, r3
 8005116:	4a09      	ldr	r2, [pc, #36]	@ (800513c <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800511a:	4b09      	ldr	r3, [pc, #36]	@ (8005140 <HAL_RCC_ClockConfig+0x1c8>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f7fe fd74 	bl	8003c0c <HAL_InitTick>

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40023c00 	.word	0x40023c00
 8005134:	40023800 	.word	0x40023800
 8005138:	08009a74 	.word	0x08009a74
 800513c:	20000004 	.word	0x20000004
 8005140:	20000008 	.word	0x20000008

08005144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005148:	b094      	sub	sp, #80	@ 0x50
 800514a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800515c:	4b79      	ldr	r3, [pc, #484]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x200>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 030c 	and.w	r3, r3, #12
 8005164:	2b08      	cmp	r3, #8
 8005166:	d00d      	beq.n	8005184 <HAL_RCC_GetSysClockFreq+0x40>
 8005168:	2b08      	cmp	r3, #8
 800516a:	f200 80e1 	bhi.w	8005330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <HAL_RCC_GetSysClockFreq+0x34>
 8005172:	2b04      	cmp	r3, #4
 8005174:	d003      	beq.n	800517e <HAL_RCC_GetSysClockFreq+0x3a>
 8005176:	e0db      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005178:	4b73      	ldr	r3, [pc, #460]	@ (8005348 <HAL_RCC_GetSysClockFreq+0x204>)
 800517a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800517c:	e0db      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800517e:	4b73      	ldr	r3, [pc, #460]	@ (800534c <HAL_RCC_GetSysClockFreq+0x208>)
 8005180:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005182:	e0d8      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005184:	4b6f      	ldr	r3, [pc, #444]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x200>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800518c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800518e:	4b6d      	ldr	r3, [pc, #436]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x200>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d063      	beq.n	8005262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519a:	4b6a      	ldr	r3, [pc, #424]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x200>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	099b      	lsrs	r3, r3, #6
 80051a0:	2200      	movs	r2, #0
 80051a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ae:	2300      	movs	r3, #0
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051b6:	4622      	mov	r2, r4
 80051b8:	462b      	mov	r3, r5
 80051ba:	f04f 0000 	mov.w	r0, #0
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	0159      	lsls	r1, r3, #5
 80051c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c8:	0150      	lsls	r0, r2, #5
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4621      	mov	r1, r4
 80051d0:	1a51      	subs	r1, r2, r1
 80051d2:	6139      	str	r1, [r7, #16]
 80051d4:	4629      	mov	r1, r5
 80051d6:	eb63 0301 	sbc.w	r3, r3, r1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051e8:	4659      	mov	r1, fp
 80051ea:	018b      	lsls	r3, r1, #6
 80051ec:	4651      	mov	r1, sl
 80051ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051f2:	4651      	mov	r1, sl
 80051f4:	018a      	lsls	r2, r1, #6
 80051f6:	4651      	mov	r1, sl
 80051f8:	ebb2 0801 	subs.w	r8, r2, r1
 80051fc:	4659      	mov	r1, fp
 80051fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800520e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005216:	4690      	mov	r8, r2
 8005218:	4699      	mov	r9, r3
 800521a:	4623      	mov	r3, r4
 800521c:	eb18 0303 	adds.w	r3, r8, r3
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	462b      	mov	r3, r5
 8005224:	eb49 0303 	adc.w	r3, r9, r3
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005236:	4629      	mov	r1, r5
 8005238:	024b      	lsls	r3, r1, #9
 800523a:	4621      	mov	r1, r4
 800523c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005240:	4621      	mov	r1, r4
 8005242:	024a      	lsls	r2, r1, #9
 8005244:	4610      	mov	r0, r2
 8005246:	4619      	mov	r1, r3
 8005248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800524a:	2200      	movs	r2, #0
 800524c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800524e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005254:	f7fb fc5e 	bl	8000b14 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4613      	mov	r3, r2
 800525e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005260:	e058      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005262:	4b38      	ldr	r3, [pc, #224]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x200>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	2200      	movs	r2, #0
 800526a:	4618      	mov	r0, r3
 800526c:	4611      	mov	r1, r2
 800526e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	2300      	movs	r3, #0
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
 8005278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800527c:	4642      	mov	r2, r8
 800527e:	464b      	mov	r3, r9
 8005280:	f04f 0000 	mov.w	r0, #0
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	0159      	lsls	r1, r3, #5
 800528a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800528e:	0150      	lsls	r0, r2, #5
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4641      	mov	r1, r8
 8005296:	ebb2 0a01 	subs.w	sl, r2, r1
 800529a:	4649      	mov	r1, r9
 800529c:	eb63 0b01 	sbc.w	fp, r3, r1
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052b4:	ebb2 040a 	subs.w	r4, r2, sl
 80052b8:	eb63 050b 	sbc.w	r5, r3, fp
 80052bc:	f04f 0200 	mov.w	r2, #0
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	00eb      	lsls	r3, r5, #3
 80052c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ca:	00e2      	lsls	r2, r4, #3
 80052cc:	4614      	mov	r4, r2
 80052ce:	461d      	mov	r5, r3
 80052d0:	4643      	mov	r3, r8
 80052d2:	18e3      	adds	r3, r4, r3
 80052d4:	603b      	str	r3, [r7, #0]
 80052d6:	464b      	mov	r3, r9
 80052d8:	eb45 0303 	adc.w	r3, r5, r3
 80052dc:	607b      	str	r3, [r7, #4]
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	f04f 0300 	mov.w	r3, #0
 80052e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052ea:	4629      	mov	r1, r5
 80052ec:	028b      	lsls	r3, r1, #10
 80052ee:	4621      	mov	r1, r4
 80052f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052f4:	4621      	mov	r1, r4
 80052f6:	028a      	lsls	r2, r1, #10
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052fe:	2200      	movs	r2, #0
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	61fa      	str	r2, [r7, #28]
 8005304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005308:	f7fb fc04 	bl	8000b14 <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4613      	mov	r3, r2
 8005312:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005314:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <HAL_RCC_GetSysClockFreq+0x200>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005324:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800532e:	e002      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <HAL_RCC_GetSysClockFreq+0x204>)
 8005332:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005338:	4618      	mov	r0, r3
 800533a:	3750      	adds	r7, #80	@ 0x50
 800533c:	46bd      	mov	sp, r7
 800533e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
 8005348:	00f42400 	.word	0x00f42400
 800534c:	007a1200 	.word	0x007a1200

08005350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005354:	4b03      	ldr	r3, [pc, #12]	@ (8005364 <HAL_RCC_GetHCLKFreq+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000004 	.word	0x20000004

08005368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800536c:	f7ff fff0 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005370:	4602      	mov	r2, r0
 8005372:	4b05      	ldr	r3, [pc, #20]	@ (8005388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	0a9b      	lsrs	r3, r3, #10
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	4903      	ldr	r1, [pc, #12]	@ (800538c <HAL_RCC_GetPCLK1Freq+0x24>)
 800537e:	5ccb      	ldrb	r3, [r1, r3]
 8005380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005384:	4618      	mov	r0, r3
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40023800 	.word	0x40023800
 800538c:	08009a84 	.word	0x08009a84

08005390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005394:	f7ff ffdc 	bl	8005350 <HAL_RCC_GetHCLKFreq>
 8005398:	4602      	mov	r2, r0
 800539a:	4b05      	ldr	r3, [pc, #20]	@ (80053b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	0b5b      	lsrs	r3, r3, #13
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	4903      	ldr	r1, [pc, #12]	@ (80053b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a6:	5ccb      	ldrb	r3, [r1, r3]
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40023800 	.word	0x40023800
 80053b4:	08009a84 	.word	0x08009a84

080053b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e07b      	b.n	80054c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d108      	bne.n	80053e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053da:	d009      	beq.n	80053f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	61da      	str	r2, [r3, #28]
 80053e2:	e005      	b.n	80053f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fd fe50 	bl	80030b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005426:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005442:	431a      	orrs	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005474:	ea42 0103 	orr.w	r1, r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	f003 0104 	and.w	r1, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	f003 0210 	and.w	r2, r3, #16
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b088      	sub	sp, #32
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054da:	f7fe fbdb 	bl	8003c94 <HAL_GetTick>
 80054de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d001      	beq.n	80054f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
 80054f2:	e12a      	b.n	800574a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Transmit+0x36>
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e122      	b.n	800574a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_SPI_Transmit+0x48>
 800550e:	2302      	movs	r3, #2
 8005510:	e11b      	b.n	800574a <HAL_SPI_Transmit+0x280>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2203      	movs	r2, #3
 800551e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005560:	d10f      	bne.n	8005582 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005580:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558c:	2b40      	cmp	r3, #64	@ 0x40
 800558e:	d007      	beq.n	80055a0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800559e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055a8:	d152      	bne.n	8005650 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Transmit+0xee>
 80055b2:	8b7b      	ldrh	r3, [r7, #26]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d145      	bne.n	8005644 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055bc:	881a      	ldrh	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c8:	1c9a      	adds	r2, r3, #2
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055dc:	e032      	b.n	8005644 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d112      	bne.n	8005612 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f0:	881a      	ldrh	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	1c9a      	adds	r2, r3, #2
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005610:	e018      	b.n	8005644 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005612:	f7fe fb3f 	bl	8003c94 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d803      	bhi.n	800562a <HAL_SPI_Transmit+0x160>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d102      	bne.n	8005630 <HAL_SPI_Transmit+0x166>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d109      	bne.n	8005644 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e082      	b.n	800574a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1c7      	bne.n	80055de <HAL_SPI_Transmit+0x114>
 800564e:	e053      	b.n	80056f8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_SPI_Transmit+0x194>
 8005658:	8b7b      	ldrh	r3, [r7, #26]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d147      	bne.n	80056ee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	330c      	adds	r3, #12
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005684:	e033      	b.n	80056ee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b02      	cmp	r3, #2
 8005692:	d113      	bne.n	80056bc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	7812      	ldrb	r2, [r2, #0]
 80056a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056ba:	e018      	b.n	80056ee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056bc:	f7fe faea 	bl	8003c94 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d803      	bhi.n	80056d4 <HAL_SPI_Transmit+0x20a>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d102      	bne.n	80056da <HAL_SPI_Transmit+0x210>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e02d      	b.n	800574a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1c6      	bne.n	8005686 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fdcf 	bl	80062a0 <SPI_EndRxTxTransaction>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005748:	2300      	movs	r3, #0
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b08a      	sub	sp, #40	@ 0x28
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	607a      	str	r2, [r7, #4]
 800575e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005760:	2301      	movs	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005764:	f7fe fa96 	bl	8003c94 <HAL_GetTick>
 8005768:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005770:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005778:	887b      	ldrh	r3, [r7, #2]
 800577a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800577c:	7ffb      	ldrb	r3, [r7, #31]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d00c      	beq.n	800579c <HAL_SPI_TransmitReceive+0x4a>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005788:	d106      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x46>
 8005792:	7ffb      	ldrb	r3, [r7, #31]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d001      	beq.n	800579c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005798:	2302      	movs	r3, #2
 800579a:	e17f      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d005      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x5c>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_TransmitReceive+0x5c>
 80057a8:	887b      	ldrh	r3, [r7, #2]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e174      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x6e>
 80057bc:	2302      	movs	r3, #2
 80057be:	e16d      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x34a>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d003      	beq.n	80057dc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2205      	movs	r2, #5
 80057d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2200      	movs	r2, #0
 80057e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	887a      	ldrh	r2, [r7, #2]
 80057ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	887a      	ldrh	r2, [r7, #2]
 80057f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	887a      	ldrh	r2, [r7, #2]
 80057fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581c:	2b40      	cmp	r3, #64	@ 0x40
 800581e:	d007      	beq.n	8005830 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800582e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005838:	d17e      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_SPI_TransmitReceive+0xf6>
 8005842:	8afb      	ldrh	r3, [r7, #22]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d16c      	bne.n	8005922 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	881a      	ldrh	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005858:	1c9a      	adds	r2, r3, #2
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800586c:	e059      	b.n	8005922 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b02      	cmp	r3, #2
 800587a:	d11b      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x162>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d016      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x162>
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	2b01      	cmp	r3, #1
 800588a:	d113      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	881a      	ldrh	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589c:	1c9a      	adds	r2, r3, #2
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d119      	bne.n	80058f6 <HAL_SPI_TransmitReceive+0x1a4>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d014      	beq.n	80058f6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d6:	b292      	uxth	r2, r2
 80058d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058de:	1c9a      	adds	r2, r3, #2
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058f2:	2301      	movs	r3, #1
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058f6:	f7fe f9cd 	bl	8003c94 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005902:	429a      	cmp	r2, r3
 8005904:	d80d      	bhi.n	8005922 <HAL_SPI_TransmitReceive+0x1d0>
 8005906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d009      	beq.n	8005922 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e0bc      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1a0      	bne.n	800586e <HAL_SPI_TransmitReceive+0x11c>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d19b      	bne.n	800586e <HAL_SPI_TransmitReceive+0x11c>
 8005936:	e082      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x1f4>
 8005940:	8afb      	ldrh	r3, [r7, #22]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d171      	bne.n	8005a2a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800596c:	e05d      	b.n	8005a2a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d11c      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x264>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d017      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x264>
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	2b01      	cmp	r3, #1
 800598a:	d114      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	7812      	ldrb	r2, [r2, #0]
 8005998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d119      	bne.n	80059f8 <HAL_SPI_TransmitReceive+0x2a6>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d014      	beq.n	80059f8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059f4:	2301      	movs	r3, #1
 80059f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059f8:	f7fe f94c 	bl	8003c94 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d803      	bhi.n	8005a10 <HAL_SPI_TransmitReceive+0x2be>
 8005a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d102      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x2c4>
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e038      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d19c      	bne.n	800596e <HAL_SPI_TransmitReceive+0x21c>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d197      	bne.n	800596e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fc2c 	bl	80062a0 <SPI_EndRxTxTransaction>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d008      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e01d      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
  }
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3728      	adds	r7, #40	@ 0x28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ab8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00c      	beq.n	8005ae0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005acc:	d106      	bne.n	8005adc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d102      	bne.n	8005adc <HAL_SPI_TransmitReceive_DMA+0x38>
 8005ad6:	7dfb      	ldrb	r3, [r7, #23]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d001      	beq.n	8005ae0 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
 8005ade:	e0cf      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005aec:	887b      	ldrh	r3, [r7, #2]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e0c4      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e0bd      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d003      	beq.n	8005b20 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	887a      	ldrh	r2, [r7, #2]
 8005b30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	887a      	ldrh	r2, [r7, #2]
 8005b36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	887a      	ldrh	r2, [r7, #2]
 8005b42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d108      	bne.n	8005b74 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b66:	4a48      	ldr	r2, [pc, #288]	@ (8005c88 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005b68:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6e:	4a47      	ldr	r2, [pc, #284]	@ (8005c8c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005b70:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b72:	e007      	b.n	8005b84 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b78:	4a45      	ldr	r2, [pc, #276]	@ (8005c90 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b80:	4a44      	ldr	r2, [pc, #272]	@ (8005c94 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005b82:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b88:	4a43      	ldr	r2, [pc, #268]	@ (8005c98 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005b8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b90:	2200      	movs	r2, #0
 8005b92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005baa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005bac:	f7fe fa62 	bl	8004074 <HAL_DMA_Start_IT>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bba:	f043 0210 	orr.w	r2, r3, #16
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e058      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be2:	2200      	movs	r2, #0
 8005be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bea:	2200      	movs	r2, #0
 8005bec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	4619      	mov	r1, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c14:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c16:	f7fe fa2d 	bl	8004074 <HAL_DMA_Start_IT>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00b      	beq.n	8005c38 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	f043 0210 	orr.w	r2, r3, #16
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e023      	b.n	8005c80 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c42:	2b40      	cmp	r3, #64	@ 0x40
 8005c44:	d007      	beq.n	8005c56 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c54:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0220 	orr.w	r2, r2, #32
 8005c6c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0202 	orr.w	r2, r2, #2
 8005c7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	08006025 	.word	0x08006025
 8005c8c:	08005eed 	.word	0x08005eed
 8005c90:	08006041 	.word	0x08006041
 8005c94:	08005f95 	.word	0x08005f95
 8005c98:	0800605d 	.word	0x0800605d

08005c9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	099b      	lsrs	r3, r3, #6
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10f      	bne.n	8005ce0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	099b      	lsrs	r3, r3, #6
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
    return;
 8005cde:	e0d7      	b.n	8005e90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_SPI_IRQHandler+0x66>
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
    return;
 8005d00:	e0c6      	b.n	8005e90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <HAL_SPI_IRQHandler+0x8c>
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	099b      	lsrs	r3, r3, #6
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d106      	bne.n	8005d28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80b4 	beq.w	8005e90 <HAL_SPI_IRQHandler+0x1f4>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80ad 	beq.w	8005e90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	099b      	lsrs	r3, r3, #6
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d023      	beq.n	8005d8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d011      	beq.n	8005d72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	e00b      	b.n	8005d8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	693b      	ldr	r3, [r7, #16]
        return;
 8005d88:	e082      	b.n	8005e90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d014      	beq.n	8005dc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9a:	f043 0201 	orr.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dbc:	601a      	str	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	0a1b      	lsrs	r3, r3, #8
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00c      	beq.n	8005de6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd0:	f043 0208 	orr.w	r2, r3, #8
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60bb      	str	r3, [r7, #8]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d04f      	beq.n	8005e8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005dfc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <HAL_SPI_IRQHandler+0x17e>
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d034      	beq.n	8005e84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0203 	bic.w	r2, r2, #3
 8005e28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d011      	beq.n	8005e56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e36:	4a18      	ldr	r2, [pc, #96]	@ (8005e98 <HAL_SPI_IRQHandler+0x1fc>)
 8005e38:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe f9e0 	bl	8004204 <HAL_DMA_Abort_IT>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d005      	beq.n	8005e56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d016      	beq.n	8005e8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e62:	4a0d      	ldr	r2, [pc, #52]	@ (8005e98 <HAL_SPI_IRQHandler+0x1fc>)
 8005e64:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe f9ca 	bl	8004204 <HAL_DMA_Abort_IT>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005e82:	e003      	b.n	8005e8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f827 	bl	8005ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e8a:	e000      	b.n	8005e8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005e8c:	bf00      	nop
    return;
 8005e8e:	bf00      	nop
  }
}
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	0800609d 	.word	0x0800609d

08005e9c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005efa:	f7fd fecb 	bl	8003c94 <HAL_GetTick>
 8005efe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f0e:	d03b      	beq.n	8005f88 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0220 	bic.w	r2, r2, #32
 8005f1e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <SPI_DMAReceiveCplt+0x58>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f30:	d108      	bne.n	8005f44 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0203 	bic.w	r2, r2, #3
 8005f40:	605a      	str	r2, [r3, #4]
 8005f42:	e007      	b.n	8005f54 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0201 	bic.w	r2, r2, #1
 8005f52:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	2164      	movs	r1, #100	@ 0x64
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f93b 	bl	80061d4 <SPI_EndRxTransaction>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f7ff ffa9 	bl	8005ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f86:	e002      	b.n	8005f8e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff ff87 	bl	8005e9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fa2:	f7fd fe77 	bl	8003c94 <HAL_GetTick>
 8005fa6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb6:	d02f      	beq.n	8006018 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0220 	bic.w	r2, r2, #32
 8005fc6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	2164      	movs	r1, #100	@ 0x64
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f967 	bl	80062a0 <SPI_EndRxTxTransaction>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fdc:	f043 0220 	orr.w	r2, r3, #32
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0203 	bic.w	r2, r2, #3
 8005ff2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff ff61 	bl	8005ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006016:	e002      	b.n	800601e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7fb fc93 	bl	8001944 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006030:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f7ff ff3c 	bl	8005eb0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006038:	bf00      	nop
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff ff38 	bl	8005ec4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0203 	bic.w	r2, r2, #3
 8006078:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607e:	f043 0210 	orr.w	r2, r3, #16
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7ff ff22 	bl	8005ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ff0e 	bl	8005ed8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	4613      	mov	r3, r2
 80060d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060d4:	f7fd fdde 	bl	8003c94 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	4413      	add	r3, r2
 80060e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060e4:	f7fd fdd6 	bl	8003c94 <HAL_GetTick>
 80060e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ea:	4b39      	ldr	r3, [pc, #228]	@ (80061d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	015b      	lsls	r3, r3, #5
 80060f0:	0d1b      	lsrs	r3, r3, #20
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	fb02 f303 	mul.w	r3, r2, r3
 80060f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060fa:	e055      	b.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d051      	beq.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006104:	f7fd fdc6 	bl	8003c94 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	429a      	cmp	r2, r3
 8006112:	d902      	bls.n	800611a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d13d      	bne.n	8006196 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006128:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006132:	d111      	bne.n	8006158 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800613c:	d004      	beq.n	8006148 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006146:	d107      	bne.n	8006158 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006160:	d10f      	bne.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006180:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e018      	b.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d102      	bne.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	61fb      	str	r3, [r7, #28]
 80061a0:	e002      	b.n	80061a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4013      	ands	r3, r2
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	bf0c      	ite	eq
 80061b8:	2301      	moveq	r3, #1
 80061ba:	2300      	movne	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d19a      	bne.n	80060fc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3720      	adds	r7, #32
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000004 	.word	0x20000004

080061d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e8:	d111      	bne.n	800620e <SPI_EndRxTransaction+0x3a>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061f2:	d004      	beq.n	80061fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061fc:	d107      	bne.n	800620e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800620c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006216:	d12a      	bne.n	800626e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006220:	d012      	beq.n	8006248 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2200      	movs	r2, #0
 800622a:	2180      	movs	r1, #128	@ 0x80
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff ff49 	bl	80060c4 <SPI_WaitFlagStateUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d02d      	beq.n	8006294 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e026      	b.n	8006296 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	2101      	movs	r1, #1
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff ff36 	bl	80060c4 <SPI_WaitFlagStateUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01a      	beq.n	8006294 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e013      	b.n	8006296 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	2101      	movs	r1, #1
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff ff23 	bl	80060c4 <SPI_WaitFlagStateUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e000      	b.n	8006296 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2201      	movs	r2, #1
 80062b4:	2102      	movs	r1, #2
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff ff04 	bl	80060c4 <SPI_WaitFlagStateUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e032      	b.n	8006338 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006340 <SPI_EndRxTxTransaction+0xa0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006344 <SPI_EndRxTxTransaction+0xa4>)
 80062d8:	fba2 2303 	umull	r2, r3, r2, r3
 80062dc:	0d5b      	lsrs	r3, r3, #21
 80062de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062f0:	d112      	bne.n	8006318 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	9300      	str	r3, [sp, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2200      	movs	r2, #0
 80062fa:	2180      	movs	r1, #128	@ 0x80
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f7ff fee1 	bl	80060c4 <SPI_WaitFlagStateUntilTimeout>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d016      	beq.n	8006336 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630c:	f043 0220 	orr.w	r2, r3, #32
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e00f      	b.n	8006338 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00a      	beq.n	8006334 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	3b01      	subs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632e:	2b80      	cmp	r3, #128	@ 0x80
 8006330:	d0f2      	beq.n	8006318 <SPI_EndRxTxTransaction+0x78>
 8006332:	e000      	b.n	8006336 <SPI_EndRxTxTransaction+0x96>
        break;
 8006334:	bf00      	nop
  }

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000004 	.word	0x20000004
 8006344:	165e9f81 	.word	0x165e9f81

08006348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e041      	b.n	80063de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fd f98a 	bl	8003688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f000 fe3c 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d001      	beq.n	8006400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e04e      	b.n	800649e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a23      	ldr	r2, [pc, #140]	@ (80064ac <HAL_TIM_Base_Start_IT+0xc4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d022      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x80>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642a:	d01d      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x80>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1f      	ldr	r2, [pc, #124]	@ (80064b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d018      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x80>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1e      	ldr	r2, [pc, #120]	@ (80064b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x80>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1c      	ldr	r2, [pc, #112]	@ (80064b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00e      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x80>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1b      	ldr	r2, [pc, #108]	@ (80064bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d009      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x80>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d004      	beq.n	8006468 <HAL_TIM_Base_Start_IT+0x80>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a18      	ldr	r2, [pc, #96]	@ (80064c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d111      	bne.n	800648c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b06      	cmp	r3, #6
 8006478:	d010      	beq.n	800649c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648a:	e007      	b.n	800649c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	40010000 	.word	0x40010000
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800
 80064b8:	40000c00 	.word	0x40000c00
 80064bc:	40010400 	.word	0x40010400
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40001800 	.word	0x40001800

080064c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e041      	b.n	800655e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f839 	bl	8006566 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f000 fd7c 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
	...

0800657c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b02      	cmp	r3, #2
 800659e:	bf0c      	ite	eq
 80065a0:	2301      	moveq	r3, #1
 80065a2:	2300      	movne	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e022      	b.n	80065ee <HAL_TIM_PWM_Start_DMA+0x72>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d109      	bne.n	80065c2 <HAL_TIM_PWM_Start_DMA+0x46>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	bf0c      	ite	eq
 80065ba:	2301      	moveq	r3, #1
 80065bc:	2300      	movne	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e015      	b.n	80065ee <HAL_TIM_PWM_Start_DMA+0x72>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d109      	bne.n	80065dc <HAL_TIM_PWM_Start_DMA+0x60>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	bf0c      	ite	eq
 80065d4:	2301      	moveq	r3, #1
 80065d6:	2300      	movne	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e008      	b.n	80065ee <HAL_TIM_PWM_Start_DMA+0x72>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80065f2:	2302      	movs	r3, #2
 80065f4:	e171      	b.n	80068da <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <HAL_TIM_PWM_Start_DMA+0x94>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	bf0c      	ite	eq
 8006608:	2301      	moveq	r3, #1
 800660a:	2300      	movne	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e022      	b.n	8006656 <HAL_TIM_PWM_Start_DMA+0xda>
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b04      	cmp	r3, #4
 8006614:	d109      	bne.n	800662a <HAL_TIM_PWM_Start_DMA+0xae>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b01      	cmp	r3, #1
 8006620:	bf0c      	ite	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	2300      	movne	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	e015      	b.n	8006656 <HAL_TIM_PWM_Start_DMA+0xda>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2b08      	cmp	r3, #8
 800662e:	d109      	bne.n	8006644 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	bf0c      	ite	eq
 800663c:	2301      	moveq	r3, #1
 800663e:	2300      	movne	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	e008      	b.n	8006656 <HAL_TIM_PWM_Start_DMA+0xda>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d024      	beq.n	80066a4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_TIM_PWM_Start_DMA+0xea>
 8006660:	887b      	ldrh	r3, [r7, #2]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e137      	b.n	80068da <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start_DMA+0xfe>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006678:	e016      	b.n	80066a8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d104      	bne.n	800668a <HAL_TIM_PWM_Start_DMA+0x10e>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006688:	e00e      	b.n	80066a8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d104      	bne.n	800669a <HAL_TIM_PWM_Start_DMA+0x11e>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006698:	e006      	b.n	80066a8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066a2:	e001      	b.n	80066a8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e118      	b.n	80068da <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b0c      	cmp	r3, #12
 80066ac:	f200 80ae 	bhi.w	800680c <HAL_TIM_PWM_Start_DMA+0x290>
 80066b0:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066ed 	.word	0x080066ed
 80066bc:	0800680d 	.word	0x0800680d
 80066c0:	0800680d 	.word	0x0800680d
 80066c4:	0800680d 	.word	0x0800680d
 80066c8:	08006735 	.word	0x08006735
 80066cc:	0800680d 	.word	0x0800680d
 80066d0:	0800680d 	.word	0x0800680d
 80066d4:	0800680d 	.word	0x0800680d
 80066d8:	0800677d 	.word	0x0800677d
 80066dc:	0800680d 	.word	0x0800680d
 80066e0:	0800680d 	.word	0x0800680d
 80066e4:	0800680d 	.word	0x0800680d
 80066e8:	080067c5 	.word	0x080067c5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	4a7c      	ldr	r2, [pc, #496]	@ (80068e4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80066f2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	4a7b      	ldr	r2, [pc, #492]	@ (80068e8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80066fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006700:	4a7a      	ldr	r2, [pc, #488]	@ (80068ec <HAL_TIM_PWM_Start_DMA+0x370>)
 8006702:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3334      	adds	r3, #52	@ 0x34
 8006710:	461a      	mov	r2, r3
 8006712:	887b      	ldrh	r3, [r7, #2]
 8006714:	f7fd fcae 	bl	8004074 <HAL_DMA_Start_IT>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e0db      	b.n	80068da <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006730:	60da      	str	r2, [r3, #12]
      break;
 8006732:	e06e      	b.n	8006812 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	4a6a      	ldr	r2, [pc, #424]	@ (80068e4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800673a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	4a69      	ldr	r2, [pc, #420]	@ (80068e8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	4a68      	ldr	r2, [pc, #416]	@ (80068ec <HAL_TIM_PWM_Start_DMA+0x370>)
 800674a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3338      	adds	r3, #56	@ 0x38
 8006758:	461a      	mov	r2, r3
 800675a:	887b      	ldrh	r3, [r7, #2]
 800675c:	f7fd fc8a 	bl	8004074 <HAL_DMA_Start_IT>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e0b7      	b.n	80068da <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006778:	60da      	str	r2, [r3, #12]
      break;
 800677a:	e04a      	b.n	8006812 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006780:	4a58      	ldr	r2, [pc, #352]	@ (80068e4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006782:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	4a57      	ldr	r2, [pc, #348]	@ (80068e8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800678a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	4a56      	ldr	r2, [pc, #344]	@ (80068ec <HAL_TIM_PWM_Start_DMA+0x370>)
 8006792:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	333c      	adds	r3, #60	@ 0x3c
 80067a0:	461a      	mov	r2, r3
 80067a2:	887b      	ldrh	r3, [r7, #2]
 80067a4:	f7fd fc66 	bl	8004074 <HAL_DMA_Start_IT>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e093      	b.n	80068da <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067c0:	60da      	str	r2, [r3, #12]
      break;
 80067c2:	e026      	b.n	8006812 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c8:	4a46      	ldr	r2, [pc, #280]	@ (80068e4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80067ca:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d0:	4a45      	ldr	r2, [pc, #276]	@ (80068e8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80067d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d8:	4a44      	ldr	r2, [pc, #272]	@ (80068ec <HAL_TIM_PWM_Start_DMA+0x370>)
 80067da:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3340      	adds	r3, #64	@ 0x40
 80067e8:	461a      	mov	r2, r3
 80067ea:	887b      	ldrh	r3, [r7, #2]
 80067ec:	f7fd fc42 	bl	8004074 <HAL_DMA_Start_IT>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e06f      	b.n	80068da <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006808:	60da      	str	r2, [r3, #12]
      break;
 800680a:	e002      	b.n	8006812 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	75fb      	strb	r3, [r7, #23]
      break;
 8006810:	bf00      	nop
  }

  if (status == HAL_OK)
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d15f      	bne.n	80068d8 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2201      	movs	r2, #1
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fedf 	bl	80075e4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a31      	ldr	r2, [pc, #196]	@ (80068f0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d004      	beq.n	800683a <HAL_TIM_PWM_Start_DMA+0x2be>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2f      	ldr	r2, [pc, #188]	@ (80068f4 <HAL_TIM_PWM_Start_DMA+0x378>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d101      	bne.n	800683e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800683a:	2301      	movs	r3, #1
 800683c:	e000      	b.n	8006840 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800683e:	2300      	movs	r3, #0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006852:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a25      	ldr	r2, [pc, #148]	@ (80068f0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d022      	beq.n	80068a4 <HAL_TIM_PWM_Start_DMA+0x328>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006866:	d01d      	beq.n	80068a4 <HAL_TIM_PWM_Start_DMA+0x328>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a22      	ldr	r2, [pc, #136]	@ (80068f8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d018      	beq.n	80068a4 <HAL_TIM_PWM_Start_DMA+0x328>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a21      	ldr	r2, [pc, #132]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x380>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d013      	beq.n	80068a4 <HAL_TIM_PWM_Start_DMA+0x328>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1f      	ldr	r2, [pc, #124]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x384>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00e      	beq.n	80068a4 <HAL_TIM_PWM_Start_DMA+0x328>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1a      	ldr	r2, [pc, #104]	@ (80068f4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d009      	beq.n	80068a4 <HAL_TIM_PWM_Start_DMA+0x328>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1b      	ldr	r2, [pc, #108]	@ (8006904 <HAL_TIM_PWM_Start_DMA+0x388>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <HAL_TIM_PWM_Start_DMA+0x328>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1a      	ldr	r2, [pc, #104]	@ (8006908 <HAL_TIM_PWM_Start_DMA+0x38c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d111      	bne.n	80068c8 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b06      	cmp	r3, #6
 80068b4:	d010      	beq.n	80068d8 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c6:	e007      	b.n	80068d8 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	08006ef5 	.word	0x08006ef5
 80068e8:	08006f9d 	.word	0x08006f9d
 80068ec:	08006e63 	.word	0x08006e63
 80068f0:	40010000 	.word	0x40010000
 80068f4:	40010400 	.word	0x40010400
 80068f8:	40000400 	.word	0x40000400
 80068fc:	40000800 	.word	0x40000800
 8006900:	40000c00 	.word	0x40000c00
 8006904:	40014000 	.word	0x40014000
 8006908:	40001800 	.word	0x40001800

0800690c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d020      	beq.n	8006970 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01b      	beq.n	8006970 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0202 	mvn.w	r2, #2
 8006940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa5b 	bl	8006e12 <HAL_TIM_IC_CaptureCallback>
 800695c:	e005      	b.n	800696a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa4d 	bl	8006dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fa5e 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d020      	beq.n	80069bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0204 	mvn.w	r2, #4
 800698c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2202      	movs	r2, #2
 8006992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa35 	bl	8006e12 <HAL_TIM_IC_CaptureCallback>
 80069a8:	e005      	b.n	80069b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa27 	bl	8006dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fa38 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d020      	beq.n	8006a08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01b      	beq.n	8006a08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0208 	mvn.w	r2, #8
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2204      	movs	r2, #4
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f003 0303 	and.w	r3, r3, #3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa0f 	bl	8006e12 <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa01 	bl	8006dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa12 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d020      	beq.n	8006a54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f003 0310 	and.w	r3, r3, #16
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01b      	beq.n	8006a54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0210 	mvn.w	r2, #16
 8006a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f9e9 	bl	8006e12 <HAL_TIM_IC_CaptureCallback>
 8006a40:	e005      	b.n	8006a4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f9db 	bl	8006dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f9ec 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00c      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0201 	mvn.w	r2, #1
 8006a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fa ff4a 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00c      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fe50 	bl	800773c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00c      	beq.n	8006ac0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f9bd 	bl	8006e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d007      	beq.n	8006ae4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0220 	mvn.w	r2, #32
 8006adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fe22 	bl	8007728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e0ae      	b.n	8006c68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b0c      	cmp	r3, #12
 8006b16:	f200 809f 	bhi.w	8006c58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b55 	.word	0x08006b55
 8006b24:	08006c59 	.word	0x08006c59
 8006b28:	08006c59 	.word	0x08006c59
 8006b2c:	08006c59 	.word	0x08006c59
 8006b30:	08006b95 	.word	0x08006b95
 8006b34:	08006c59 	.word	0x08006c59
 8006b38:	08006c59 	.word	0x08006c59
 8006b3c:	08006c59 	.word	0x08006c59
 8006b40:	08006bd7 	.word	0x08006bd7
 8006b44:	08006c59 	.word	0x08006c59
 8006b48:	08006c59 	.word	0x08006c59
 8006b4c:	08006c59 	.word	0x08006c59
 8006b50:	08006c17 	.word	0x08006c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68b9      	ldr	r1, [r7, #8]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 faf8 	bl	8007150 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0208 	orr.w	r2, r2, #8
 8006b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0204 	bic.w	r2, r2, #4
 8006b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6999      	ldr	r1, [r3, #24]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	691a      	ldr	r2, [r3, #16]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	619a      	str	r2, [r3, #24]
      break;
 8006b92:	e064      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fb48 	bl	8007230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6999      	ldr	r1, [r3, #24]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	021a      	lsls	r2, r3, #8
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	619a      	str	r2, [r3, #24]
      break;
 8006bd4:	e043      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fb9d 	bl	800731c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69da      	ldr	r2, [r3, #28]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0208 	orr.w	r2, r2, #8
 8006bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0204 	bic.w	r2, r2, #4
 8006c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69d9      	ldr	r1, [r3, #28]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	61da      	str	r2, [r3, #28]
      break;
 8006c14:	e023      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f000 fbf1 	bl	8007404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69d9      	ldr	r1, [r3, #28]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	021a      	lsls	r2, r3, #8
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	61da      	str	r2, [r3, #28]
      break;
 8006c56:	e002      	b.n	8006c5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_TIM_ConfigClockSource+0x1c>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e0b4      	b.n	8006df6 <HAL_TIM_ConfigClockSource+0x186>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cc4:	d03e      	beq.n	8006d44 <HAL_TIM_ConfigClockSource+0xd4>
 8006cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cca:	f200 8087 	bhi.w	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
 8006cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cd2:	f000 8086 	beq.w	8006de2 <HAL_TIM_ConfigClockSource+0x172>
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cda:	d87f      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
 8006cdc:	2b70      	cmp	r3, #112	@ 0x70
 8006cde:	d01a      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0xa6>
 8006ce0:	2b70      	cmp	r3, #112	@ 0x70
 8006ce2:	d87b      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
 8006ce4:	2b60      	cmp	r3, #96	@ 0x60
 8006ce6:	d050      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0x11a>
 8006ce8:	2b60      	cmp	r3, #96	@ 0x60
 8006cea:	d877      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
 8006cec:	2b50      	cmp	r3, #80	@ 0x50
 8006cee:	d03c      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0xfa>
 8006cf0:	2b50      	cmp	r3, #80	@ 0x50
 8006cf2:	d873      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
 8006cf4:	2b40      	cmp	r3, #64	@ 0x40
 8006cf6:	d058      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x13a>
 8006cf8:	2b40      	cmp	r3, #64	@ 0x40
 8006cfa:	d86f      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
 8006cfc:	2b30      	cmp	r3, #48	@ 0x30
 8006cfe:	d064      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x15a>
 8006d00:	2b30      	cmp	r3, #48	@ 0x30
 8006d02:	d86b      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	d060      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x15a>
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d867      	bhi.n	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d05c      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x15a>
 8006d10:	2b10      	cmp	r3, #16
 8006d12:	d05a      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x15a>
 8006d14:	e062      	b.n	8006ddc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d26:	f000 fc3d 	bl	80075a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	609a      	str	r2, [r3, #8]
      break;
 8006d42:	e04f      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d54:	f000 fc26 	bl	80075a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d66:	609a      	str	r2, [r3, #8]
      break;
 8006d68:	e03c      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d76:	461a      	mov	r2, r3
 8006d78:	f000 fb9a 	bl	80074b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2150      	movs	r1, #80	@ 0x50
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 fbf3 	bl	800756e <TIM_ITRx_SetConfig>
      break;
 8006d88:	e02c      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d96:	461a      	mov	r2, r3
 8006d98:	f000 fbb9 	bl	800750e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2160      	movs	r1, #96	@ 0x60
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fbe3 	bl	800756e <TIM_ITRx_SetConfig>
      break;
 8006da8:	e01c      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db6:	461a      	mov	r2, r3
 8006db8:	f000 fb7a 	bl	80074b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2140      	movs	r1, #64	@ 0x40
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fbd3 	bl	800756e <TIM_ITRx_SetConfig>
      break;
 8006dc8:	e00c      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f000 fbca 	bl	800756e <TIM_ITRx_SetConfig>
      break;
 8006dda:	e003      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	73fb      	strb	r3, [r7, #15]
      break;
 8006de0:	e000      	b.n	8006de4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d107      	bne.n	8006e8a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e88:	e02a      	b.n	8006ee0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d107      	bne.n	8006ea4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2202      	movs	r2, #2
 8006e98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ea2:	e01d      	b.n	8006ee0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d107      	bne.n	8006ebe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ebc:	e010      	b.n	8006ee0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d107      	bne.n	8006ed8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2208      	movs	r2, #8
 8006ecc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed6:	e003      	b.n	8006ee0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f7ff ffb4 	bl	8006e4e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	771a      	strb	r2, [r3, #28]
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d10b      	bne.n	8006f24 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d136      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f22:	e031      	b.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d10b      	bne.n	8006f46 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2202      	movs	r2, #2
 8006f32:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d125      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f44:	e020      	b.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d10b      	bne.n	8006f68 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2204      	movs	r2, #4
 8006f54:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d114      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f66:	e00f      	b.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d10a      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2208      	movs	r2, #8
 8006f76:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff ff4c 	bl	8006e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d103      	bne.n	8006fbc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	771a      	strb	r2, [r3, #28]
 8006fba:	e019      	b.n	8006ff0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d103      	bne.n	8006fce <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	771a      	strb	r2, [r3, #28]
 8006fcc:	e010      	b.n	8006ff0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d103      	bne.n	8006fe0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2204      	movs	r2, #4
 8006fdc:	771a      	strb	r2, [r3, #28]
 8006fde:	e007      	b.n	8006ff0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d102      	bne.n	8006ff0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2208      	movs	r2, #8
 8006fee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7fa fcc7 	bl	8001984 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	771a      	strb	r2, [r3, #28]
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a43      	ldr	r2, [pc, #268]	@ (8007124 <TIM_Base_SetConfig+0x120>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d013      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007022:	d00f      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a40      	ldr	r2, [pc, #256]	@ (8007128 <TIM_Base_SetConfig+0x124>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00b      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a3f      	ldr	r2, [pc, #252]	@ (800712c <TIM_Base_SetConfig+0x128>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d007      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a3e      	ldr	r2, [pc, #248]	@ (8007130 <TIM_Base_SetConfig+0x12c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d003      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a3d      	ldr	r2, [pc, #244]	@ (8007134 <TIM_Base_SetConfig+0x130>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d108      	bne.n	8007056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800704a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a32      	ldr	r2, [pc, #200]	@ (8007124 <TIM_Base_SetConfig+0x120>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d02b      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007064:	d027      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2f      	ldr	r2, [pc, #188]	@ (8007128 <TIM_Base_SetConfig+0x124>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d023      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2e      	ldr	r2, [pc, #184]	@ (800712c <TIM_Base_SetConfig+0x128>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01f      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2d      	ldr	r2, [pc, #180]	@ (8007130 <TIM_Base_SetConfig+0x12c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01b      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2c      	ldr	r2, [pc, #176]	@ (8007134 <TIM_Base_SetConfig+0x130>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d017      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a2b      	ldr	r2, [pc, #172]	@ (8007138 <TIM_Base_SetConfig+0x134>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d013      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2a      	ldr	r2, [pc, #168]	@ (800713c <TIM_Base_SetConfig+0x138>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00f      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a29      	ldr	r2, [pc, #164]	@ (8007140 <TIM_Base_SetConfig+0x13c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a28      	ldr	r2, [pc, #160]	@ (8007144 <TIM_Base_SetConfig+0x140>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a27      	ldr	r2, [pc, #156]	@ (8007148 <TIM_Base_SetConfig+0x144>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a26      	ldr	r2, [pc, #152]	@ (800714c <TIM_Base_SetConfig+0x148>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d108      	bne.n	80070c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007124 <TIM_Base_SetConfig+0x120>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d003      	beq.n	80070f6 <TIM_Base_SetConfig+0xf2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a10      	ldr	r2, [pc, #64]	@ (8007134 <TIM_Base_SetConfig+0x130>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d103      	bne.n	80070fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f043 0204 	orr.w	r2, r3, #4
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40010000 	.word	0x40010000
 8007128:	40000400 	.word	0x40000400
 800712c:	40000800 	.word	0x40000800
 8007130:	40000c00 	.word	0x40000c00
 8007134:	40010400 	.word	0x40010400
 8007138:	40014000 	.word	0x40014000
 800713c:	40014400 	.word	0x40014400
 8007140:	40014800 	.word	0x40014800
 8007144:	40001800 	.word	0x40001800
 8007148:	40001c00 	.word	0x40001c00
 800714c:	40002000 	.word	0x40002000

08007150 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f023 0201 	bic.w	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f023 0302 	bic.w	r3, r3, #2
 8007198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a20      	ldr	r2, [pc, #128]	@ (8007228 <TIM_OC1_SetConfig+0xd8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_OC1_SetConfig+0x64>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a1f      	ldr	r2, [pc, #124]	@ (800722c <TIM_OC1_SetConfig+0xdc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d10c      	bne.n	80071ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f023 0308 	bic.w	r3, r3, #8
 80071ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f023 0304 	bic.w	r3, r3, #4
 80071cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a15      	ldr	r2, [pc, #84]	@ (8007228 <TIM_OC1_SetConfig+0xd8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d003      	beq.n	80071de <TIM_OC1_SetConfig+0x8e>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a14      	ldr	r2, [pc, #80]	@ (800722c <TIM_OC1_SetConfig+0xdc>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d111      	bne.n	8007202 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	621a      	str	r2, [r3, #32]
}
 800721c:	bf00      	nop
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	40010000 	.word	0x40010000
 800722c:	40010400 	.word	0x40010400

08007230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	f023 0210 	bic.w	r2, r3, #16
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800725e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f023 0320 	bic.w	r3, r3, #32
 800727a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	4313      	orrs	r3, r2
 8007286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a22      	ldr	r2, [pc, #136]	@ (8007314 <TIM_OC2_SetConfig+0xe4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d003      	beq.n	8007298 <TIM_OC2_SetConfig+0x68>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a21      	ldr	r2, [pc, #132]	@ (8007318 <TIM_OC2_SetConfig+0xe8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d10d      	bne.n	80072b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800729e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	011b      	lsls	r3, r3, #4
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a17      	ldr	r2, [pc, #92]	@ (8007314 <TIM_OC2_SetConfig+0xe4>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_OC2_SetConfig+0x94>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a16      	ldr	r2, [pc, #88]	@ (8007318 <TIM_OC2_SetConfig+0xe8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d113      	bne.n	80072ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	695b      	ldr	r3, [r3, #20]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	621a      	str	r2, [r3, #32]
}
 8007306:	bf00      	nop
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010000 	.word	0x40010000
 8007318:	40010400 	.word	0x40010400

0800731c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a21      	ldr	r2, [pc, #132]	@ (80073fc <TIM_OC3_SetConfig+0xe0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_OC3_SetConfig+0x66>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a20      	ldr	r2, [pc, #128]	@ (8007400 <TIM_OC3_SetConfig+0xe4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d10d      	bne.n	800739e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4313      	orrs	r3, r2
 8007394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800739c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <TIM_OC3_SetConfig+0xe0>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d003      	beq.n	80073ae <TIM_OC3_SetConfig+0x92>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a15      	ldr	r2, [pc, #84]	@ (8007400 <TIM_OC3_SetConfig+0xe4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d113      	bne.n	80073d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	621a      	str	r2, [r3, #32]
}
 80073f0:	bf00      	nop
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	40010000 	.word	0x40010000
 8007400:	40010400 	.word	0x40010400

08007404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800743a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800744e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	031b      	lsls	r3, r3, #12
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a12      	ldr	r2, [pc, #72]	@ (80074a8 <TIM_OC4_SetConfig+0xa4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <TIM_OC4_SetConfig+0x68>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a11      	ldr	r2, [pc, #68]	@ (80074ac <TIM_OC4_SetConfig+0xa8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d109      	bne.n	8007480 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	019b      	lsls	r3, r3, #6
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	621a      	str	r2, [r3, #32]
}
 800749a:	bf00      	nop
 800749c:	371c      	adds	r7, #28
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40010000 	.word	0x40010000
 80074ac:	40010400 	.word	0x40010400

080074b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	f023 0201 	bic.w	r2, r3, #1
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f023 030a 	bic.w	r3, r3, #10
 80074ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	621a      	str	r2, [r3, #32]
}
 8007502:	bf00      	nop
 8007504:	371c      	adds	r7, #28
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800750e:	b480      	push	{r7}
 8007510:	b087      	sub	sp, #28
 8007512:	af00      	add	r7, sp, #0
 8007514:	60f8      	str	r0, [r7, #12]
 8007516:	60b9      	str	r1, [r7, #8]
 8007518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	f023 0210 	bic.w	r2, r3, #16
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	031b      	lsls	r3, r3, #12
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800754a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	621a      	str	r2, [r3, #32]
}
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	f043 0307 	orr.w	r3, r3, #7
 8007590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	609a      	str	r2, [r3, #8]
}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	021a      	lsls	r2, r3, #8
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	609a      	str	r2, [r3, #8]
}
 80075d8:	bf00      	nop
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	2201      	movs	r2, #1
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1a      	ldr	r2, [r3, #32]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	43db      	mvns	r3, r3
 8007606:	401a      	ands	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a1a      	ldr	r2, [r3, #32]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	431a      	orrs	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
	...

08007630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007644:	2302      	movs	r3, #2
 8007646:	e05a      	b.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a21      	ldr	r2, [pc, #132]	@ (800770c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d022      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007694:	d01d      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1d      	ldr	r2, [pc, #116]	@ (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d018      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00e      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a18      	ldr	r2, [pc, #96]	@ (800771c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d009      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a17      	ldr	r2, [pc, #92]	@ (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a15      	ldr	r2, [pc, #84]	@ (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d10c      	bne.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	40010000 	.word	0x40010000
 8007710:	40000400 	.word	0x40000400
 8007714:	40000800 	.word	0x40000800
 8007718:	40000c00 	.word	0x40000c00
 800771c:	40010400 	.word	0x40010400
 8007720:	40014000 	.word	0x40014000
 8007724:	40001800 	.word	0x40001800

08007728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e042      	b.n	80077e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fc f978 	bl	8003a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2224      	movs	r2, #36	@ 0x24
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fe95 	bl	80084c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695a      	ldr	r2, [r3, #20]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	4613      	mov	r3, r2
 80077fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b20      	cmp	r3, #32
 8007808:	d112      	bne.n	8007830 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_UART_Receive_DMA+0x26>
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e00b      	b.n	8007832 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	461a      	mov	r2, r3
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fbe4 	bl	8007ff4 <UART_Start_Receive_DMA>
 800782c:	4603      	mov	r3, r0
 800782e:	e000      	b.n	8007832 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007830:	2302      	movs	r3, #2
  }
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b0ba      	sub	sp, #232	@ 0xe8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007862:	2300      	movs	r3, #0
 8007864:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007868:	2300      	movs	r3, #0
 800786a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800787a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10f      	bne.n	80078a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <HAL_UART_IRQHandler+0x66>
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fd54 	bl	8008348 <UART_Receive_IT>
      return;
 80078a0:	e273      	b.n	8007d8a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 80de 	beq.w	8007a68 <HAL_UART_IRQHandler+0x22c>
 80078ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80d1 	beq.w	8007a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <HAL_UART_IRQHandler+0xae>
 80078d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e2:	f043 0201 	orr.w	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <HAL_UART_IRQHandler+0xd2>
 80078f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007906:	f043 0202 	orr.w	r2, r3, #2
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800790e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <HAL_UART_IRQHandler+0xf6>
 800791a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d005      	beq.n	8007932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792a:	f043 0204 	orr.w	r2, r3, #4
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d011      	beq.n	8007962 <HAL_UART_IRQHandler+0x126>
 800793e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800794a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795a:	f043 0208 	orr.w	r2, r3, #8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 820a 	beq.w	8007d80 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <HAL_UART_IRQHandler+0x14e>
 8007978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fcdf 	bl	8008348 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007994:	2b40      	cmp	r3, #64	@ 0x40
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079a6:	f003 0308 	and.w	r3, r3, #8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <HAL_UART_IRQHandler+0x17a>
 80079ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d04f      	beq.n	8007a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fbea 	bl	8008190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c6:	2b40      	cmp	r3, #64	@ 0x40
 80079c8:	d141      	bne.n	8007a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3314      	adds	r3, #20
 80079d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3314      	adds	r3, #20
 80079f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1d9      	bne.n	80079ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d013      	beq.n	8007a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a22:	4a8a      	ldr	r2, [pc, #552]	@ (8007c4c <HAL_UART_IRQHandler+0x410>)
 8007a24:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fc fbea 	bl	8004204 <HAL_DMA_Abort_IT>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a44:	e00e      	b.n	8007a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9c0 	bl	8007dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	e00a      	b.n	8007a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9bc 	bl	8007dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a54:	e006      	b.n	8007a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f9b8 	bl	8007dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007a62:	e18d      	b.n	8007d80 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a64:	bf00      	nop
    return;
 8007a66:	e18b      	b.n	8007d80 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	f040 8167 	bne.w	8007d40 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8160 	beq.w	8007d40 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8159 	beq.w	8007d40 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60bb      	str	r3, [r7, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	60bb      	str	r3, [r7, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aae:	2b40      	cmp	r3, #64	@ 0x40
 8007ab0:	f040 80ce 	bne.w	8007c50 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80a9 	beq.w	8007c1c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	f080 80a2 	bcs.w	8007c1c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ade:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aea:	f000 8088 	beq.w	8007bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	330c      	adds	r3, #12
 8007af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1d9      	bne.n	8007aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3314      	adds	r3, #20
 8007b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e1      	bne.n	8007b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3314      	adds	r3, #20
 8007b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ba0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e3      	bne.n	8007b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2220      	movs	r2, #32
 8007bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	330c      	adds	r3, #12
 8007bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc6:	e853 3f00 	ldrex	r3, [r3]
 8007bca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bce:	f023 0310 	bic.w	r3, r3, #16
 8007bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007be0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007be2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007be6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e3      	bne.n	8007bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fc fa93 	bl	8004124 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8e3 	bl	8007de0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007c1a:	e0b3      	b.n	8007d84 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c24:	429a      	cmp	r2, r3
 8007c26:	f040 80ad 	bne.w	8007d84 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c34:	f040 80a6 	bne.w	8007d84 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8cb 	bl	8007de0 <HAL_UARTEx_RxEventCallback>
      return;
 8007c4a:	e09b      	b.n	8007d84 <HAL_UART_IRQHandler+0x548>
 8007c4c:	08008257 	.word	0x08008257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 808e 	beq.w	8007d88 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 8089 	beq.w	8007d88 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	330c      	adds	r3, #12
 8007c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c80:	e853 3f00 	ldrex	r3, [r3]
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	330c      	adds	r3, #12
 8007c96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ca0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e3      	bne.n	8007c76 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3314      	adds	r3, #20
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	f023 0301 	bic.w	r3, r3, #1
 8007cc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007cd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e3      	bne.n	8007cae <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0310 	bic.w	r3, r3, #16
 8007d0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007d18:	61fa      	str	r2, [r7, #28]
 8007d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	69b9      	ldr	r1, [r7, #24]
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	617b      	str	r3, [r7, #20]
   return(result);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e3      	bne.n	8007cf4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f851 	bl	8007de0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d3e:	e023      	b.n	8007d88 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d009      	beq.n	8007d60 <HAL_UART_IRQHandler+0x524>
 8007d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fa8d 	bl	8008278 <UART_Transmit_IT>
    return;
 8007d5e:	e014      	b.n	8007d8a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00e      	beq.n	8007d8a <HAL_UART_IRQHandler+0x54e>
 8007d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 facd 	bl	8008318 <UART_EndTransmit_IT>
    return;
 8007d7e:	e004      	b.n	8007d8a <HAL_UART_IRQHandler+0x54e>
    return;
 8007d80:	bf00      	nop
 8007d82:	e002      	b.n	8007d8a <HAL_UART_IRQHandler+0x54e>
      return;
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <HAL_UART_IRQHandler+0x54e>
      return;
 8007d88:	bf00      	nop
  }
}
 8007d8a:	37e8      	adds	r7, #232	@ 0xe8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b09c      	sub	sp, #112	@ 0x70
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d172      	bne.n	8007efa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007e14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e16:	2200      	movs	r2, #0
 8007e18:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	330c      	adds	r3, #12
 8007e38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007e3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e3c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1e5      	bne.n	8007e1a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	3314      	adds	r3, #20
 8007e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e60:	f023 0301 	bic.w	r3, r3, #1
 8007e64:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3314      	adds	r3, #20
 8007e6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e5      	bne.n	8007e4e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3314      	adds	r3, #20
 8007e88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	623b      	str	r3, [r7, #32]
   return(result);
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3314      	adds	r3, #20
 8007ea0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ea2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e5      	bne.n	8007e82 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d119      	bne.n	8007efa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	330c      	adds	r3, #12
 8007ecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f023 0310 	bic.w	r3, r3, #16
 8007edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007ee6:	61fa      	str	r2, [r7, #28]
 8007ee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	69b9      	ldr	r1, [r7, #24]
 8007eec:	69fa      	ldr	r2, [r7, #28]
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e5      	bne.n	8007ec6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007efc:	2200      	movs	r2, #0
 8007efe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d106      	bne.n	8007f16 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f10:	f7ff ff66 	bl	8007de0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f14:	e002      	b.n	8007f1c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007f16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f18:	f7ff ff44 	bl	8007da4 <HAL_UART_RxCpltCallback>
}
 8007f1c:	bf00      	nop
 8007f1e:	3770      	adds	r7, #112	@ 0x70
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f30:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d108      	bne.n	8007f52 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f44:	085b      	lsrs	r3, r3, #1
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	4619      	mov	r1, r3
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff ff48 	bl	8007de0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f50:	e002      	b.n	8007f58 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f7ff ff30 	bl	8007db8 <HAL_UART_RxHalfCpltCallback>
}
 8007f58:	bf00      	nop
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f70:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f7c:	2b80      	cmp	r3, #128	@ 0x80
 8007f7e:	bf0c      	ite	eq
 8007f80:	2301      	moveq	r3, #1
 8007f82:	2300      	movne	r3, #0
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b21      	cmp	r3, #33	@ 0x21
 8007f92:	d108      	bne.n	8007fa6 <UART_DMAError+0x46>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007fa0:	68b8      	ldr	r0, [r7, #8]
 8007fa2:	f000 f8cd 	bl	8008140 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fb0:	2b40      	cmp	r3, #64	@ 0x40
 8007fb2:	bf0c      	ite	eq
 8007fb4:	2301      	moveq	r3, #1
 8007fb6:	2300      	movne	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b22      	cmp	r3, #34	@ 0x22
 8007fc6:	d108      	bne.n	8007fda <UART_DMAError+0x7a>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007fd4:	68b8      	ldr	r0, [r7, #8]
 8007fd6:	f000 f8db 	bl	8008190 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fde:	f043 0210 	orr.w	r2, r3, #16
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fe6:	68b8      	ldr	r0, [r7, #8]
 8007fe8:	f7ff fef0 	bl	8007dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fec:	bf00      	nop
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b098      	sub	sp, #96	@ 0x60
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2222      	movs	r2, #34	@ 0x22
 8008018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008020:	4a44      	ldr	r2, [pc, #272]	@ (8008134 <UART_Start_Receive_DMA+0x140>)
 8008022:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008028:	4a43      	ldr	r2, [pc, #268]	@ (8008138 <UART_Start_Receive_DMA+0x144>)
 800802a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008030:	4a42      	ldr	r2, [pc, #264]	@ (800813c <UART_Start_Receive_DMA+0x148>)
 8008032:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008038:	2200      	movs	r2, #0
 800803a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800803c:	f107 0308 	add.w	r3, r7, #8
 8008040:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3304      	adds	r3, #4
 800804c:	4619      	mov	r1, r3
 800804e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	f7fc f80e 	bl	8004074 <HAL_DMA_Start_IT>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d008      	beq.n	8008070 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2210      	movs	r2, #16
 8008062:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e05d      	b.n	800812c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008070:	2300      	movs	r3, #0
 8008072:	613b      	str	r3, [r7, #16]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	613b      	str	r3, [r7, #16]
 8008084:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d019      	beq.n	80080c2 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800809e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	330c      	adds	r3, #12
 80080ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80080b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80080b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80080bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e5      	bne.n	800808e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3314      	adds	r3, #20
 80080c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d4:	f043 0301 	orr.w	r3, r3, #1
 80080d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3314      	adds	r3, #20
 80080e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80080e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80080e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e5      	bne.n	80080c2 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3314      	adds	r3, #20
 80080fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	617b      	str	r3, [r7, #20]
   return(result);
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800810c:	653b      	str	r3, [r7, #80]	@ 0x50
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3314      	adds	r3, #20
 8008114:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008116:	627a      	str	r2, [r7, #36]	@ 0x24
 8008118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	6a39      	ldr	r1, [r7, #32]
 800811c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	61fb      	str	r3, [r7, #28]
   return(result);
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e5      	bne.n	80080f6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3760      	adds	r7, #96	@ 0x60
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	08007df9 	.word	0x08007df9
 8008138:	08007f25 	.word	0x08007f25
 800813c:	08007f61 	.word	0x08007f61

08008140 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	@ 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
 800814e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	60bb      	str	r3, [r7, #8]
   return(result);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800815e:	61fb      	str	r3, [r7, #28]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	61ba      	str	r2, [r7, #24]
 800816a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	6979      	ldr	r1, [r7, #20]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	e841 2300 	strex	r3, r2, [r1]
 8008174:	613b      	str	r3, [r7, #16]
   return(result);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e5      	bne.n	8008148 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008184:	bf00      	nop
 8008186:	3724      	adds	r7, #36	@ 0x24
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b095      	sub	sp, #84	@ 0x54
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	330c      	adds	r3, #12
 800819e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a2:	e853 3f00 	ldrex	r3, [r3]
 80081a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	330c      	adds	r3, #12
 80081b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80081ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081c0:	e841 2300 	strex	r3, r2, [r1]
 80081c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e5      	bne.n	8008198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3314      	adds	r3, #20
 80081d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	61fb      	str	r3, [r7, #28]
   return(result);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	f023 0301 	bic.w	r3, r3, #1
 80081e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3314      	adds	r3, #20
 80081ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e5      	bne.n	80081cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008204:	2b01      	cmp	r3, #1
 8008206:	d119      	bne.n	800823c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	330c      	adds	r3, #12
 800820e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	e853 3f00 	ldrex	r3, [r3]
 8008216:	60bb      	str	r3, [r7, #8]
   return(result);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f023 0310 	bic.w	r3, r3, #16
 800821e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	330c      	adds	r3, #12
 8008226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008228:	61ba      	str	r2, [r7, #24]
 800822a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6979      	ldr	r1, [r7, #20]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	613b      	str	r3, [r7, #16]
   return(result);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e5      	bne.n	8008208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800824a:	bf00      	nop
 800824c:	3754      	adds	r7, #84	@ 0x54
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7ff fdae 	bl	8007dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b21      	cmp	r3, #33	@ 0x21
 800828a:	d13e      	bne.n	800830a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008294:	d114      	bne.n	80082c0 <UART_Transmit_IT+0x48>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d110      	bne.n	80082c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	1c9a      	adds	r2, r3, #2
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	621a      	str	r2, [r3, #32]
 80082be:	e008      	b.n	80082d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	1c59      	adds	r1, r3, #1
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6211      	str	r1, [r2, #32]
 80082ca:	781a      	ldrb	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29b      	uxth	r3, r3
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	4619      	mov	r1, r3
 80082e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10f      	bne.n	8008306 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008304:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	e000      	b.n	800830c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800830a:	2302      	movs	r3, #2
  }
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800832e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff fd29 	bl	8007d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b08c      	sub	sp, #48	@ 0x30
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008350:	2300      	movs	r3, #0
 8008352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008354:	2300      	movs	r3, #0
 8008356:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b22      	cmp	r3, #34	@ 0x22
 8008362:	f040 80aa 	bne.w	80084ba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800836e:	d115      	bne.n	800839c <UART_Receive_IT+0x54>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d111      	bne.n	800839c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	b29b      	uxth	r3, r3
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	b29a      	uxth	r2, r3
 800838c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008394:	1c9a      	adds	r2, r3, #2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	629a      	str	r2, [r3, #40]	@ 0x28
 800839a:	e024      	b.n	80083e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083aa:	d007      	beq.n	80083bc <UART_Receive_IT+0x74>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <UART_Receive_IT+0x82>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c6:	701a      	strb	r2, [r3, #0]
 80083c8:	e008      	b.n	80083dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4619      	mov	r1, r3
 80083f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d15d      	bne.n	80084b6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0220 	bic.w	r2, r2, #32
 8008408:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	695a      	ldr	r2, [r3, #20]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0201 	bic.w	r2, r2, #1
 8008428:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800843c:	2b01      	cmp	r3, #1
 800843e:	d135      	bne.n	80084ac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	330c      	adds	r3, #12
 800844c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	613b      	str	r3, [r7, #16]
   return(result);
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f023 0310 	bic.w	r3, r3, #16
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	330c      	adds	r3, #12
 8008464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008466:	623a      	str	r2, [r7, #32]
 8008468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	69f9      	ldr	r1, [r7, #28]
 800846c:	6a3a      	ldr	r2, [r7, #32]
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	61bb      	str	r3, [r7, #24]
   return(result);
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e5      	bne.n	8008446 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0310 	and.w	r3, r3, #16
 8008484:	2b10      	cmp	r3, #16
 8008486:	d10a      	bne.n	800849e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff fc9b 	bl	8007de0 <HAL_UARTEx_RxEventCallback>
 80084aa:	e002      	b.n	80084b2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff fc79 	bl	8007da4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e002      	b.n	80084bc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	e000      	b.n	80084bc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084ba:	2302      	movs	r3, #2
  }
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3730      	adds	r7, #48	@ 0x30
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084c8:	b0c0      	sub	sp, #256	@ 0x100
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80084dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e0:	68d9      	ldr	r1, [r3, #12]
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	ea40 0301 	orr.w	r3, r0, r1
 80084ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	431a      	orrs	r2, r3
 8008504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800851c:	f021 010c 	bic.w	r1, r1, #12
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800852a:	430b      	orrs	r3, r1
 800852c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800852e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800853a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800853e:	6999      	ldr	r1, [r3, #24]
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	ea40 0301 	orr.w	r3, r0, r1
 800854a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b8f      	ldr	r3, [pc, #572]	@ (8008790 <UART_SetConfig+0x2cc>)
 8008554:	429a      	cmp	r2, r3
 8008556:	d005      	beq.n	8008564 <UART_SetConfig+0xa0>
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4b8d      	ldr	r3, [pc, #564]	@ (8008794 <UART_SetConfig+0x2d0>)
 8008560:	429a      	cmp	r2, r3
 8008562:	d104      	bne.n	800856e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008564:	f7fc ff14 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
 8008568:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800856c:	e003      	b.n	8008576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800856e:	f7fc fefb 	bl	8005368 <HAL_RCC_GetPCLK1Freq>
 8008572:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008580:	f040 810c 	bne.w	800879c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008588:	2200      	movs	r2, #0
 800858a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800858e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008596:	4622      	mov	r2, r4
 8008598:	462b      	mov	r3, r5
 800859a:	1891      	adds	r1, r2, r2
 800859c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800859e:	415b      	adcs	r3, r3
 80085a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80085a6:	4621      	mov	r1, r4
 80085a8:	eb12 0801 	adds.w	r8, r2, r1
 80085ac:	4629      	mov	r1, r5
 80085ae:	eb43 0901 	adc.w	r9, r3, r1
 80085b2:	f04f 0200 	mov.w	r2, #0
 80085b6:	f04f 0300 	mov.w	r3, #0
 80085ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085c6:	4690      	mov	r8, r2
 80085c8:	4699      	mov	r9, r3
 80085ca:	4623      	mov	r3, r4
 80085cc:	eb18 0303 	adds.w	r3, r8, r3
 80085d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085d4:	462b      	mov	r3, r5
 80085d6:	eb49 0303 	adc.w	r3, r9, r3
 80085da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80085ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80085f2:	460b      	mov	r3, r1
 80085f4:	18db      	adds	r3, r3, r3
 80085f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80085f8:	4613      	mov	r3, r2
 80085fa:	eb42 0303 	adc.w	r3, r2, r3
 80085fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8008600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008608:	f7f8 fa84 	bl	8000b14 <__aeabi_uldivmod>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4b61      	ldr	r3, [pc, #388]	@ (8008798 <UART_SetConfig+0x2d4>)
 8008612:	fba3 2302 	umull	r2, r3, r3, r2
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	011c      	lsls	r4, r3, #4
 800861a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800861e:	2200      	movs	r2, #0
 8008620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008624:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800862c:	4642      	mov	r2, r8
 800862e:	464b      	mov	r3, r9
 8008630:	1891      	adds	r1, r2, r2
 8008632:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008634:	415b      	adcs	r3, r3
 8008636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800863c:	4641      	mov	r1, r8
 800863e:	eb12 0a01 	adds.w	sl, r2, r1
 8008642:	4649      	mov	r1, r9
 8008644:	eb43 0b01 	adc.w	fp, r3, r1
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	f04f 0300 	mov.w	r3, #0
 8008650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800865c:	4692      	mov	sl, r2
 800865e:	469b      	mov	fp, r3
 8008660:	4643      	mov	r3, r8
 8008662:	eb1a 0303 	adds.w	r3, sl, r3
 8008666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800866a:	464b      	mov	r3, r9
 800866c:	eb4b 0303 	adc.w	r3, fp, r3
 8008670:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008680:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008688:	460b      	mov	r3, r1
 800868a:	18db      	adds	r3, r3, r3
 800868c:	643b      	str	r3, [r7, #64]	@ 0x40
 800868e:	4613      	mov	r3, r2
 8008690:	eb42 0303 	adc.w	r3, r2, r3
 8008694:	647b      	str	r3, [r7, #68]	@ 0x44
 8008696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800869a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800869e:	f7f8 fa39 	bl	8000b14 <__aeabi_uldivmod>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4611      	mov	r1, r2
 80086a8:	4b3b      	ldr	r3, [pc, #236]	@ (8008798 <UART_SetConfig+0x2d4>)
 80086aa:	fba3 2301 	umull	r2, r3, r3, r1
 80086ae:	095b      	lsrs	r3, r3, #5
 80086b0:	2264      	movs	r2, #100	@ 0x64
 80086b2:	fb02 f303 	mul.w	r3, r2, r3
 80086b6:	1acb      	subs	r3, r1, r3
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80086be:	4b36      	ldr	r3, [pc, #216]	@ (8008798 <UART_SetConfig+0x2d4>)
 80086c0:	fba3 2302 	umull	r2, r3, r3, r2
 80086c4:	095b      	lsrs	r3, r3, #5
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80086cc:	441c      	add	r4, r3
 80086ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80086dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80086e0:	4642      	mov	r2, r8
 80086e2:	464b      	mov	r3, r9
 80086e4:	1891      	adds	r1, r2, r2
 80086e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80086e8:	415b      	adcs	r3, r3
 80086ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80086f0:	4641      	mov	r1, r8
 80086f2:	1851      	adds	r1, r2, r1
 80086f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80086f6:	4649      	mov	r1, r9
 80086f8:	414b      	adcs	r3, r1
 80086fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80086fc:	f04f 0200 	mov.w	r2, #0
 8008700:	f04f 0300 	mov.w	r3, #0
 8008704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008708:	4659      	mov	r1, fp
 800870a:	00cb      	lsls	r3, r1, #3
 800870c:	4651      	mov	r1, sl
 800870e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008712:	4651      	mov	r1, sl
 8008714:	00ca      	lsls	r2, r1, #3
 8008716:	4610      	mov	r0, r2
 8008718:	4619      	mov	r1, r3
 800871a:	4603      	mov	r3, r0
 800871c:	4642      	mov	r2, r8
 800871e:	189b      	adds	r3, r3, r2
 8008720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008724:	464b      	mov	r3, r9
 8008726:	460a      	mov	r2, r1
 8008728:	eb42 0303 	adc.w	r3, r2, r3
 800872c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800873c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008744:	460b      	mov	r3, r1
 8008746:	18db      	adds	r3, r3, r3
 8008748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800874a:	4613      	mov	r3, r2
 800874c:	eb42 0303 	adc.w	r3, r2, r3
 8008750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800875a:	f7f8 f9db 	bl	8000b14 <__aeabi_uldivmod>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4b0d      	ldr	r3, [pc, #52]	@ (8008798 <UART_SetConfig+0x2d4>)
 8008764:	fba3 1302 	umull	r1, r3, r3, r2
 8008768:	095b      	lsrs	r3, r3, #5
 800876a:	2164      	movs	r1, #100	@ 0x64
 800876c:	fb01 f303 	mul.w	r3, r1, r3
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	3332      	adds	r3, #50	@ 0x32
 8008776:	4a08      	ldr	r2, [pc, #32]	@ (8008798 <UART_SetConfig+0x2d4>)
 8008778:	fba2 2303 	umull	r2, r3, r2, r3
 800877c:	095b      	lsrs	r3, r3, #5
 800877e:	f003 0207 	and.w	r2, r3, #7
 8008782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4422      	add	r2, r4
 800878a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800878c:	e106      	b.n	800899c <UART_SetConfig+0x4d8>
 800878e:	bf00      	nop
 8008790:	40011000 	.word	0x40011000
 8008794:	40011400 	.word	0x40011400
 8008798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800879c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80087aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80087ae:	4642      	mov	r2, r8
 80087b0:	464b      	mov	r3, r9
 80087b2:	1891      	adds	r1, r2, r2
 80087b4:	6239      	str	r1, [r7, #32]
 80087b6:	415b      	adcs	r3, r3
 80087b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087be:	4641      	mov	r1, r8
 80087c0:	1854      	adds	r4, r2, r1
 80087c2:	4649      	mov	r1, r9
 80087c4:	eb43 0501 	adc.w	r5, r3, r1
 80087c8:	f04f 0200 	mov.w	r2, #0
 80087cc:	f04f 0300 	mov.w	r3, #0
 80087d0:	00eb      	lsls	r3, r5, #3
 80087d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087d6:	00e2      	lsls	r2, r4, #3
 80087d8:	4614      	mov	r4, r2
 80087da:	461d      	mov	r5, r3
 80087dc:	4643      	mov	r3, r8
 80087de:	18e3      	adds	r3, r4, r3
 80087e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087e4:	464b      	mov	r3, r9
 80087e6:	eb45 0303 	adc.w	r3, r5, r3
 80087ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087fe:	f04f 0200 	mov.w	r2, #0
 8008802:	f04f 0300 	mov.w	r3, #0
 8008806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800880a:	4629      	mov	r1, r5
 800880c:	008b      	lsls	r3, r1, #2
 800880e:	4621      	mov	r1, r4
 8008810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008814:	4621      	mov	r1, r4
 8008816:	008a      	lsls	r2, r1, #2
 8008818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800881c:	f7f8 f97a 	bl	8000b14 <__aeabi_uldivmod>
 8008820:	4602      	mov	r2, r0
 8008822:	460b      	mov	r3, r1
 8008824:	4b60      	ldr	r3, [pc, #384]	@ (80089a8 <UART_SetConfig+0x4e4>)
 8008826:	fba3 2302 	umull	r2, r3, r3, r2
 800882a:	095b      	lsrs	r3, r3, #5
 800882c:	011c      	lsls	r4, r3, #4
 800882e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008832:	2200      	movs	r2, #0
 8008834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008838:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800883c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008840:	4642      	mov	r2, r8
 8008842:	464b      	mov	r3, r9
 8008844:	1891      	adds	r1, r2, r2
 8008846:	61b9      	str	r1, [r7, #24]
 8008848:	415b      	adcs	r3, r3
 800884a:	61fb      	str	r3, [r7, #28]
 800884c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008850:	4641      	mov	r1, r8
 8008852:	1851      	adds	r1, r2, r1
 8008854:	6139      	str	r1, [r7, #16]
 8008856:	4649      	mov	r1, r9
 8008858:	414b      	adcs	r3, r1
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008868:	4659      	mov	r1, fp
 800886a:	00cb      	lsls	r3, r1, #3
 800886c:	4651      	mov	r1, sl
 800886e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008872:	4651      	mov	r1, sl
 8008874:	00ca      	lsls	r2, r1, #3
 8008876:	4610      	mov	r0, r2
 8008878:	4619      	mov	r1, r3
 800887a:	4603      	mov	r3, r0
 800887c:	4642      	mov	r2, r8
 800887e:	189b      	adds	r3, r3, r2
 8008880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008884:	464b      	mov	r3, r9
 8008886:	460a      	mov	r2, r1
 8008888:	eb42 0303 	adc.w	r3, r2, r3
 800888c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800889a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	f04f 0300 	mov.w	r3, #0
 80088a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80088a8:	4649      	mov	r1, r9
 80088aa:	008b      	lsls	r3, r1, #2
 80088ac:	4641      	mov	r1, r8
 80088ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088b2:	4641      	mov	r1, r8
 80088b4:	008a      	lsls	r2, r1, #2
 80088b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80088ba:	f7f8 f92b 	bl	8000b14 <__aeabi_uldivmod>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	4b38      	ldr	r3, [pc, #224]	@ (80089a8 <UART_SetConfig+0x4e4>)
 80088c6:	fba3 2301 	umull	r2, r3, r3, r1
 80088ca:	095b      	lsrs	r3, r3, #5
 80088cc:	2264      	movs	r2, #100	@ 0x64
 80088ce:	fb02 f303 	mul.w	r3, r2, r3
 80088d2:	1acb      	subs	r3, r1, r3
 80088d4:	011b      	lsls	r3, r3, #4
 80088d6:	3332      	adds	r3, #50	@ 0x32
 80088d8:	4a33      	ldr	r2, [pc, #204]	@ (80089a8 <UART_SetConfig+0x4e4>)
 80088da:	fba2 2303 	umull	r2, r3, r2, r3
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80088e4:	441c      	add	r4, r3
 80088e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088ea:	2200      	movs	r2, #0
 80088ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80088ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80088f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80088f4:	4642      	mov	r2, r8
 80088f6:	464b      	mov	r3, r9
 80088f8:	1891      	adds	r1, r2, r2
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	415b      	adcs	r3, r3
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008904:	4641      	mov	r1, r8
 8008906:	1851      	adds	r1, r2, r1
 8008908:	6039      	str	r1, [r7, #0]
 800890a:	4649      	mov	r1, r9
 800890c:	414b      	adcs	r3, r1
 800890e:	607b      	str	r3, [r7, #4]
 8008910:	f04f 0200 	mov.w	r2, #0
 8008914:	f04f 0300 	mov.w	r3, #0
 8008918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800891c:	4659      	mov	r1, fp
 800891e:	00cb      	lsls	r3, r1, #3
 8008920:	4651      	mov	r1, sl
 8008922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008926:	4651      	mov	r1, sl
 8008928:	00ca      	lsls	r2, r1, #3
 800892a:	4610      	mov	r0, r2
 800892c:	4619      	mov	r1, r3
 800892e:	4603      	mov	r3, r0
 8008930:	4642      	mov	r2, r8
 8008932:	189b      	adds	r3, r3, r2
 8008934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008936:	464b      	mov	r3, r9
 8008938:	460a      	mov	r2, r1
 800893a:	eb42 0303 	adc.w	r3, r2, r3
 800893e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	663b      	str	r3, [r7, #96]	@ 0x60
 800894a:	667a      	str	r2, [r7, #100]	@ 0x64
 800894c:	f04f 0200 	mov.w	r2, #0
 8008950:	f04f 0300 	mov.w	r3, #0
 8008954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008958:	4649      	mov	r1, r9
 800895a:	008b      	lsls	r3, r1, #2
 800895c:	4641      	mov	r1, r8
 800895e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008962:	4641      	mov	r1, r8
 8008964:	008a      	lsls	r2, r1, #2
 8008966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800896a:	f7f8 f8d3 	bl	8000b14 <__aeabi_uldivmod>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4b0d      	ldr	r3, [pc, #52]	@ (80089a8 <UART_SetConfig+0x4e4>)
 8008974:	fba3 1302 	umull	r1, r3, r3, r2
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	2164      	movs	r1, #100	@ 0x64
 800897c:	fb01 f303 	mul.w	r3, r1, r3
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	011b      	lsls	r3, r3, #4
 8008984:	3332      	adds	r3, #50	@ 0x32
 8008986:	4a08      	ldr	r2, [pc, #32]	@ (80089a8 <UART_SetConfig+0x4e4>)
 8008988:	fba2 2303 	umull	r2, r3, r2, r3
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	f003 020f 	and.w	r2, r3, #15
 8008992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4422      	add	r2, r4
 800899a:	609a      	str	r2, [r3, #8]
}
 800899c:	bf00      	nop
 800899e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80089a2:	46bd      	mov	sp, r7
 80089a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089a8:	51eb851f 	.word	0x51eb851f

080089ac <memset>:
 80089ac:	4402      	add	r2, r0
 80089ae:	4603      	mov	r3, r0
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d100      	bne.n	80089b6 <memset+0xa>
 80089b4:	4770      	bx	lr
 80089b6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ba:	e7f9      	b.n	80089b0 <memset+0x4>

080089bc <__errno>:
 80089bc:	4b01      	ldr	r3, [pc, #4]	@ (80089c4 <__errno+0x8>)
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000010 	.word	0x20000010

080089c8 <__libc_init_array>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	4d0d      	ldr	r5, [pc, #52]	@ (8008a00 <__libc_init_array+0x38>)
 80089cc:	4c0d      	ldr	r4, [pc, #52]	@ (8008a04 <__libc_init_array+0x3c>)
 80089ce:	1b64      	subs	r4, r4, r5
 80089d0:	10a4      	asrs	r4, r4, #2
 80089d2:	2600      	movs	r6, #0
 80089d4:	42a6      	cmp	r6, r4
 80089d6:	d109      	bne.n	80089ec <__libc_init_array+0x24>
 80089d8:	4d0b      	ldr	r5, [pc, #44]	@ (8008a08 <__libc_init_array+0x40>)
 80089da:	4c0c      	ldr	r4, [pc, #48]	@ (8008a0c <__libc_init_array+0x44>)
 80089dc:	f001 f83e 	bl	8009a5c <_init>
 80089e0:	1b64      	subs	r4, r4, r5
 80089e2:	10a4      	asrs	r4, r4, #2
 80089e4:	2600      	movs	r6, #0
 80089e6:	42a6      	cmp	r6, r4
 80089e8:	d105      	bne.n	80089f6 <__libc_init_array+0x2e>
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f0:	4798      	blx	r3
 80089f2:	3601      	adds	r6, #1
 80089f4:	e7ee      	b.n	80089d4 <__libc_init_array+0xc>
 80089f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fa:	4798      	blx	r3
 80089fc:	3601      	adds	r6, #1
 80089fe:	e7f2      	b.n	80089e6 <__libc_init_array+0x1e>
 8008a00:	08009ea4 	.word	0x08009ea4
 8008a04:	08009ea4 	.word	0x08009ea4
 8008a08:	08009ea4 	.word	0x08009ea4
 8008a0c:	08009ea8 	.word	0x08009ea8

08008a10 <memcpy>:
 8008a10:	440a      	add	r2, r1
 8008a12:	4291      	cmp	r1, r2
 8008a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a18:	d100      	bne.n	8008a1c <memcpy+0xc>
 8008a1a:	4770      	bx	lr
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a26:	4291      	cmp	r1, r2
 8008a28:	d1f9      	bne.n	8008a1e <memcpy+0xe>
 8008a2a:	bd10      	pop	{r4, pc}

08008a2c <atan2f>:
 8008a2c:	f000 ba58 	b.w	8008ee0 <__ieee754_atan2f>

08008a30 <sqrtf>:
 8008a30:	b508      	push	{r3, lr}
 8008a32:	ed2d 8b02 	vpush	{d8}
 8008a36:	eeb0 8a40 	vmov.f32	s16, s0
 8008a3a:	f000 f8cd 	bl	8008bd8 <__ieee754_sqrtf>
 8008a3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a46:	d60c      	bvs.n	8008a62 <sqrtf+0x32>
 8008a48:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008a68 <sqrtf+0x38>
 8008a4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a54:	d505      	bpl.n	8008a62 <sqrtf+0x32>
 8008a56:	f7ff ffb1 	bl	80089bc <__errno>
 8008a5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008a5e:	2321      	movs	r3, #33	@ 0x21
 8008a60:	6003      	str	r3, [r0, #0]
 8008a62:	ecbd 8b02 	vpop	{d8}
 8008a66:	bd08      	pop	{r3, pc}
 8008a68:	00000000 	.word	0x00000000

08008a6c <cosf>:
 8008a6c:	ee10 3a10 	vmov	r3, s0
 8008a70:	b507      	push	{r0, r1, r2, lr}
 8008a72:	4a1e      	ldr	r2, [pc, #120]	@ (8008aec <cosf+0x80>)
 8008a74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d806      	bhi.n	8008a8a <cosf+0x1e>
 8008a7c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008af0 <cosf+0x84>
 8008a80:	b003      	add	sp, #12
 8008a82:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a86:	f000 b8ab 	b.w	8008be0 <__kernel_cosf>
 8008a8a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008a8e:	d304      	bcc.n	8008a9a <cosf+0x2e>
 8008a90:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008a94:	b003      	add	sp, #12
 8008a96:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a9a:	4668      	mov	r0, sp
 8008a9c:	f000 fac0 	bl	8009020 <__ieee754_rem_pio2f>
 8008aa0:	f000 0003 	and.w	r0, r0, #3
 8008aa4:	2801      	cmp	r0, #1
 8008aa6:	d009      	beq.n	8008abc <cosf+0x50>
 8008aa8:	2802      	cmp	r0, #2
 8008aaa:	d010      	beq.n	8008ace <cosf+0x62>
 8008aac:	b9b0      	cbnz	r0, 8008adc <cosf+0x70>
 8008aae:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ab2:	ed9d 0a00 	vldr	s0, [sp]
 8008ab6:	f000 f893 	bl	8008be0 <__kernel_cosf>
 8008aba:	e7eb      	b.n	8008a94 <cosf+0x28>
 8008abc:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ac0:	ed9d 0a00 	vldr	s0, [sp]
 8008ac4:	f000 f8e4 	bl	8008c90 <__kernel_sinf>
 8008ac8:	eeb1 0a40 	vneg.f32	s0, s0
 8008acc:	e7e2      	b.n	8008a94 <cosf+0x28>
 8008ace:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ad2:	ed9d 0a00 	vldr	s0, [sp]
 8008ad6:	f000 f883 	bl	8008be0 <__kernel_cosf>
 8008ada:	e7f5      	b.n	8008ac8 <cosf+0x5c>
 8008adc:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ae0:	ed9d 0a00 	vldr	s0, [sp]
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	f000 f8d3 	bl	8008c90 <__kernel_sinf>
 8008aea:	e7d3      	b.n	8008a94 <cosf+0x28>
 8008aec:	3f490fd8 	.word	0x3f490fd8
 8008af0:	00000000 	.word	0x00000000

08008af4 <sinf>:
 8008af4:	ee10 3a10 	vmov	r3, s0
 8008af8:	b507      	push	{r0, r1, r2, lr}
 8008afa:	4a1f      	ldr	r2, [pc, #124]	@ (8008b78 <sinf+0x84>)
 8008afc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d807      	bhi.n	8008b14 <sinf+0x20>
 8008b04:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8008b7c <sinf+0x88>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	b003      	add	sp, #12
 8008b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b10:	f000 b8be 	b.w	8008c90 <__kernel_sinf>
 8008b14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008b18:	d304      	bcc.n	8008b24 <sinf+0x30>
 8008b1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008b1e:	b003      	add	sp, #12
 8008b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b24:	4668      	mov	r0, sp
 8008b26:	f000 fa7b 	bl	8009020 <__ieee754_rem_pio2f>
 8008b2a:	f000 0003 	and.w	r0, r0, #3
 8008b2e:	2801      	cmp	r0, #1
 8008b30:	d00a      	beq.n	8008b48 <sinf+0x54>
 8008b32:	2802      	cmp	r0, #2
 8008b34:	d00f      	beq.n	8008b56 <sinf+0x62>
 8008b36:	b9c0      	cbnz	r0, 8008b6a <sinf+0x76>
 8008b38:	eddd 0a01 	vldr	s1, [sp, #4]
 8008b3c:	ed9d 0a00 	vldr	s0, [sp]
 8008b40:	2001      	movs	r0, #1
 8008b42:	f000 f8a5 	bl	8008c90 <__kernel_sinf>
 8008b46:	e7ea      	b.n	8008b1e <sinf+0x2a>
 8008b48:	eddd 0a01 	vldr	s1, [sp, #4]
 8008b4c:	ed9d 0a00 	vldr	s0, [sp]
 8008b50:	f000 f846 	bl	8008be0 <__kernel_cosf>
 8008b54:	e7e3      	b.n	8008b1e <sinf+0x2a>
 8008b56:	eddd 0a01 	vldr	s1, [sp, #4]
 8008b5a:	ed9d 0a00 	vldr	s0, [sp]
 8008b5e:	2001      	movs	r0, #1
 8008b60:	f000 f896 	bl	8008c90 <__kernel_sinf>
 8008b64:	eeb1 0a40 	vneg.f32	s0, s0
 8008b68:	e7d9      	b.n	8008b1e <sinf+0x2a>
 8008b6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8008b6e:	ed9d 0a00 	vldr	s0, [sp]
 8008b72:	f000 f835 	bl	8008be0 <__kernel_cosf>
 8008b76:	e7f5      	b.n	8008b64 <sinf+0x70>
 8008b78:	3f490fd8 	.word	0x3f490fd8
 8008b7c:	00000000 	.word	0x00000000

08008b80 <tanf>:
 8008b80:	ee10 3a10 	vmov	r3, s0
 8008b84:	b507      	push	{r0, r1, r2, lr}
 8008b86:	4a12      	ldr	r2, [pc, #72]	@ (8008bd0 <tanf+0x50>)
 8008b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d807      	bhi.n	8008ba0 <tanf+0x20>
 8008b90:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8008bd4 <tanf+0x54>
 8008b94:	2001      	movs	r0, #1
 8008b96:	b003      	add	sp, #12
 8008b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b9c:	f000 b8c0 	b.w	8008d20 <__kernel_tanf>
 8008ba0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008ba4:	d304      	bcc.n	8008bb0 <tanf+0x30>
 8008ba6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008baa:	b003      	add	sp, #12
 8008bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bb0:	4668      	mov	r0, sp
 8008bb2:	f000 fa35 	bl	8009020 <__ieee754_rem_pio2f>
 8008bb6:	0040      	lsls	r0, r0, #1
 8008bb8:	f000 0002 	and.w	r0, r0, #2
 8008bbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8008bc0:	ed9d 0a00 	vldr	s0, [sp]
 8008bc4:	f1c0 0001 	rsb	r0, r0, #1
 8008bc8:	f000 f8aa 	bl	8008d20 <__kernel_tanf>
 8008bcc:	e7ed      	b.n	8008baa <tanf+0x2a>
 8008bce:	bf00      	nop
 8008bd0:	3f490fda 	.word	0x3f490fda
 8008bd4:	00000000 	.word	0x00000000

08008bd8 <__ieee754_sqrtf>:
 8008bd8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008bdc:	4770      	bx	lr
	...

08008be0 <__kernel_cosf>:
 8008be0:	ee10 3a10 	vmov	r3, s0
 8008be4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008be8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008bec:	eef0 6a40 	vmov.f32	s13, s0
 8008bf0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008bf4:	d204      	bcs.n	8008c00 <__kernel_cosf+0x20>
 8008bf6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8008bfa:	ee17 2a90 	vmov	r2, s15
 8008bfe:	b342      	cbz	r2, 8008c52 <__kernel_cosf+0x72>
 8008c00:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008c04:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008c70 <__kernel_cosf+0x90>
 8008c08:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008c74 <__kernel_cosf+0x94>
 8008c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8008c78 <__kernel_cosf+0x98>)
 8008c0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008c12:	4293      	cmp	r3, r2
 8008c14:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008c7c <__kernel_cosf+0x9c>
 8008c18:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008c1c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008c80 <__kernel_cosf+0xa0>
 8008c20:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008c24:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008c84 <__kernel_cosf+0xa4>
 8008c28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008c2c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008c88 <__kernel_cosf+0xa8>
 8008c30:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008c34:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008c38:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008c3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008c40:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c48:	d804      	bhi.n	8008c54 <__kernel_cosf+0x74>
 8008c4a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008c4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c52:	4770      	bx	lr
 8008c54:	4a0d      	ldr	r2, [pc, #52]	@ (8008c8c <__kernel_cosf+0xac>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	bf9a      	itte	ls
 8008c5a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8008c5e:	ee07 3a10 	vmovls	s14, r3
 8008c62:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008c66:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008c6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c6e:	e7ec      	b.n	8008c4a <__kernel_cosf+0x6a>
 8008c70:	ad47d74e 	.word	0xad47d74e
 8008c74:	310f74f6 	.word	0x310f74f6
 8008c78:	3e999999 	.word	0x3e999999
 8008c7c:	b493f27c 	.word	0xb493f27c
 8008c80:	37d00d01 	.word	0x37d00d01
 8008c84:	bab60b61 	.word	0xbab60b61
 8008c88:	3d2aaaab 	.word	0x3d2aaaab
 8008c8c:	3f480000 	.word	0x3f480000

08008c90 <__kernel_sinf>:
 8008c90:	ee10 3a10 	vmov	r3, s0
 8008c94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008c9c:	d204      	bcs.n	8008ca8 <__kernel_sinf+0x18>
 8008c9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008ca2:	ee17 3a90 	vmov	r3, s15
 8008ca6:	b35b      	cbz	r3, 8008d00 <__kernel_sinf+0x70>
 8008ca8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008cac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008d04 <__kernel_sinf+0x74>
 8008cb0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008d08 <__kernel_sinf+0x78>
 8008cb4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008cb8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8008d0c <__kernel_sinf+0x7c>
 8008cbc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008cc0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008d10 <__kernel_sinf+0x80>
 8008cc4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008cc8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008d14 <__kernel_sinf+0x84>
 8008ccc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008cd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008cd4:	b930      	cbnz	r0, 8008ce4 <__kernel_sinf+0x54>
 8008cd6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008d18 <__kernel_sinf+0x88>
 8008cda:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008cde:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008ce2:	4770      	bx	lr
 8008ce4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008ce8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008cec:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008cf0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008cf4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008d1c <__kernel_sinf+0x8c>
 8008cf8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008cfc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	2f2ec9d3 	.word	0x2f2ec9d3
 8008d08:	b2d72f34 	.word	0xb2d72f34
 8008d0c:	3638ef1b 	.word	0x3638ef1b
 8008d10:	b9500d01 	.word	0xb9500d01
 8008d14:	3c088889 	.word	0x3c088889
 8008d18:	be2aaaab 	.word	0xbe2aaaab
 8008d1c:	3e2aaaab 	.word	0x3e2aaaab

08008d20 <__kernel_tanf>:
 8008d20:	b508      	push	{r3, lr}
 8008d22:	ee10 3a10 	vmov	r3, s0
 8008d26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d2a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8008d2e:	eef0 7a40 	vmov.f32	s15, s0
 8008d32:	d217      	bcs.n	8008d64 <__kernel_tanf+0x44>
 8008d34:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8008d38:	ee17 1a10 	vmov	r1, s14
 8008d3c:	bb41      	cbnz	r1, 8008d90 <__kernel_tanf+0x70>
 8008d3e:	1c43      	adds	r3, r0, #1
 8008d40:	4313      	orrs	r3, r2
 8008d42:	d108      	bne.n	8008d56 <__kernel_tanf+0x36>
 8008d44:	f000 fb70 	bl	8009428 <fabsf>
 8008d48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d4c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008d50:	eeb0 0a67 	vmov.f32	s0, s15
 8008d54:	bd08      	pop	{r3, pc}
 8008d56:	2801      	cmp	r0, #1
 8008d58:	d0fa      	beq.n	8008d50 <__kernel_tanf+0x30>
 8008d5a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008d5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008d62:	e7f5      	b.n	8008d50 <__kernel_tanf+0x30>
 8008d64:	494c      	ldr	r1, [pc, #304]	@ (8008e98 <__kernel_tanf+0x178>)
 8008d66:	428a      	cmp	r2, r1
 8008d68:	d312      	bcc.n	8008d90 <__kernel_tanf+0x70>
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8008e9c <__kernel_tanf+0x17c>
 8008d70:	bfb8      	it	lt
 8008d72:	eef1 7a40 	vneglt.f32	s15, s0
 8008d76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d7a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8008ea0 <__kernel_tanf+0x180>
 8008d7e:	bfb8      	it	lt
 8008d80:	eef1 0a60 	vneglt.f32	s1, s1
 8008d84:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008d88:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8008ea4 <__kernel_tanf+0x184>
 8008d8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d90:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8008d94:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008ea8 <__kernel_tanf+0x188>
 8008d98:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8008eac <__kernel_tanf+0x18c>
 8008d9c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8008eb0 <__kernel_tanf+0x190>
 8008da0:	493d      	ldr	r1, [pc, #244]	@ (8008e98 <__kernel_tanf+0x178>)
 8008da2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008da6:	428a      	cmp	r2, r1
 8008da8:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008dac:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8008eb4 <__kernel_tanf+0x194>
 8008db0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008db4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8008eb8 <__kernel_tanf+0x198>
 8008db8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008dbc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ebc <__kernel_tanf+0x19c>
 8008dc0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008dc4:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8008ec0 <__kernel_tanf+0x1a0>
 8008dc8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008dcc:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008ec4 <__kernel_tanf+0x1a4>
 8008dd0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8008dd4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8008ec8 <__kernel_tanf+0x1a8>
 8008dd8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008ddc:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8008ecc <__kernel_tanf+0x1ac>
 8008de0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008de4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8008ed0 <__kernel_tanf+0x1b0>
 8008de8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008dec:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8008ed4 <__kernel_tanf+0x1b4>
 8008df0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008df4:	eeb0 7a46 	vmov.f32	s14, s12
 8008df8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008dfc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8008e00:	eeb0 6a60 	vmov.f32	s12, s1
 8008e04:	eea7 6a05 	vfma.f32	s12, s14, s10
 8008e08:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8008ed8 <__kernel_tanf+0x1b8>
 8008e0c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8008e10:	eee5 0a07 	vfma.f32	s1, s10, s14
 8008e14:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8008e18:	d31d      	bcc.n	8008e56 <__kernel_tanf+0x136>
 8008e1a:	ee07 0a10 	vmov	s14, r0
 8008e1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e22:	ee26 5a06 	vmul.f32	s10, s12, s12
 8008e26:	ee36 6a07 	vadd.f32	s12, s12, s14
 8008e2a:	179b      	asrs	r3, r3, #30
 8008e2c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8008e30:	f003 0302 	and.w	r3, r3, #2
 8008e34:	f1c3 0301 	rsb	r3, r3, #1
 8008e38:	ee06 3a90 	vmov	s13, r3
 8008e3c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8008e40:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008e44:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008e48:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8008e4c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8008e50:	ee66 7a87 	vmul.f32	s15, s13, s14
 8008e54:	e77c      	b.n	8008d50 <__kernel_tanf+0x30>
 8008e56:	2801      	cmp	r0, #1
 8008e58:	d01b      	beq.n	8008e92 <__kernel_tanf+0x172>
 8008e5a:	4b20      	ldr	r3, [pc, #128]	@ (8008edc <__kernel_tanf+0x1bc>)
 8008e5c:	ee16 2a10 	vmov	r2, s12
 8008e60:	401a      	ands	r2, r3
 8008e62:	ee05 2a90 	vmov	s11, r2
 8008e66:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e6e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008e72:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8008e76:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008e7a:	ee16 2a90 	vmov	r2, s13
 8008e7e:	4013      	ands	r3, r2
 8008e80:	ee07 3a90 	vmov	s15, r3
 8008e84:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008e88:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8008e8c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008e90:	e75e      	b.n	8008d50 <__kernel_tanf+0x30>
 8008e92:	eef0 7a46 	vmov.f32	s15, s12
 8008e96:	e75b      	b.n	8008d50 <__kernel_tanf+0x30>
 8008e98:	3f2ca140 	.word	0x3f2ca140
 8008e9c:	3f490fda 	.word	0x3f490fda
 8008ea0:	33222168 	.word	0x33222168
 8008ea4:	00000000 	.word	0x00000000
 8008ea8:	b79bae5f 	.word	0xb79bae5f
 8008eac:	38a3f445 	.word	0x38a3f445
 8008eb0:	37d95384 	.word	0x37d95384
 8008eb4:	3a1a26c8 	.word	0x3a1a26c8
 8008eb8:	3b6b6916 	.word	0x3b6b6916
 8008ebc:	3cb327a4 	.word	0x3cb327a4
 8008ec0:	3e088889 	.word	0x3e088889
 8008ec4:	3895c07a 	.word	0x3895c07a
 8008ec8:	398137b9 	.word	0x398137b9
 8008ecc:	3abede48 	.word	0x3abede48
 8008ed0:	3c11371f 	.word	0x3c11371f
 8008ed4:	3d5d0dd1 	.word	0x3d5d0dd1
 8008ed8:	3eaaaaab 	.word	0x3eaaaaab
 8008edc:	fffff000 	.word	0xfffff000

08008ee0 <__ieee754_atan2f>:
 8008ee0:	ee10 2a90 	vmov	r2, s1
 8008ee4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008ee8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008eec:	b510      	push	{r4, lr}
 8008eee:	eef0 7a40 	vmov.f32	s15, s0
 8008ef2:	d806      	bhi.n	8008f02 <__ieee754_atan2f+0x22>
 8008ef4:	ee10 0a10 	vmov	r0, s0
 8008ef8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008efc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f00:	d904      	bls.n	8008f0c <__ieee754_atan2f+0x2c>
 8008f02:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008f06:	eeb0 0a67 	vmov.f32	s0, s15
 8008f0a:	bd10      	pop	{r4, pc}
 8008f0c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008f10:	d103      	bne.n	8008f1a <__ieee754_atan2f+0x3a>
 8008f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f16:	f000 b9b3 	b.w	8009280 <atanf>
 8008f1a:	1794      	asrs	r4, r2, #30
 8008f1c:	f004 0402 	and.w	r4, r4, #2
 8008f20:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008f24:	b943      	cbnz	r3, 8008f38 <__ieee754_atan2f+0x58>
 8008f26:	2c02      	cmp	r4, #2
 8008f28:	d05e      	beq.n	8008fe8 <__ieee754_atan2f+0x108>
 8008f2a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008ffc <__ieee754_atan2f+0x11c>
 8008f2e:	2c03      	cmp	r4, #3
 8008f30:	bf08      	it	eq
 8008f32:	eef0 7a47 	vmoveq.f32	s15, s14
 8008f36:	e7e6      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008f38:	b941      	cbnz	r1, 8008f4c <__ieee754_atan2f+0x6c>
 8008f3a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8009000 <__ieee754_atan2f+0x120>
 8008f3e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009004 <__ieee754_atan2f+0x124>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	bfa8      	it	ge
 8008f46:	eef0 7a47 	vmovge.f32	s15, s14
 8008f4a:	e7dc      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008f4c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008f50:	d110      	bne.n	8008f74 <__ieee754_atan2f+0x94>
 8008f52:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f56:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f5a:	d107      	bne.n	8008f6c <__ieee754_atan2f+0x8c>
 8008f5c:	2c02      	cmp	r4, #2
 8008f5e:	d846      	bhi.n	8008fee <__ieee754_atan2f+0x10e>
 8008f60:	4b29      	ldr	r3, [pc, #164]	@ (8009008 <__ieee754_atan2f+0x128>)
 8008f62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f66:	edd3 7a00 	vldr	s15, [r3]
 8008f6a:	e7cc      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008f6c:	2c02      	cmp	r4, #2
 8008f6e:	d841      	bhi.n	8008ff4 <__ieee754_atan2f+0x114>
 8008f70:	4b26      	ldr	r3, [pc, #152]	@ (800900c <__ieee754_atan2f+0x12c>)
 8008f72:	e7f6      	b.n	8008f62 <__ieee754_atan2f+0x82>
 8008f74:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f78:	d0df      	beq.n	8008f3a <__ieee754_atan2f+0x5a>
 8008f7a:	1a5b      	subs	r3, r3, r1
 8008f7c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8008f80:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008f84:	da1a      	bge.n	8008fbc <__ieee754_atan2f+0xdc>
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	da01      	bge.n	8008f8e <__ieee754_atan2f+0xae>
 8008f8a:	313c      	adds	r1, #60	@ 0x3c
 8008f8c:	db19      	blt.n	8008fc2 <__ieee754_atan2f+0xe2>
 8008f8e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008f92:	f000 fa49 	bl	8009428 <fabsf>
 8008f96:	f000 f973 	bl	8009280 <atanf>
 8008f9a:	eef0 7a40 	vmov.f32	s15, s0
 8008f9e:	2c01      	cmp	r4, #1
 8008fa0:	d012      	beq.n	8008fc8 <__ieee754_atan2f+0xe8>
 8008fa2:	2c02      	cmp	r4, #2
 8008fa4:	d017      	beq.n	8008fd6 <__ieee754_atan2f+0xf6>
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	d0ad      	beq.n	8008f06 <__ieee754_atan2f+0x26>
 8008faa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009010 <__ieee754_atan2f+0x130>
 8008fae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fb2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009014 <__ieee754_atan2f+0x134>
 8008fb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008fba:	e7a4      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008fbc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8009004 <__ieee754_atan2f+0x124>
 8008fc0:	e7ed      	b.n	8008f9e <__ieee754_atan2f+0xbe>
 8008fc2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009018 <__ieee754_atan2f+0x138>
 8008fc6:	e7ea      	b.n	8008f9e <__ieee754_atan2f+0xbe>
 8008fc8:	ee17 3a90 	vmov	r3, s15
 8008fcc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008fd0:	ee07 3a90 	vmov	s15, r3
 8008fd4:	e797      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008fd6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009010 <__ieee754_atan2f+0x130>
 8008fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fde:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009014 <__ieee754_atan2f+0x134>
 8008fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fe6:	e78e      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008fe8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009014 <__ieee754_atan2f+0x134>
 8008fec:	e78b      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008fee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800901c <__ieee754_atan2f+0x13c>
 8008ff2:	e788      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008ff4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009018 <__ieee754_atan2f+0x138>
 8008ff8:	e785      	b.n	8008f06 <__ieee754_atan2f+0x26>
 8008ffa:	bf00      	nop
 8008ffc:	c0490fdb 	.word	0xc0490fdb
 8009000:	bfc90fdb 	.word	0xbfc90fdb
 8009004:	3fc90fdb 	.word	0x3fc90fdb
 8009008:	08009aa0 	.word	0x08009aa0
 800900c:	08009a94 	.word	0x08009a94
 8009010:	33bbbd2e 	.word	0x33bbbd2e
 8009014:	40490fdb 	.word	0x40490fdb
 8009018:	00000000 	.word	0x00000000
 800901c:	3f490fdb 	.word	0x3f490fdb

08009020 <__ieee754_rem_pio2f>:
 8009020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009022:	ee10 6a10 	vmov	r6, s0
 8009026:	4b88      	ldr	r3, [pc, #544]	@ (8009248 <__ieee754_rem_pio2f+0x228>)
 8009028:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800902c:	429d      	cmp	r5, r3
 800902e:	b087      	sub	sp, #28
 8009030:	4604      	mov	r4, r0
 8009032:	d805      	bhi.n	8009040 <__ieee754_rem_pio2f+0x20>
 8009034:	2300      	movs	r3, #0
 8009036:	ed80 0a00 	vstr	s0, [r0]
 800903a:	6043      	str	r3, [r0, #4]
 800903c:	2000      	movs	r0, #0
 800903e:	e022      	b.n	8009086 <__ieee754_rem_pio2f+0x66>
 8009040:	4b82      	ldr	r3, [pc, #520]	@ (800924c <__ieee754_rem_pio2f+0x22c>)
 8009042:	429d      	cmp	r5, r3
 8009044:	d83a      	bhi.n	80090bc <__ieee754_rem_pio2f+0x9c>
 8009046:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800904a:	2e00      	cmp	r6, #0
 800904c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009250 <__ieee754_rem_pio2f+0x230>
 8009050:	4a80      	ldr	r2, [pc, #512]	@ (8009254 <__ieee754_rem_pio2f+0x234>)
 8009052:	f023 030f 	bic.w	r3, r3, #15
 8009056:	dd18      	ble.n	800908a <__ieee754_rem_pio2f+0x6a>
 8009058:	4293      	cmp	r3, r2
 800905a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800905e:	bf09      	itett	eq
 8009060:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009258 <__ieee754_rem_pio2f+0x238>
 8009064:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800925c <__ieee754_rem_pio2f+0x23c>
 8009068:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009260 <__ieee754_rem_pio2f+0x240>
 800906c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009070:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009078:	ed80 7a00 	vstr	s14, [r0]
 800907c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009080:	edc0 7a01 	vstr	s15, [r0, #4]
 8009084:	2001      	movs	r0, #1
 8009086:	b007      	add	sp, #28
 8009088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800908a:	4293      	cmp	r3, r2
 800908c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009090:	bf09      	itett	eq
 8009092:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009258 <__ieee754_rem_pio2f+0x238>
 8009096:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800925c <__ieee754_rem_pio2f+0x23c>
 800909a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009260 <__ieee754_rem_pio2f+0x240>
 800909e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80090a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80090a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090aa:	ed80 7a00 	vstr	s14, [r0]
 80090ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b2:	edc0 7a01 	vstr	s15, [r0, #4]
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	e7e4      	b.n	8009086 <__ieee754_rem_pio2f+0x66>
 80090bc:	4b69      	ldr	r3, [pc, #420]	@ (8009264 <__ieee754_rem_pio2f+0x244>)
 80090be:	429d      	cmp	r5, r3
 80090c0:	d873      	bhi.n	80091aa <__ieee754_rem_pio2f+0x18a>
 80090c2:	f000 f9b1 	bl	8009428 <fabsf>
 80090c6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009268 <__ieee754_rem_pio2f+0x248>
 80090ca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80090ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80090d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090da:	ee17 0a90 	vmov	r0, s15
 80090de:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009250 <__ieee754_rem_pio2f+0x230>
 80090e2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80090e6:	281f      	cmp	r0, #31
 80090e8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800925c <__ieee754_rem_pio2f+0x23c>
 80090ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f0:	eeb1 6a47 	vneg.f32	s12, s14
 80090f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80090f8:	ee16 1a90 	vmov	r1, s13
 80090fc:	dc09      	bgt.n	8009112 <__ieee754_rem_pio2f+0xf2>
 80090fe:	4a5b      	ldr	r2, [pc, #364]	@ (800926c <__ieee754_rem_pio2f+0x24c>)
 8009100:	1e47      	subs	r7, r0, #1
 8009102:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009106:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800910a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800910e:	4293      	cmp	r3, r2
 8009110:	d107      	bne.n	8009122 <__ieee754_rem_pio2f+0x102>
 8009112:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8009116:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800911a:	2a08      	cmp	r2, #8
 800911c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009120:	dc14      	bgt.n	800914c <__ieee754_rem_pio2f+0x12c>
 8009122:	6021      	str	r1, [r4, #0]
 8009124:	ed94 7a00 	vldr	s14, [r4]
 8009128:	ee30 0a47 	vsub.f32	s0, s0, s14
 800912c:	2e00      	cmp	r6, #0
 800912e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009132:	ed84 0a01 	vstr	s0, [r4, #4]
 8009136:	daa6      	bge.n	8009086 <__ieee754_rem_pio2f+0x66>
 8009138:	eeb1 7a47 	vneg.f32	s14, s14
 800913c:	eeb1 0a40 	vneg.f32	s0, s0
 8009140:	ed84 7a00 	vstr	s14, [r4]
 8009144:	ed84 0a01 	vstr	s0, [r4, #4]
 8009148:	4240      	negs	r0, r0
 800914a:	e79c      	b.n	8009086 <__ieee754_rem_pio2f+0x66>
 800914c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009258 <__ieee754_rem_pio2f+0x238>
 8009150:	eef0 6a40 	vmov.f32	s13, s0
 8009154:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009158:	ee70 7a66 	vsub.f32	s15, s0, s13
 800915c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009160:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009260 <__ieee754_rem_pio2f+0x240>
 8009164:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009168:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800916c:	ee15 2a90 	vmov	r2, s11
 8009170:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009174:	1a5b      	subs	r3, r3, r1
 8009176:	2b19      	cmp	r3, #25
 8009178:	dc04      	bgt.n	8009184 <__ieee754_rem_pio2f+0x164>
 800917a:	edc4 5a00 	vstr	s11, [r4]
 800917e:	eeb0 0a66 	vmov.f32	s0, s13
 8009182:	e7cf      	b.n	8009124 <__ieee754_rem_pio2f+0x104>
 8009184:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009270 <__ieee754_rem_pio2f+0x250>
 8009188:	eeb0 0a66 	vmov.f32	s0, s13
 800918c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009190:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009194:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009274 <__ieee754_rem_pio2f+0x254>
 8009198:	eee6 7a25 	vfma.f32	s15, s12, s11
 800919c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80091a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80091a4:	ed84 7a00 	vstr	s14, [r4]
 80091a8:	e7bc      	b.n	8009124 <__ieee754_rem_pio2f+0x104>
 80091aa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80091ae:	d306      	bcc.n	80091be <__ieee754_rem_pio2f+0x19e>
 80091b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80091b4:	edc0 7a01 	vstr	s15, [r0, #4]
 80091b8:	edc0 7a00 	vstr	s15, [r0]
 80091bc:	e73e      	b.n	800903c <__ieee754_rem_pio2f+0x1c>
 80091be:	15ea      	asrs	r2, r5, #23
 80091c0:	3a86      	subs	r2, #134	@ 0x86
 80091c2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80091ce:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009278 <__ieee754_rem_pio2f+0x258>
 80091d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091da:	ed8d 7a03 	vstr	s14, [sp, #12]
 80091de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80091e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80091e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091ee:	ed8d 7a04 	vstr	s14, [sp, #16]
 80091f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80091f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80091fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091fe:	edcd 7a05 	vstr	s15, [sp, #20]
 8009202:	d11e      	bne.n	8009242 <__ieee754_rem_pio2f+0x222>
 8009204:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920c:	bf0c      	ite	eq
 800920e:	2301      	moveq	r3, #1
 8009210:	2302      	movne	r3, #2
 8009212:	491a      	ldr	r1, [pc, #104]	@ (800927c <__ieee754_rem_pio2f+0x25c>)
 8009214:	9101      	str	r1, [sp, #4]
 8009216:	2102      	movs	r1, #2
 8009218:	9100      	str	r1, [sp, #0]
 800921a:	a803      	add	r0, sp, #12
 800921c:	4621      	mov	r1, r4
 800921e:	f000 f90b 	bl	8009438 <__kernel_rem_pio2f>
 8009222:	2e00      	cmp	r6, #0
 8009224:	f6bf af2f 	bge.w	8009086 <__ieee754_rem_pio2f+0x66>
 8009228:	edd4 7a00 	vldr	s15, [r4]
 800922c:	eef1 7a67 	vneg.f32	s15, s15
 8009230:	edc4 7a00 	vstr	s15, [r4]
 8009234:	edd4 7a01 	vldr	s15, [r4, #4]
 8009238:	eef1 7a67 	vneg.f32	s15, s15
 800923c:	edc4 7a01 	vstr	s15, [r4, #4]
 8009240:	e782      	b.n	8009148 <__ieee754_rem_pio2f+0x128>
 8009242:	2303      	movs	r3, #3
 8009244:	e7e5      	b.n	8009212 <__ieee754_rem_pio2f+0x1f2>
 8009246:	bf00      	nop
 8009248:	3f490fd8 	.word	0x3f490fd8
 800924c:	4016cbe3 	.word	0x4016cbe3
 8009250:	3fc90f80 	.word	0x3fc90f80
 8009254:	3fc90fd0 	.word	0x3fc90fd0
 8009258:	37354400 	.word	0x37354400
 800925c:	37354443 	.word	0x37354443
 8009260:	2e85a308 	.word	0x2e85a308
 8009264:	43490f80 	.word	0x43490f80
 8009268:	3f22f984 	.word	0x3f22f984
 800926c:	08009aac 	.word	0x08009aac
 8009270:	2e85a300 	.word	0x2e85a300
 8009274:	248d3132 	.word	0x248d3132
 8009278:	43800000 	.word	0x43800000
 800927c:	08009b2c 	.word	0x08009b2c

08009280 <atanf>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	ee10 5a10 	vmov	r5, s0
 8009286:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800928a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800928e:	eef0 7a40 	vmov.f32	s15, s0
 8009292:	d310      	bcc.n	80092b6 <atanf+0x36>
 8009294:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009298:	d904      	bls.n	80092a4 <atanf+0x24>
 800929a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800929e:	eeb0 0a67 	vmov.f32	s0, s15
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80093dc <atanf+0x15c>
 80092a8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80093e0 <atanf+0x160>
 80092ac:	2d00      	cmp	r5, #0
 80092ae:	bfc8      	it	gt
 80092b0:	eef0 7a47 	vmovgt.f32	s15, s14
 80092b4:	e7f3      	b.n	800929e <atanf+0x1e>
 80092b6:	4b4b      	ldr	r3, [pc, #300]	@ (80093e4 <atanf+0x164>)
 80092b8:	429c      	cmp	r4, r3
 80092ba:	d810      	bhi.n	80092de <atanf+0x5e>
 80092bc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80092c0:	d20a      	bcs.n	80092d8 <atanf+0x58>
 80092c2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80093e8 <atanf+0x168>
 80092c6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80092ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80092d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d6:	dce2      	bgt.n	800929e <atanf+0x1e>
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	e013      	b.n	8009306 <atanf+0x86>
 80092de:	f000 f8a3 	bl	8009428 <fabsf>
 80092e2:	4b42      	ldr	r3, [pc, #264]	@ (80093ec <atanf+0x16c>)
 80092e4:	429c      	cmp	r4, r3
 80092e6:	d84f      	bhi.n	8009388 <atanf+0x108>
 80092e8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80092ec:	429c      	cmp	r4, r3
 80092ee:	d841      	bhi.n	8009374 <atanf+0xf4>
 80092f0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80092f4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80092f8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80092fc:	2300      	movs	r3, #0
 80092fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009302:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800930c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80093f0 <atanf+0x170>
 8009310:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80093f4 <atanf+0x174>
 8009314:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80093f8 <atanf+0x178>
 8009318:	ee66 6a06 	vmul.f32	s13, s12, s12
 800931c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009320:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80093fc <atanf+0x17c>
 8009324:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009328:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009400 <atanf+0x180>
 800932c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009330:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009404 <atanf+0x184>
 8009334:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009338:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009408 <atanf+0x188>
 800933c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009340:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800940c <atanf+0x18c>
 8009344:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009348:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009410 <atanf+0x190>
 800934c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009350:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8009414 <atanf+0x194>
 8009354:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009358:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009418 <atanf+0x198>
 800935c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009360:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009364:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009368:	ee27 7a87 	vmul.f32	s14, s15, s14
 800936c:	d121      	bne.n	80093b2 <atanf+0x132>
 800936e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009372:	e794      	b.n	800929e <atanf+0x1e>
 8009374:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009378:	ee30 7a67 	vsub.f32	s14, s0, s15
 800937c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009380:	2301      	movs	r3, #1
 8009382:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009386:	e7be      	b.n	8009306 <atanf+0x86>
 8009388:	4b24      	ldr	r3, [pc, #144]	@ (800941c <atanf+0x19c>)
 800938a:	429c      	cmp	r4, r3
 800938c:	d80b      	bhi.n	80093a6 <atanf+0x126>
 800938e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8009392:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009396:	eea0 7a27 	vfma.f32	s14, s0, s15
 800939a:	2302      	movs	r3, #2
 800939c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80093a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093a4:	e7af      	b.n	8009306 <atanf+0x86>
 80093a6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80093aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093ae:	2303      	movs	r3, #3
 80093b0:	e7a9      	b.n	8009306 <atanf+0x86>
 80093b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009420 <atanf+0x1a0>)
 80093b4:	491b      	ldr	r1, [pc, #108]	@ (8009424 <atanf+0x1a4>)
 80093b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80093ba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80093be:	edd3 6a00 	vldr	s13, [r3]
 80093c2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093cc:	edd2 7a00 	vldr	s15, [r2]
 80093d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093d4:	bfb8      	it	lt
 80093d6:	eef1 7a67 	vneglt.f32	s15, s15
 80093da:	e760      	b.n	800929e <atanf+0x1e>
 80093dc:	bfc90fdb 	.word	0xbfc90fdb
 80093e0:	3fc90fdb 	.word	0x3fc90fdb
 80093e4:	3edfffff 	.word	0x3edfffff
 80093e8:	7149f2ca 	.word	0x7149f2ca
 80093ec:	3f97ffff 	.word	0x3f97ffff
 80093f0:	3c8569d7 	.word	0x3c8569d7
 80093f4:	3d4bda59 	.word	0x3d4bda59
 80093f8:	bd6ef16b 	.word	0xbd6ef16b
 80093fc:	3d886b35 	.word	0x3d886b35
 8009400:	3dba2e6e 	.word	0x3dba2e6e
 8009404:	3e124925 	.word	0x3e124925
 8009408:	3eaaaaab 	.word	0x3eaaaaab
 800940c:	bd15a221 	.word	0xbd15a221
 8009410:	bd9d8795 	.word	0xbd9d8795
 8009414:	bde38e38 	.word	0xbde38e38
 8009418:	be4ccccd 	.word	0xbe4ccccd
 800941c:	401bffff 	.word	0x401bffff
 8009420:	08009e54 	.word	0x08009e54
 8009424:	08009e44 	.word	0x08009e44

08009428 <fabsf>:
 8009428:	ee10 3a10 	vmov	r3, s0
 800942c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009430:	ee00 3a10 	vmov	s0, r3
 8009434:	4770      	bx	lr
	...

08009438 <__kernel_rem_pio2f>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	ed2d 8b04 	vpush	{d8-d9}
 8009440:	b0d9      	sub	sp, #356	@ 0x164
 8009442:	4690      	mov	r8, r2
 8009444:	9001      	str	r0, [sp, #4]
 8009446:	4ab6      	ldr	r2, [pc, #728]	@ (8009720 <__kernel_rem_pio2f+0x2e8>)
 8009448:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800944a:	f118 0f04 	cmn.w	r8, #4
 800944e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009452:	460f      	mov	r7, r1
 8009454:	f103 3bff 	add.w	fp, r3, #4294967295
 8009458:	db26      	blt.n	80094a8 <__kernel_rem_pio2f+0x70>
 800945a:	f1b8 0203 	subs.w	r2, r8, #3
 800945e:	bf48      	it	mi
 8009460:	f108 0204 	addmi.w	r2, r8, #4
 8009464:	10d2      	asrs	r2, r2, #3
 8009466:	1c55      	adds	r5, r2, #1
 8009468:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800946a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009730 <__kernel_rem_pio2f+0x2f8>
 800946e:	00e8      	lsls	r0, r5, #3
 8009470:	eba2 060b 	sub.w	r6, r2, fp
 8009474:	9002      	str	r0, [sp, #8]
 8009476:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800947a:	eb0a 0c0b 	add.w	ip, sl, fp
 800947e:	ac1c      	add	r4, sp, #112	@ 0x70
 8009480:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009484:	2000      	movs	r0, #0
 8009486:	4560      	cmp	r0, ip
 8009488:	dd10      	ble.n	80094ac <__kernel_rem_pio2f+0x74>
 800948a:	a91c      	add	r1, sp, #112	@ 0x70
 800948c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009490:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009494:	2600      	movs	r6, #0
 8009496:	4556      	cmp	r6, sl
 8009498:	dc24      	bgt.n	80094e4 <__kernel_rem_pio2f+0xac>
 800949a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800949e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8009730 <__kernel_rem_pio2f+0x2f8>
 80094a2:	4684      	mov	ip, r0
 80094a4:	2400      	movs	r4, #0
 80094a6:	e016      	b.n	80094d6 <__kernel_rem_pio2f+0x9e>
 80094a8:	2200      	movs	r2, #0
 80094aa:	e7dc      	b.n	8009466 <__kernel_rem_pio2f+0x2e>
 80094ac:	42c6      	cmn	r6, r0
 80094ae:	bf5d      	ittte	pl
 80094b0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80094b4:	ee07 1a90 	vmovpl	s15, r1
 80094b8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80094bc:	eef0 7a47 	vmovmi.f32	s15, s14
 80094c0:	ece4 7a01 	vstmia	r4!, {s15}
 80094c4:	3001      	adds	r0, #1
 80094c6:	e7de      	b.n	8009486 <__kernel_rem_pio2f+0x4e>
 80094c8:	ecfe 6a01 	vldmia	lr!, {s13}
 80094cc:	ed3c 7a01 	vldmdb	ip!, {s14}
 80094d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80094d4:	3401      	adds	r4, #1
 80094d6:	455c      	cmp	r4, fp
 80094d8:	ddf6      	ble.n	80094c8 <__kernel_rem_pio2f+0x90>
 80094da:	ece9 7a01 	vstmia	r9!, {s15}
 80094de:	3601      	adds	r6, #1
 80094e0:	3004      	adds	r0, #4
 80094e2:	e7d8      	b.n	8009496 <__kernel_rem_pio2f+0x5e>
 80094e4:	a908      	add	r1, sp, #32
 80094e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094ea:	9104      	str	r1, [sp, #16]
 80094ec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80094ee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800972c <__kernel_rem_pio2f+0x2f4>
 80094f2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8009728 <__kernel_rem_pio2f+0x2f0>
 80094f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80094fa:	9203      	str	r2, [sp, #12]
 80094fc:	4654      	mov	r4, sl
 80094fe:	00a2      	lsls	r2, r4, #2
 8009500:	9205      	str	r2, [sp, #20]
 8009502:	aa58      	add	r2, sp, #352	@ 0x160
 8009504:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8009508:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800950c:	a944      	add	r1, sp, #272	@ 0x110
 800950e:	aa08      	add	r2, sp, #32
 8009510:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009514:	4694      	mov	ip, r2
 8009516:	4626      	mov	r6, r4
 8009518:	2e00      	cmp	r6, #0
 800951a:	dc4c      	bgt.n	80095b6 <__kernel_rem_pio2f+0x17e>
 800951c:	4628      	mov	r0, r5
 800951e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009522:	f000 f9f1 	bl	8009908 <scalbnf>
 8009526:	eeb0 8a40 	vmov.f32	s16, s0
 800952a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800952e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009532:	f000 fa4f 	bl	80099d4 <floorf>
 8009536:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800953a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800953e:	2d00      	cmp	r5, #0
 8009540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009544:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009548:	ee17 9a90 	vmov	r9, s15
 800954c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009550:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009554:	dd41      	ble.n	80095da <__kernel_rem_pio2f+0x1a2>
 8009556:	f104 3cff 	add.w	ip, r4, #4294967295
 800955a:	a908      	add	r1, sp, #32
 800955c:	f1c5 0e08 	rsb	lr, r5, #8
 8009560:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8009564:	fa46 f00e 	asr.w	r0, r6, lr
 8009568:	4481      	add	r9, r0
 800956a:	fa00 f00e 	lsl.w	r0, r0, lr
 800956e:	1a36      	subs	r6, r6, r0
 8009570:	f1c5 0007 	rsb	r0, r5, #7
 8009574:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8009578:	4106      	asrs	r6, r0
 800957a:	2e00      	cmp	r6, #0
 800957c:	dd3c      	ble.n	80095f8 <__kernel_rem_pio2f+0x1c0>
 800957e:	f04f 0e00 	mov.w	lr, #0
 8009582:	f109 0901 	add.w	r9, r9, #1
 8009586:	4670      	mov	r0, lr
 8009588:	4574      	cmp	r4, lr
 800958a:	dc68      	bgt.n	800965e <__kernel_rem_pio2f+0x226>
 800958c:	2d00      	cmp	r5, #0
 800958e:	dd03      	ble.n	8009598 <__kernel_rem_pio2f+0x160>
 8009590:	2d01      	cmp	r5, #1
 8009592:	d074      	beq.n	800967e <__kernel_rem_pio2f+0x246>
 8009594:	2d02      	cmp	r5, #2
 8009596:	d07d      	beq.n	8009694 <__kernel_rem_pio2f+0x25c>
 8009598:	2e02      	cmp	r6, #2
 800959a:	d12d      	bne.n	80095f8 <__kernel_rem_pio2f+0x1c0>
 800959c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80095a0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80095a4:	b340      	cbz	r0, 80095f8 <__kernel_rem_pio2f+0x1c0>
 80095a6:	4628      	mov	r0, r5
 80095a8:	9306      	str	r3, [sp, #24]
 80095aa:	f000 f9ad 	bl	8009908 <scalbnf>
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80095b4:	e020      	b.n	80095f8 <__kernel_rem_pio2f+0x1c0>
 80095b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80095ba:	3e01      	subs	r6, #1
 80095bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095c4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80095c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80095cc:	ecac 0a01 	vstmia	ip!, {s0}
 80095d0:	ed30 0a01 	vldmdb	r0!, {s0}
 80095d4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80095d8:	e79e      	b.n	8009518 <__kernel_rem_pio2f+0xe0>
 80095da:	d105      	bne.n	80095e8 <__kernel_rem_pio2f+0x1b0>
 80095dc:	1e60      	subs	r0, r4, #1
 80095de:	a908      	add	r1, sp, #32
 80095e0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80095e4:	11f6      	asrs	r6, r6, #7
 80095e6:	e7c8      	b.n	800957a <__kernel_rem_pio2f+0x142>
 80095e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80095ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80095f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f4:	da31      	bge.n	800965a <__kernel_rem_pio2f+0x222>
 80095f6:	2600      	movs	r6, #0
 80095f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80095fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009600:	f040 8098 	bne.w	8009734 <__kernel_rem_pio2f+0x2fc>
 8009604:	1e60      	subs	r0, r4, #1
 8009606:	2200      	movs	r2, #0
 8009608:	4550      	cmp	r0, sl
 800960a:	da4b      	bge.n	80096a4 <__kernel_rem_pio2f+0x26c>
 800960c:	2a00      	cmp	r2, #0
 800960e:	d065      	beq.n	80096dc <__kernel_rem_pio2f+0x2a4>
 8009610:	3c01      	subs	r4, #1
 8009612:	ab08      	add	r3, sp, #32
 8009614:	3d08      	subs	r5, #8
 8009616:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d0f8      	beq.n	8009610 <__kernel_rem_pio2f+0x1d8>
 800961e:	4628      	mov	r0, r5
 8009620:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009624:	f000 f970 	bl	8009908 <scalbnf>
 8009628:	1c63      	adds	r3, r4, #1
 800962a:	aa44      	add	r2, sp, #272	@ 0x110
 800962c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800972c <__kernel_rem_pio2f+0x2f4>
 8009630:	0099      	lsls	r1, r3, #2
 8009632:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009636:	4623      	mov	r3, r4
 8009638:	2b00      	cmp	r3, #0
 800963a:	f280 80a9 	bge.w	8009790 <__kernel_rem_pio2f+0x358>
 800963e:	4623      	mov	r3, r4
 8009640:	2b00      	cmp	r3, #0
 8009642:	f2c0 80c7 	blt.w	80097d4 <__kernel_rem_pio2f+0x39c>
 8009646:	aa44      	add	r2, sp, #272	@ 0x110
 8009648:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800964c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009724 <__kernel_rem_pio2f+0x2ec>
 8009650:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009730 <__kernel_rem_pio2f+0x2f8>
 8009654:	2000      	movs	r0, #0
 8009656:	1ae2      	subs	r2, r4, r3
 8009658:	e0b1      	b.n	80097be <__kernel_rem_pio2f+0x386>
 800965a:	2602      	movs	r6, #2
 800965c:	e78f      	b.n	800957e <__kernel_rem_pio2f+0x146>
 800965e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009662:	b948      	cbnz	r0, 8009678 <__kernel_rem_pio2f+0x240>
 8009664:	b121      	cbz	r1, 8009670 <__kernel_rem_pio2f+0x238>
 8009666:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800966a:	f842 1c04 	str.w	r1, [r2, #-4]
 800966e:	2101      	movs	r1, #1
 8009670:	f10e 0e01 	add.w	lr, lr, #1
 8009674:	4608      	mov	r0, r1
 8009676:	e787      	b.n	8009588 <__kernel_rem_pio2f+0x150>
 8009678:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800967c:	e7f5      	b.n	800966a <__kernel_rem_pio2f+0x232>
 800967e:	f104 3cff 	add.w	ip, r4, #4294967295
 8009682:	aa08      	add	r2, sp, #32
 8009684:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009688:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800968c:	a908      	add	r1, sp, #32
 800968e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8009692:	e781      	b.n	8009598 <__kernel_rem_pio2f+0x160>
 8009694:	f104 3cff 	add.w	ip, r4, #4294967295
 8009698:	aa08      	add	r2, sp, #32
 800969a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800969e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80096a2:	e7f3      	b.n	800968c <__kernel_rem_pio2f+0x254>
 80096a4:	a908      	add	r1, sp, #32
 80096a6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80096aa:	3801      	subs	r0, #1
 80096ac:	430a      	orrs	r2, r1
 80096ae:	e7ab      	b.n	8009608 <__kernel_rem_pio2f+0x1d0>
 80096b0:	3201      	adds	r2, #1
 80096b2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	d0fa      	beq.n	80096b0 <__kernel_rem_pio2f+0x278>
 80096ba:	9905      	ldr	r1, [sp, #20]
 80096bc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80096c0:	eb0d 0001 	add.w	r0, sp, r1
 80096c4:	18e6      	adds	r6, r4, r3
 80096c6:	a91c      	add	r1, sp, #112	@ 0x70
 80096c8:	f104 0c01 	add.w	ip, r4, #1
 80096cc:	384c      	subs	r0, #76	@ 0x4c
 80096ce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80096d2:	4422      	add	r2, r4
 80096d4:	4562      	cmp	r2, ip
 80096d6:	da04      	bge.n	80096e2 <__kernel_rem_pio2f+0x2aa>
 80096d8:	4614      	mov	r4, r2
 80096da:	e710      	b.n	80094fe <__kernel_rem_pio2f+0xc6>
 80096dc:	9804      	ldr	r0, [sp, #16]
 80096de:	2201      	movs	r2, #1
 80096e0:	e7e7      	b.n	80096b2 <__kernel_rem_pio2f+0x27a>
 80096e2:	9903      	ldr	r1, [sp, #12]
 80096e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80096e8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80096ec:	9105      	str	r1, [sp, #20]
 80096ee:	ee07 1a90 	vmov	s15, r1
 80096f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096f6:	2400      	movs	r4, #0
 80096f8:	ece6 7a01 	vstmia	r6!, {s15}
 80096fc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009730 <__kernel_rem_pio2f+0x2f8>
 8009700:	46b1      	mov	r9, r6
 8009702:	455c      	cmp	r4, fp
 8009704:	dd04      	ble.n	8009710 <__kernel_rem_pio2f+0x2d8>
 8009706:	ece0 7a01 	vstmia	r0!, {s15}
 800970a:	f10c 0c01 	add.w	ip, ip, #1
 800970e:	e7e1      	b.n	80096d4 <__kernel_rem_pio2f+0x29c>
 8009710:	ecfe 6a01 	vldmia	lr!, {s13}
 8009714:	ed39 7a01 	vldmdb	r9!, {s14}
 8009718:	3401      	adds	r4, #1
 800971a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800971e:	e7f0      	b.n	8009702 <__kernel_rem_pio2f+0x2ca>
 8009720:	08009e90 	.word	0x08009e90
 8009724:	08009e64 	.word	0x08009e64
 8009728:	43800000 	.word	0x43800000
 800972c:	3b800000 	.word	0x3b800000
 8009730:	00000000 	.word	0x00000000
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	eeb0 0a48 	vmov.f32	s0, s16
 800973a:	eba3 0008 	sub.w	r0, r3, r8
 800973e:	f000 f8e3 	bl	8009908 <scalbnf>
 8009742:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009728 <__kernel_rem_pio2f+0x2f0>
 8009746:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974e:	db19      	blt.n	8009784 <__kernel_rem_pio2f+0x34c>
 8009750:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800972c <__kernel_rem_pio2f+0x2f4>
 8009754:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009758:	aa08      	add	r2, sp, #32
 800975a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800975e:	3508      	adds	r5, #8
 8009760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009764:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800976c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009770:	ee10 3a10 	vmov	r3, s0
 8009774:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009778:	ee17 3a90 	vmov	r3, s15
 800977c:	3401      	adds	r4, #1
 800977e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009782:	e74c      	b.n	800961e <__kernel_rem_pio2f+0x1e6>
 8009784:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009788:	aa08      	add	r2, sp, #32
 800978a:	ee10 3a10 	vmov	r3, s0
 800978e:	e7f6      	b.n	800977e <__kernel_rem_pio2f+0x346>
 8009790:	a808      	add	r0, sp, #32
 8009792:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009796:	9001      	str	r0, [sp, #4]
 8009798:	ee07 0a90 	vmov	s15, r0
 800979c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097a0:	3b01      	subs	r3, #1
 80097a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80097a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80097aa:	ed62 7a01 	vstmdb	r2!, {s15}
 80097ae:	e743      	b.n	8009638 <__kernel_rem_pio2f+0x200>
 80097b0:	ecfc 6a01 	vldmia	ip!, {s13}
 80097b4:	ecb5 7a01 	vldmia	r5!, {s14}
 80097b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097bc:	3001      	adds	r0, #1
 80097be:	4550      	cmp	r0, sl
 80097c0:	dc01      	bgt.n	80097c6 <__kernel_rem_pio2f+0x38e>
 80097c2:	4290      	cmp	r0, r2
 80097c4:	ddf4      	ble.n	80097b0 <__kernel_rem_pio2f+0x378>
 80097c6:	a858      	add	r0, sp, #352	@ 0x160
 80097c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80097cc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80097d0:	3b01      	subs	r3, #1
 80097d2:	e735      	b.n	8009640 <__kernel_rem_pio2f+0x208>
 80097d4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	dc09      	bgt.n	80097ee <__kernel_rem_pio2f+0x3b6>
 80097da:	2b00      	cmp	r3, #0
 80097dc:	dc27      	bgt.n	800982e <__kernel_rem_pio2f+0x3f6>
 80097de:	d040      	beq.n	8009862 <__kernel_rem_pio2f+0x42a>
 80097e0:	f009 0007 	and.w	r0, r9, #7
 80097e4:	b059      	add	sp, #356	@ 0x164
 80097e6:	ecbd 8b04 	vpop	{d8-d9}
 80097ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d1f5      	bne.n	80097e0 <__kernel_rem_pio2f+0x3a8>
 80097f4:	aa30      	add	r2, sp, #192	@ 0xc0
 80097f6:	1f0b      	subs	r3, r1, #4
 80097f8:	4413      	add	r3, r2
 80097fa:	461a      	mov	r2, r3
 80097fc:	4620      	mov	r0, r4
 80097fe:	2800      	cmp	r0, #0
 8009800:	dc50      	bgt.n	80098a4 <__kernel_rem_pio2f+0x46c>
 8009802:	4622      	mov	r2, r4
 8009804:	2a01      	cmp	r2, #1
 8009806:	dc5d      	bgt.n	80098c4 <__kernel_rem_pio2f+0x48c>
 8009808:	ab30      	add	r3, sp, #192	@ 0xc0
 800980a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8009730 <__kernel_rem_pio2f+0x2f8>
 800980e:	440b      	add	r3, r1
 8009810:	2c01      	cmp	r4, #1
 8009812:	dc67      	bgt.n	80098e4 <__kernel_rem_pio2f+0x4ac>
 8009814:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009818:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800981c:	2e00      	cmp	r6, #0
 800981e:	d167      	bne.n	80098f0 <__kernel_rem_pio2f+0x4b8>
 8009820:	edc7 6a00 	vstr	s13, [r7]
 8009824:	ed87 7a01 	vstr	s14, [r7, #4]
 8009828:	edc7 7a02 	vstr	s15, [r7, #8]
 800982c:	e7d8      	b.n	80097e0 <__kernel_rem_pio2f+0x3a8>
 800982e:	ab30      	add	r3, sp, #192	@ 0xc0
 8009830:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8009730 <__kernel_rem_pio2f+0x2f8>
 8009834:	440b      	add	r3, r1
 8009836:	4622      	mov	r2, r4
 8009838:	2a00      	cmp	r2, #0
 800983a:	da24      	bge.n	8009886 <__kernel_rem_pio2f+0x44e>
 800983c:	b34e      	cbz	r6, 8009892 <__kernel_rem_pio2f+0x45a>
 800983e:	eef1 7a47 	vneg.f32	s15, s14
 8009842:	edc7 7a00 	vstr	s15, [r7]
 8009846:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800984a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800984e:	aa31      	add	r2, sp, #196	@ 0xc4
 8009850:	2301      	movs	r3, #1
 8009852:	429c      	cmp	r4, r3
 8009854:	da20      	bge.n	8009898 <__kernel_rem_pio2f+0x460>
 8009856:	b10e      	cbz	r6, 800985c <__kernel_rem_pio2f+0x424>
 8009858:	eef1 7a67 	vneg.f32	s15, s15
 800985c:	edc7 7a01 	vstr	s15, [r7, #4]
 8009860:	e7be      	b.n	80097e0 <__kernel_rem_pio2f+0x3a8>
 8009862:	ab30      	add	r3, sp, #192	@ 0xc0
 8009864:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8009730 <__kernel_rem_pio2f+0x2f8>
 8009868:	440b      	add	r3, r1
 800986a:	2c00      	cmp	r4, #0
 800986c:	da05      	bge.n	800987a <__kernel_rem_pio2f+0x442>
 800986e:	b10e      	cbz	r6, 8009874 <__kernel_rem_pio2f+0x43c>
 8009870:	eef1 7a67 	vneg.f32	s15, s15
 8009874:	edc7 7a00 	vstr	s15, [r7]
 8009878:	e7b2      	b.n	80097e0 <__kernel_rem_pio2f+0x3a8>
 800987a:	ed33 7a01 	vldmdb	r3!, {s14}
 800987e:	3c01      	subs	r4, #1
 8009880:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009884:	e7f1      	b.n	800986a <__kernel_rem_pio2f+0x432>
 8009886:	ed73 7a01 	vldmdb	r3!, {s15}
 800988a:	3a01      	subs	r2, #1
 800988c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009890:	e7d2      	b.n	8009838 <__kernel_rem_pio2f+0x400>
 8009892:	eef0 7a47 	vmov.f32	s15, s14
 8009896:	e7d4      	b.n	8009842 <__kernel_rem_pio2f+0x40a>
 8009898:	ecb2 7a01 	vldmia	r2!, {s14}
 800989c:	3301      	adds	r3, #1
 800989e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098a2:	e7d6      	b.n	8009852 <__kernel_rem_pio2f+0x41a>
 80098a4:	ed72 7a01 	vldmdb	r2!, {s15}
 80098a8:	edd2 6a01 	vldr	s13, [r2, #4]
 80098ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80098b0:	3801      	subs	r0, #1
 80098b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098b6:	ed82 7a00 	vstr	s14, [r2]
 80098ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098be:	edc2 7a01 	vstr	s15, [r2, #4]
 80098c2:	e79c      	b.n	80097fe <__kernel_rem_pio2f+0x3c6>
 80098c4:	ed73 7a01 	vldmdb	r3!, {s15}
 80098c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80098cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80098d0:	3a01      	subs	r2, #1
 80098d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098d6:	ed83 7a00 	vstr	s14, [r3]
 80098da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098de:	edc3 7a01 	vstr	s15, [r3, #4]
 80098e2:	e78f      	b.n	8009804 <__kernel_rem_pio2f+0x3cc>
 80098e4:	ed33 7a01 	vldmdb	r3!, {s14}
 80098e8:	3c01      	subs	r4, #1
 80098ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098ee:	e78f      	b.n	8009810 <__kernel_rem_pio2f+0x3d8>
 80098f0:	eef1 6a66 	vneg.f32	s13, s13
 80098f4:	eeb1 7a47 	vneg.f32	s14, s14
 80098f8:	edc7 6a00 	vstr	s13, [r7]
 80098fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8009900:	eef1 7a67 	vneg.f32	s15, s15
 8009904:	e790      	b.n	8009828 <__kernel_rem_pio2f+0x3f0>
 8009906:	bf00      	nop

08009908 <scalbnf>:
 8009908:	ee10 3a10 	vmov	r3, s0
 800990c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009910:	d02b      	beq.n	800996a <scalbnf+0x62>
 8009912:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009916:	d302      	bcc.n	800991e <scalbnf+0x16>
 8009918:	ee30 0a00 	vadd.f32	s0, s0, s0
 800991c:	4770      	bx	lr
 800991e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009922:	d123      	bne.n	800996c <scalbnf+0x64>
 8009924:	4b24      	ldr	r3, [pc, #144]	@ (80099b8 <scalbnf+0xb0>)
 8009926:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80099bc <scalbnf+0xb4>
 800992a:	4298      	cmp	r0, r3
 800992c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009930:	db17      	blt.n	8009962 <scalbnf+0x5a>
 8009932:	ee10 3a10 	vmov	r3, s0
 8009936:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800993a:	3a19      	subs	r2, #25
 800993c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009940:	4288      	cmp	r0, r1
 8009942:	dd15      	ble.n	8009970 <scalbnf+0x68>
 8009944:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80099c0 <scalbnf+0xb8>
 8009948:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80099c4 <scalbnf+0xbc>
 800994c:	ee10 3a10 	vmov	r3, s0
 8009950:	eeb0 7a67 	vmov.f32	s14, s15
 8009954:	2b00      	cmp	r3, #0
 8009956:	bfb8      	it	lt
 8009958:	eef0 7a66 	vmovlt.f32	s15, s13
 800995c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009960:	4770      	bx	lr
 8009962:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80099c8 <scalbnf+0xc0>
 8009966:	ee27 0a80 	vmul.f32	s0, s15, s0
 800996a:	4770      	bx	lr
 800996c:	0dd2      	lsrs	r2, r2, #23
 800996e:	e7e5      	b.n	800993c <scalbnf+0x34>
 8009970:	4410      	add	r0, r2
 8009972:	28fe      	cmp	r0, #254	@ 0xfe
 8009974:	dce6      	bgt.n	8009944 <scalbnf+0x3c>
 8009976:	2800      	cmp	r0, #0
 8009978:	dd06      	ble.n	8009988 <scalbnf+0x80>
 800997a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800997e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009982:	ee00 3a10 	vmov	s0, r3
 8009986:	4770      	bx	lr
 8009988:	f110 0f16 	cmn.w	r0, #22
 800998c:	da09      	bge.n	80099a2 <scalbnf+0x9a>
 800998e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80099c8 <scalbnf+0xc0>
 8009992:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80099cc <scalbnf+0xc4>
 8009996:	ee10 3a10 	vmov	r3, s0
 800999a:	eeb0 7a67 	vmov.f32	s14, s15
 800999e:	2b00      	cmp	r3, #0
 80099a0:	e7d9      	b.n	8009956 <scalbnf+0x4e>
 80099a2:	3019      	adds	r0, #25
 80099a4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80099a8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80099ac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80099d0 <scalbnf+0xc8>
 80099b0:	ee07 3a90 	vmov	s15, r3
 80099b4:	e7d7      	b.n	8009966 <scalbnf+0x5e>
 80099b6:	bf00      	nop
 80099b8:	ffff3cb0 	.word	0xffff3cb0
 80099bc:	4c000000 	.word	0x4c000000
 80099c0:	7149f2ca 	.word	0x7149f2ca
 80099c4:	f149f2ca 	.word	0xf149f2ca
 80099c8:	0da24260 	.word	0x0da24260
 80099cc:	8da24260 	.word	0x8da24260
 80099d0:	33000000 	.word	0x33000000

080099d4 <floorf>:
 80099d4:	ee10 3a10 	vmov	r3, s0
 80099d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80099dc:	3a7f      	subs	r2, #127	@ 0x7f
 80099de:	2a16      	cmp	r2, #22
 80099e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80099e4:	dc2b      	bgt.n	8009a3e <floorf+0x6a>
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	da12      	bge.n	8009a10 <floorf+0x3c>
 80099ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009a50 <floorf+0x7c>
 80099ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80099f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80099f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099fa:	dd06      	ble.n	8009a0a <floorf+0x36>
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	da24      	bge.n	8009a4a <floorf+0x76>
 8009a00:	2900      	cmp	r1, #0
 8009a02:	4b14      	ldr	r3, [pc, #80]	@ (8009a54 <floorf+0x80>)
 8009a04:	bf08      	it	eq
 8009a06:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009a0a:	ee00 3a10 	vmov	s0, r3
 8009a0e:	4770      	bx	lr
 8009a10:	4911      	ldr	r1, [pc, #68]	@ (8009a58 <floorf+0x84>)
 8009a12:	4111      	asrs	r1, r2
 8009a14:	420b      	tst	r3, r1
 8009a16:	d0fa      	beq.n	8009a0e <floorf+0x3a>
 8009a18:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009a50 <floorf+0x7c>
 8009a1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a28:	ddef      	ble.n	8009a0a <floorf+0x36>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bfbe      	ittt	lt
 8009a2e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009a32:	fa40 f202 	asrlt.w	r2, r0, r2
 8009a36:	189b      	addlt	r3, r3, r2
 8009a38:	ea23 0301 	bic.w	r3, r3, r1
 8009a3c:	e7e5      	b.n	8009a0a <floorf+0x36>
 8009a3e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009a42:	d3e4      	bcc.n	8009a0e <floorf+0x3a>
 8009a44:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a48:	4770      	bx	lr
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e7dd      	b.n	8009a0a <floorf+0x36>
 8009a4e:	bf00      	nop
 8009a50:	7149f2ca 	.word	0x7149f2ca
 8009a54:	bf800000 	.word	0xbf800000
 8009a58:	007fffff 	.word	0x007fffff

08009a5c <_init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr

08009a68 <_fini>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr
