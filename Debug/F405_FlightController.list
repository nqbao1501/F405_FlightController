
F405_FlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009900  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08009a88  08009a88  0000aa88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb0  08009eb0  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009eb0  08009eb0  0000aeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009eb8  08009eb8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eb8  08009eb8  0000aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ebc  08009ebc  0000aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009ec0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b060  2**0
                  CONTENTS
 10 .bss          00000b94  20000060  20000060  0000b060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bf4  20000bf4  0000b060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012991  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e32  00000000  00000000  0001da21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00020858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc6  00000000  00000000  000218d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020906  00000000  00000000  0002259e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145a5  00000000  00000000  00042ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3870  00000000  00000000  00057449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011acb9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000490c  00000000  00000000  0011acfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a70 	.word	0x08009a70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08009a70 	.word	0x08009a70

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b988 	b.w	8000d2c <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	468e      	mov	lr, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	4688      	mov	r8, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d962      	bls.n	8000b10 <__udivmoddi4+0xdc>
 8000a4a:	fab2 f682 	clz	r6, r2
 8000a4e:	b14e      	cbz	r6, 8000a64 <__udivmoddi4+0x30>
 8000a50:	f1c6 0320 	rsb	r3, r6, #32
 8000a54:	fa01 f806 	lsl.w	r8, r1, r6
 8000a58:	fa20 f303 	lsr.w	r3, r0, r3
 8000a5c:	40b7      	lsls	r7, r6
 8000a5e:	ea43 0808 	orr.w	r8, r3, r8
 8000a62:	40b4      	lsls	r4, r6
 8000a64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a68:	fa1f fc87 	uxth.w	ip, r7
 8000a6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a88:	f080 80ea 	bcs.w	8000c60 <__udivmoddi4+0x22c>
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f240 80e7 	bls.w	8000c60 <__udivmoddi4+0x22c>
 8000a92:	3902      	subs	r1, #2
 8000a94:	443b      	add	r3, r7
 8000a96:	1a9a      	subs	r2, r3, r2
 8000a98:	b2a3      	uxth	r3, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aa6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aaa:	459c      	cmp	ip, r3
 8000aac:	d909      	bls.n	8000ac2 <__udivmoddi4+0x8e>
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab4:	f080 80d6 	bcs.w	8000c64 <__udivmoddi4+0x230>
 8000ab8:	459c      	cmp	ip, r3
 8000aba:	f240 80d3 	bls.w	8000c64 <__udivmoddi4+0x230>
 8000abe:	443b      	add	r3, r7
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac6:	eba3 030c 	sub.w	r3, r3, ip
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11d      	cbz	r5, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40f3      	lsrs	r3, r6
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d905      	bls.n	8000aea <__udivmoddi4+0xb6>
 8000ade:	b10d      	cbz	r5, 8000ae4 <__udivmoddi4+0xb0>
 8000ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	e7f5      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000aea:	fab3 f183 	clz	r1, r3
 8000aee:	2900      	cmp	r1, #0
 8000af0:	d146      	bne.n	8000b80 <__udivmoddi4+0x14c>
 8000af2:	4573      	cmp	r3, lr
 8000af4:	d302      	bcc.n	8000afc <__udivmoddi4+0xc8>
 8000af6:	4282      	cmp	r2, r0
 8000af8:	f200 8105 	bhi.w	8000d06 <__udivmoddi4+0x2d2>
 8000afc:	1a84      	subs	r4, r0, r2
 8000afe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b02:	2001      	movs	r0, #1
 8000b04:	4690      	mov	r8, r2
 8000b06:	2d00      	cmp	r5, #0
 8000b08:	d0e5      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b0e:	e7e2      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f000 8090 	beq.w	8000c36 <__udivmoddi4+0x202>
 8000b16:	fab2 f682 	clz	r6, r2
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	f040 80a4 	bne.w	8000c68 <__udivmoddi4+0x234>
 8000b20:	1a8a      	subs	r2, r1, r2
 8000b22:	0c03      	lsrs	r3, r0, #16
 8000b24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b28:	b280      	uxth	r0, r0
 8000b2a:	b2bc      	uxth	r4, r7
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d907      	bls.n	8000b52 <__udivmoddi4+0x11e>
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x11c>
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	f200 80e0 	bhi.w	8000d10 <__udivmoddi4+0x2dc>
 8000b50:	46c4      	mov	ip, r8
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b60:	fb02 f404 	mul.w	r4, r2, r4
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x144>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x142>
 8000b70:	429c      	cmp	r4, r3
 8000b72:	f200 80ca 	bhi.w	8000d0a <__udivmoddi4+0x2d6>
 8000b76:	4602      	mov	r2, r0
 8000b78:	1b1b      	subs	r3, r3, r4
 8000b7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b7e:	e7a5      	b.n	8000acc <__udivmoddi4+0x98>
 8000b80:	f1c1 0620 	rsb	r6, r1, #32
 8000b84:	408b      	lsls	r3, r1
 8000b86:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8a:	431f      	orrs	r7, r3
 8000b8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b90:	fa20 f306 	lsr.w	r3, r0, r6
 8000b94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b9c:	4323      	orrs	r3, r4
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	fa1f fc87 	uxth.w	ip, r7
 8000ba6:	fbbe f0f9 	udiv	r0, lr, r9
 8000baa:	0c1c      	lsrs	r4, r3, #16
 8000bac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	fa02 f201 	lsl.w	r2, r2, r1
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x1a0>
 8000bc0:	193c      	adds	r4, r7, r4
 8000bc2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bc6:	f080 809c 	bcs.w	8000d02 <__udivmoddi4+0x2ce>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f240 8099 	bls.w	8000d02 <__udivmoddi4+0x2ce>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	443c      	add	r4, r7
 8000bd4:	eba4 040e 	sub.w	r4, r4, lr
 8000bd8:	fa1f fe83 	uxth.w	lr, r3
 8000bdc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000be0:	fb09 4413 	mls	r4, r9, r3, r4
 8000be4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000be8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1ce>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bf6:	f080 8082 	bcs.w	8000cfe <__udivmoddi4+0x2ca>
 8000bfa:	45a4      	cmp	ip, r4
 8000bfc:	d97f      	bls.n	8000cfe <__udivmoddi4+0x2ca>
 8000bfe:	3b02      	subs	r3, #2
 8000c00:	443c      	add	r4, r7
 8000c02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c06:	eba4 040c 	sub.w	r4, r4, ip
 8000c0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c0e:	4564      	cmp	r4, ip
 8000c10:	4673      	mov	r3, lr
 8000c12:	46e1      	mov	r9, ip
 8000c14:	d362      	bcc.n	8000cdc <__udivmoddi4+0x2a8>
 8000c16:	d05f      	beq.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c18:	b15d      	cbz	r5, 8000c32 <__udivmoddi4+0x1fe>
 8000c1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c22:	fa04 f606 	lsl.w	r6, r4, r6
 8000c26:	fa22 f301 	lsr.w	r3, r2, r1
 8000c2a:	431e      	orrs	r6, r3
 8000c2c:	40cc      	lsrs	r4, r1
 8000c2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c32:	2100      	movs	r1, #0
 8000c34:	e74f      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000c36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c3a:	0c01      	lsrs	r1, r0, #16
 8000c3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c40:	b280      	uxth	r0, r0
 8000c42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c46:	463b      	mov	r3, r7
 8000c48:	4638      	mov	r0, r7
 8000c4a:	463c      	mov	r4, r7
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	46be      	mov	lr, r7
 8000c50:	2620      	movs	r6, #32
 8000c52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c56:	eba2 0208 	sub.w	r2, r2, r8
 8000c5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c5e:	e766      	b.n	8000b2e <__udivmoddi4+0xfa>
 8000c60:	4601      	mov	r1, r0
 8000c62:	e718      	b.n	8000a96 <__udivmoddi4+0x62>
 8000c64:	4610      	mov	r0, r2
 8000c66:	e72c      	b.n	8000ac2 <__udivmoddi4+0x8e>
 8000c68:	f1c6 0220 	rsb	r2, r6, #32
 8000c6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	40b1      	lsls	r1, r6
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c82:	b2bc      	uxth	r4, r7
 8000c84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c88:	0c11      	lsrs	r1, r2, #16
 8000c8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8e:	fb08 f904 	mul.w	r9, r8, r4
 8000c92:	40b0      	lsls	r0, r6
 8000c94:	4589      	cmp	r9, r1
 8000c96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c9a:	b280      	uxth	r0, r0
 8000c9c:	d93e      	bls.n	8000d1c <__udivmoddi4+0x2e8>
 8000c9e:	1879      	adds	r1, r7, r1
 8000ca0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ca4:	d201      	bcs.n	8000caa <__udivmoddi4+0x276>
 8000ca6:	4589      	cmp	r9, r1
 8000ca8:	d81f      	bhi.n	8000cea <__udivmoddi4+0x2b6>
 8000caa:	eba1 0109 	sub.w	r1, r1, r9
 8000cae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb2:	fb09 f804 	mul.w	r8, r9, r4
 8000cb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cba:	b292      	uxth	r2, r2
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	4542      	cmp	r2, r8
 8000cc2:	d229      	bcs.n	8000d18 <__udivmoddi4+0x2e4>
 8000cc4:	18ba      	adds	r2, r7, r2
 8000cc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cca:	d2c4      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000ccc:	4542      	cmp	r2, r8
 8000cce:	d2c2      	bcs.n	8000c56 <__udivmoddi4+0x222>
 8000cd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cd4:	443a      	add	r2, r7
 8000cd6:	e7be      	b.n	8000c56 <__udivmoddi4+0x222>
 8000cd8:	45f0      	cmp	r8, lr
 8000cda:	d29d      	bcs.n	8000c18 <__udivmoddi4+0x1e4>
 8000cdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ce0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ce4:	3801      	subs	r0, #1
 8000ce6:	46e1      	mov	r9, ip
 8000ce8:	e796      	b.n	8000c18 <__udivmoddi4+0x1e4>
 8000cea:	eba7 0909 	sub.w	r9, r7, r9
 8000cee:	4449      	add	r1, r9
 8000cf0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cf4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf8:	fb09 f804 	mul.w	r8, r9, r4
 8000cfc:	e7db      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000cfe:	4673      	mov	r3, lr
 8000d00:	e77f      	b.n	8000c02 <__udivmoddi4+0x1ce>
 8000d02:	4650      	mov	r0, sl
 8000d04:	e766      	b.n	8000bd4 <__udivmoddi4+0x1a0>
 8000d06:	4608      	mov	r0, r1
 8000d08:	e6fd      	b.n	8000b06 <__udivmoddi4+0xd2>
 8000d0a:	443b      	add	r3, r7
 8000d0c:	3a02      	subs	r2, #2
 8000d0e:	e733      	b.n	8000b78 <__udivmoddi4+0x144>
 8000d10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d14:	443b      	add	r3, r7
 8000d16:	e71c      	b.n	8000b52 <__udivmoddi4+0x11e>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	e79c      	b.n	8000c56 <__udivmoddi4+0x222>
 8000d1c:	eba1 0109 	sub.w	r1, r1, r9
 8000d20:	46c4      	mov	ip, r8
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fb09 f804 	mul.w	r8, r9, r4
 8000d2a:	e7c4      	b.n	8000cb6 <__udivmoddi4+0x282>

08000d2c <__aeabi_idiv0>:
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <Check_valid_Frame>:
//    uint8_t data[MAX_PAYLOAD];
//    uint8_t CRC_val;
//}__attribute__((packed)) CrsF_Frame;


bool Check_valid_Frame(CrsF_Frame *frame){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    if(frame->header != CRSF_HEADER){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2bc8      	cmp	r3, #200	@ 0xc8
 8000d3e:	d001      	beq.n	8000d44 <Check_valid_Frame+0x14>
//        CDC_Transmit_FS((uint8_t *)"Invalid header", 16);
        return false;
 8000d40:	2300      	movs	r3, #0
 8000d42:	e01d      	b.n	8000d80 <Check_valid_Frame+0x50>
    }
    if(frame ->length <2 || frame ->length > (MAX_PAYLOAD+2)){
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	785b      	ldrb	r3, [r3, #1]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d903      	bls.n	8000d54 <Check_valid_Frame+0x24>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	785b      	ldrb	r3, [r3, #1]
 8000d50:	2b18      	cmp	r3, #24
 8000d52:	d901      	bls.n	8000d58 <Check_valid_Frame+0x28>
//        CDC_Transmit_FS((uint8_t *)"Invalid length", 14);
        return false;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e013      	b.n	8000d80 <Check_valid_Frame+0x50>
    }
    uint8_t calCRC = getCRC8(&frame->type , (frame->length)-1);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	1c9a      	adds	r2, r3, #2
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4619      	mov	r1, r3
 8000d66:	4610      	mov	r0, r2
 8000d68:	f000 f97a 	bl	8001060 <getCRC8>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	73fb      	strb	r3, [r7, #15]
    if(calCRC != frame->CRC_val){
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7e5b      	ldrb	r3, [r3, #25]
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d001      	beq.n	8000d7e <Check_valid_Frame+0x4e>
//        CDC_Transmit_FS((uint8_t *)"Invalid CRC", 12);
        return false;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <Check_valid_Frame+0x50>
    }
    return true;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Payload_CRsF>:
    }
    frame->CRC_val = getCRC8(&frame->type, (frame->length)-1);
}

//Xử lý payload với 16 kênh điều khiển
void Payload_CRsF(uint8_t* data){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
    CRsFChannel[0] = ((data[0]    | data[1] <<8)                     & 0x07FF);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b21a      	sxth	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b9a      	ldr	r3, [pc, #616]	@ (8001018 <Payload_CRsF+0x290>)
 8000db0:	801a      	strh	r2, [r3, #0]
    CRsFChannel[1] = ((data[1] >>3 | data[2] <<5)                     & 0x07FF);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	b21a      	sxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b21b      	sxth	r3, r3
 8000dc6:	015b      	lsls	r3, r3, #5
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b90      	ldr	r3, [pc, #576]	@ (8001018 <Payload_CRsF+0x290>)
 8000dd8:	805a      	strh	r2, [r3, #2]
    CRsFChannel[2] = ((data[2] >>6 | data[3] <<2 | data[4]<<10)      & 0x07FF);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3302      	adds	r3, #2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	099b      	lsrs	r3, r3, #6
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	b21a      	sxth	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3303      	adds	r3, #3
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	4313      	orrs	r3, r2
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b82      	ldr	r3, [pc, #520]	@ (8001018 <Payload_CRsF+0x290>)
 8000e10:	809a      	strh	r2, [r3, #4]
    CRsFChannel[3] = ((data[4] >>1 | data[5] <<7)                     & 0x07FF);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3304      	adds	r3, #4
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	085b      	lsrs	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3305      	adds	r3, #5
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	01db      	lsls	r3, r3, #7
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	4b78      	ldr	r3, [pc, #480]	@ (8001018 <Payload_CRsF+0x290>)
 8000e38:	80da      	strh	r2, [r3, #6]
    CRsFChannel[4] = ((data[5] >>4 | data[6] <<4)                     & 0x07FF);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3305      	adds	r3, #5
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3306      	adds	r3, #6
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	011b      	lsls	r3, r3, #4
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8001018 <Payload_CRsF+0x290>)
 8000e60:	811a      	strh	r2, [r3, #8]
    CRsFChannel[5] = ((data[6] >>7 | data[7] <<1 | data[8]<<9)       & 0x07FF);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3306      	adds	r3, #6
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	09db      	lsrs	r3, r3, #7
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3307      	adds	r3, #7
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3308      	adds	r3, #8
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	025b      	lsls	r3, r3, #9
 8000e88:	b21b      	sxth	r3, r3
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	b21b      	sxth	r3, r3
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b60      	ldr	r3, [pc, #384]	@ (8001018 <Payload_CRsF+0x290>)
 8000e98:	815a      	strh	r2, [r3, #10]
    CRsFChannel[6] = ((data[8] >>2 | data[9] <<6)                    & 0x07FF);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3308      	adds	r3, #8
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3309      	adds	r3, #9
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	019b      	lsls	r3, r3, #6
 8000eb0:	b21b      	sxth	r3, r3
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b56      	ldr	r3, [pc, #344]	@ (8001018 <Payload_CRsF+0x290>)
 8000ec0:	819a      	strh	r2, [r3, #12]
    CRsFChannel[7] = ((data[9] >>5 | data[10] <<3)                   & 0x07FF);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3309      	adds	r3, #9
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	095b      	lsrs	r3, r3, #5
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	b21a      	sxth	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	330a      	adds	r3, #10
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b4c      	ldr	r3, [pc, #304]	@ (8001018 <Payload_CRsF+0x290>)
 8000ee8:	81da      	strh	r2, [r3, #14]
    CRsFChannel[8] = ((data[11]   | data[12] <<8)                    & 0x07FF);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	330b      	adds	r3, #11
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b43      	ldr	r3, [pc, #268]	@ (8001018 <Payload_CRsF+0x290>)
 8000f0c:	821a      	strh	r2, [r3, #16]
    CRsFChannel[9] = ((data[12] >>3 | data[13] <<5)                  & 0x07FF);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	330c      	adds	r3, #12
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	08db      	lsrs	r3, r3, #3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	330d      	adds	r3, #13
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b21b      	sxth	r3, r3
 8000f22:	015b      	lsls	r3, r3, #5
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b39      	ldr	r3, [pc, #228]	@ (8001018 <Payload_CRsF+0x290>)
 8000f34:	825a      	strh	r2, [r3, #18]
    CRsFChannel[10] = ((data[13] >>6 | data[14] <<2 | data[15] <<10) & 0x07FF);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	330d      	adds	r3, #13
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	099b      	lsrs	r3, r3, #6
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	330e      	adds	r3, #14
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	330f      	adds	r3, #15
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <Payload_CRsF+0x290>)
 8000f6c:	829a      	strh	r2, [r3, #20]
    CRsFChannel[11] = ((data[15] >>1 | data[16] <<7)                 & 0x07FF);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	330f      	adds	r3, #15
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	085b      	lsrs	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3310      	adds	r3, #16
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	01db      	lsls	r3, r3, #7
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <Payload_CRsF+0x290>)
 8000f94:	82da      	strh	r2, [r3, #22]
    CRsFChannel[12] = ((data[16] >>4 | data[17] <<4)                 & 0x07FF);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3310      	adds	r3, #16
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3311      	adds	r3, #17
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <Payload_CRsF+0x290>)
 8000fbc:	831a      	strh	r2, [r3, #24]
    CRsFChannel[13] = ((data[17] >>7 | data[18] <<1 | data[19] <<9)  & 0x07FF);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3311      	adds	r3, #17
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	09db      	lsrs	r3, r3, #7
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3312      	adds	r3, #18
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3313      	adds	r3, #19
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	025b      	lsls	r3, r3, #9
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b21b      	sxth	r3, r3
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <Payload_CRsF+0x290>)
 8000ff4:	835a      	strh	r2, [r3, #26]
    CRsFChannel[14] = ((data[19] >>2 | data[20] <<6)                 & 0x07FF);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3313      	adds	r3, #19
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3314      	adds	r3, #20
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b21b      	sxth	r3, r3
 800100a:	019b      	lsls	r3, r3, #6
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	e002      	b.n	800101c <Payload_CRsF+0x294>
 8001016:	bf00      	nop
 8001018:	2000007c 	.word	0x2000007c
 800101c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <Payload_CRsF+0x2d4>)
 8001024:	839a      	strh	r2, [r3, #28]
    CRsFChannel[15] = ((data[20] >>5 | data[21] <<3)                 & 0x07FF);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3314      	adds	r3, #20
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	095b      	lsrs	r3, r3, #5
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b21a      	sxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3315      	adds	r3, #21
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	b21b      	sxth	r3, r3
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <Payload_CRsF+0x2d4>)
 800104c:	83da      	strh	r2, [r3, #30]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000007c 	.word	0x2000007c

08001060 <getCRC8>:

//CRC8
 uint8_t getCRC8(uint8_t *buf, uint8_t size)
{
 8001060:	b480      	push	{r7}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc8 = 0x00;
 800106c:	2300      	movs	r3, #0
 800106e:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < size; i++)
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	e022      	b.n	80010bc <getCRC8+0x5c>
    {
        crc8 ^= buf[i];
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	4053      	eors	r3, r2
 8001082:	75fb      	strb	r3, [r7, #23]

        for (int j = 0; j < 8; j++)
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	e012      	b.n	80010b0 <getCRC8+0x50>
        {
            if (crc8 & 0x80)
 800108a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800108e:	2b00      	cmp	r3, #0
 8001090:	da08      	bge.n	80010a4 <getCRC8+0x44>
            {
                crc8 <<= 1;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	75fb      	strb	r3, [r7, #23]
                crc8 ^= CRSF_CRC_POLY;
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	f083 032a 	eor.w	r3, r3, #42	@ 0x2a
 800109e:	43db      	mvns	r3, r3
 80010a0:	75fb      	strb	r3, [r7, #23]
 80010a2:	e002      	b.n	80010aa <getCRC8+0x4a>
            }
            else
            {
                crc8 <<= 1;
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; j++)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	dde9      	ble.n	800108a <getCRC8+0x2a>
    for (int i = 0; i < size; i++)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	3301      	adds	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dbd8      	blt.n	8001076 <getCRC8+0x16>
            }
        }
    }
    return crc8;
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <Check_Status>:
//    Wait_CRC,
//}CRsF_Status;



bool Check_Status(uint8_t byte , CrsF_Frame* frame){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
    switch(status){
 80010e0:	4b3c      	ldr	r3, [pc, #240]	@ (80011d4 <Check_Status+0x100>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d86f      	bhi.n	80011c8 <Check_Status+0xf4>
 80010e8:	a201      	add	r2, pc, #4	@ (adr r2, 80010f0 <Check_Status+0x1c>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001105 	.word	0x08001105
 80010f4:	0800111f 	.word	0x0800111f
 80010f8:	0800114d 	.word	0x0800114d
 80010fc:	08001171 	.word	0x08001171
 8001100:	0800119d 	.word	0x0800119d
        case Wait_Header:
            if(byte == CRSF_HEADER){
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2bc8      	cmp	r3, #200	@ 0xc8
 8001108:	d15b      	bne.n	80011c2 <Check_Status+0xee>
                frame_buff[0] = byte;
 800110a:	4a33      	ldr	r2, [pc, #204]	@ (80011d8 <Check_Status+0x104>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	7013      	strb	r3, [r2, #0]
                frame_index = 1;
 8001110:	4b32      	ldr	r3, [pc, #200]	@ (80011dc <Check_Status+0x108>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
                status = Wait_Length;
 8001116:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <Check_Status+0x100>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800111c:	e051      	b.n	80011c2 <Check_Status+0xee>

        case Wait_Length:
            if(byte >=2 && byte <= (MAX_PAYLOAD+2)){
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d90f      	bls.n	8001144 <Check_Status+0x70>
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b18      	cmp	r3, #24
 8001128:	d80c      	bhi.n	8001144 <Check_Status+0x70>
                frame_buff[1] = byte;
 800112a:	4a2b      	ldr	r2, [pc, #172]	@ (80011d8 <Check_Status+0x104>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	7053      	strb	r3, [r2, #1]
                expected_length = byte;
 8001130:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <Check_Status+0x10c>)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	7013      	strb	r3, [r2, #0]
                frame_index = 2;
 8001136:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <Check_Status+0x108>)
 8001138:	2202      	movs	r2, #2
 800113a:	701a      	strb	r2, [r3, #0]
                status = Wait_Type;
 800113c:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <Check_Status+0x100>)
 800113e:	2202      	movs	r2, #2
 8001140:	701a      	strb	r2, [r3, #0]
            }else{
                status = Wait_Header;
            }
            break;
 8001142:	e041      	b.n	80011c8 <Check_Status+0xf4>
                status = Wait_Header;
 8001144:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <Check_Status+0x100>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
            break;
 800114a:	e03d      	b.n	80011c8 <Check_Status+0xf4>

        case Wait_Type:
            frame_buff[2] = byte;
 800114c:	4a22      	ldr	r2, [pc, #136]	@ (80011d8 <Check_Status+0x104>)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	7093      	strb	r3, [r2, #2]
            frame_index = 3;
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <Check_Status+0x108>)
 8001154:	2203      	movs	r2, #3
 8001156:	701a      	strb	r2, [r3, #0]
            if(expected_length ==2){
 8001158:	4b21      	ldr	r3, [pc, #132]	@ (80011e0 <Check_Status+0x10c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b02      	cmp	r3, #2
 800115e:	d103      	bne.n	8001168 <Check_Status+0x94>
                status = Wait_CRC;
 8001160:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <Check_Status+0x100>)
 8001162:	2204      	movs	r2, #4
 8001164:	701a      	strb	r2, [r3, #0]
            }else{
                status = Wait_PayLoad;
            }
            break;
 8001166:	e02f      	b.n	80011c8 <Check_Status+0xf4>
                status = Wait_PayLoad;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <Check_Status+0x100>)
 800116a:	2203      	movs	r2, #3
 800116c:	701a      	strb	r2, [r3, #0]
            break;
 800116e:	e02b      	b.n	80011c8 <Check_Status+0xf4>

        case Wait_PayLoad:
            frame_buff[frame_index] = byte;
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <Check_Status+0x108>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <Check_Status+0x104>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	5453      	strb	r3, [r2, r1]
            frame_index++;
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <Check_Status+0x108>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <Check_Status+0x108>)
 8001186:	701a      	strb	r2, [r3, #0]
            if(frame_index >= (expected_length + 1)){
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <Check_Status+0x10c>)
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <Check_Status+0x108>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d218      	bcs.n	80011c6 <Check_Status+0xf2>
                status = Wait_CRC;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <Check_Status+0x100>)
 8001196:	2204      	movs	r2, #4
 8001198:	701a      	strb	r2, [r3, #0]
            }
            break;
 800119a:	e014      	b.n	80011c6 <Check_Status+0xf2>

        case Wait_CRC:
            frame_buff[frame_index] = byte;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <Check_Status+0x108>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <Check_Status+0x104>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	5453      	strb	r3, [r2, r1]
            memcpy(frame, frame_buff, (frame_index+1));
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <Check_Status+0x108>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	461a      	mov	r2, r3
 80011b0:	4909      	ldr	r1, [pc, #36]	@ (80011d8 <Check_Status+0x104>)
 80011b2:	6838      	ldr	r0, [r7, #0]
 80011b4:	f007 fc36 	bl	8008a24 <memcpy>
            status = Wait_Header;
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <Check_Status+0x100>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
            return true;
 80011be:	2301      	movs	r3, #1
 80011c0:	e003      	b.n	80011ca <Check_Status+0xf6>
            break;
 80011c2:	bf00      	nop
 80011c4:	e000      	b.n	80011c8 <Check_Status+0xf4>
            break;
 80011c6:	bf00      	nop
            break;
    }
    return false;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000c2 	.word	0x200000c2
 80011d8:	200000c4 	.word	0x200000c4
 80011dc:	200000de 	.word	0x200000de
 80011e0:	200000df 	.word	0x200000df

080011e4 <map_float>:
float map_float(float x, float in_min, float in_max, float out_min, float out_max) {
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	ed87 0a05 	vstr	s0, [r7, #20]
 80011ee:	edc7 0a04 	vstr	s1, [r7, #16]
 80011f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80011f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80011fa:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80011fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001202:	edd7 7a04 	vldr	s15, [r7, #16]
 8001206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800120a:	edd7 6a01 	vldr	s13, [r7, #4]
 800120e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001212:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001216:	ee67 6a27 	vmul.f32	s13, s14, s15
 800121a:	ed97 7a03 	vldr	s14, [r7, #12]
 800121e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800122a:	edd7 7a02 	vldr	s15, [r7, #8]
 800122e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001232:	eeb0 0a67 	vmov.f32	s0, s15
 8001236:	371c      	adds	r7, #28
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <CRsF_Process>:
void CRsF_Process(CrsF_Frame*frame){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    if(frame == NULL){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80ad 	beq.w	80013aa <CRsF_Process+0x16a>
//        CDC_Transmit_FS((uint8_t*)"Frame NULL", 10);
        return;
    }

    if(!Check_valid_Frame(frame)){
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fd6d 	bl	8000d30 <Check_valid_Frame>
 8001256:	4603      	mov	r3, r0
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	f040 80a5 	bne.w	80013ae <CRsF_Process+0x16e>
//        CDC_Transmit_FS((uint8_t*)"Frame Invalid", 12);
        return;
    }

    uint8_t total_length = frame->length + 2;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	785b      	ldrb	r3, [r3, #1]
 8001268:	3302      	adds	r3, #2
 800126a:	72fb      	strb	r3, [r7, #11]
    if(total_length > MAX_FRAME_SIZE){
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	2b1a      	cmp	r3, #26
 8001270:	f200 809f 	bhi.w	80013b2 <CRsF_Process+0x172>
//        CDC_Transmit_FS((uint8_t*)"Frame too long", 14);
        return;
    }

    Data_Frame[0] = frame->header;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	4b50      	ldr	r3, [pc, #320]	@ (80013bc <CRsF_Process+0x17c>)
 800127a:	701a      	strb	r2, [r3, #0]
    Data_Frame[1] = frame->length;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	785a      	ldrb	r2, [r3, #1]
 8001280:	4b4e      	ldr	r3, [pc, #312]	@ (80013bc <CRsF_Process+0x17c>)
 8001282:	705a      	strb	r2, [r3, #1]
    Data_Frame[2] = frame->type;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	789a      	ldrb	r2, [r3, #2]
 8001288:	4b4c      	ldr	r3, [pc, #304]	@ (80013bc <CRsF_Process+0x17c>)
 800128a:	709a      	strb	r2, [r3, #2]
    uint8_t payload_length = frame->length - 2;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	3b02      	subs	r3, #2
 8001292:	72bb      	strb	r3, [r7, #10]
    for(int i = 0 ; i<payload_length ; i++){
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e00b      	b.n	80012b2 <CRsF_Process+0x72>
        Data_Frame[i+3] = frame->data[i];
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3303      	adds	r3, #3
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	440a      	add	r2, r1
 80012a4:	3203      	adds	r2, #3
 80012a6:	7811      	ldrb	r1, [r2, #0]
 80012a8:	4a44      	ldr	r2, [pc, #272]	@ (80013bc <CRsF_Process+0x17c>)
 80012aa:	54d1      	strb	r1, [r2, r3]
    for(int i = 0 ; i<payload_length ; i++){
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	7abb      	ldrb	r3, [r7, #10]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbef      	blt.n	800129a <CRsF_Process+0x5a>
    }
    Data_Frame[3+payload_length] = frame->CRC_val;
 80012ba:	7abb      	ldrb	r3, [r7, #10]
 80012bc:	3303      	adds	r3, #3
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	7e51      	ldrb	r1, [r2, #25]
 80012c2:	4a3e      	ldr	r2, [pc, #248]	@ (80013bc <CRsF_Process+0x17c>)
 80012c4:	54d1      	strb	r1, [r2, r3]

    if(frame->type == RC_Channel && payload_length >= 22){
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	789b      	ldrb	r3, [r3, #2]
 80012ca:	2b16      	cmp	r3, #22
 80012cc:	d107      	bne.n	80012de <CRsF_Process+0x9e>
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	2b15      	cmp	r3, #21
 80012d2:	d904      	bls.n	80012de <CRsF_Process+0x9e>
        Payload_CRsF(frame->data);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3303      	adds	r3, #3
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fd55 	bl	8000d88 <Payload_CRsF>
//			CRsFChannel[CH_ROLL],
//			CRsFChannel[CH_PITCH],
//			CRsFChannel[CH_YAW],
//			CRsFChannel[CH_ARM]);
//    CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
    ScaledControllerOutput[CH_THROTTLE] = map_float(CRsFChannel[CH_THROTTLE], 183, 1811, 0, 1700);
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <CRsF_Process+0x180>)
 80012e0:	885b      	ldrh	r3, [r3, #2]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 80013c4 <CRsF_Process+0x184>
 80012ee:	eddf 1a36 	vldr	s3, [pc, #216]	@ 80013c8 <CRsF_Process+0x188>
 80012f2:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 80013cc <CRsF_Process+0x18c>
 80012f6:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80013d0 <CRsF_Process+0x190>
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	f7ff ff71 	bl	80011e4 <map_float>
 8001302:	eef0 7a40 	vmov.f32	s15, s0
 8001306:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <CRsF_Process+0x194>)
 8001308:	edc3 7a01 	vstr	s15, [r3, #4]
    ScaledControllerOutput[CH_ROLL] = map_float(CRsFChannel[CH_ROLL], 175, 1805, 1000, 2000);
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <CRsF_Process+0x180>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001318:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 80013d8 <CRsF_Process+0x198>
 800131c:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 80013dc <CRsF_Process+0x19c>
 8001320:	ed9f 1a2f 	vldr	s2, [pc, #188]	@ 80013e0 <CRsF_Process+0x1a0>
 8001324:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 80013e4 <CRsF_Process+0x1a4>
 8001328:	eeb0 0a67 	vmov.f32	s0, s15
 800132c:	f7ff ff5a 	bl	80011e4 <map_float>
 8001330:	eef0 7a40 	vmov.f32	s15, s0
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <CRsF_Process+0x194>)
 8001336:	edc3 7a00 	vstr	s15, [r3]
    ScaledControllerOutput[CH_PITCH] = map_float(CRsFChannel[CH_PITCH], 174, 1811, 1000, 2000);
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <CRsF_Process+0x180>)
 800133c:	889b      	ldrh	r3, [r3, #4]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001346:	ed9f 2a24 	vldr	s4, [pc, #144]	@ 80013d8 <CRsF_Process+0x198>
 800134a:	eddf 1a24 	vldr	s3, [pc, #144]	@ 80013dc <CRsF_Process+0x19c>
 800134e:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80013cc <CRsF_Process+0x18c>
 8001352:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80013e8 <CRsF_Process+0x1a8>
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	f7ff ff43 	bl	80011e4 <map_float>
 800135e:	eef0 7a40 	vmov.f32	s15, s0
 8001362:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <CRsF_Process+0x194>)
 8001364:	edc3 7a02 	vstr	s15, [r3, #8]
    ScaledControllerOutput[CH_YAW] = map_float(CRsFChannel[CH_YAW], 174, 1801, 1000, 2000);
 8001368:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <CRsF_Process+0x180>)
 800136a:	88db      	ldrh	r3, [r3, #6]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001374:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 80013d8 <CRsF_Process+0x198>
 8001378:	eddf 1a18 	vldr	s3, [pc, #96]	@ 80013dc <CRsF_Process+0x19c>
 800137c:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 80013ec <CRsF_Process+0x1ac>
 8001380:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80013e8 <CRsF_Process+0x1a8>
 8001384:	eeb0 0a67 	vmov.f32	s0, s15
 8001388:	f7ff ff2c 	bl	80011e4 <map_float>
 800138c:	eef0 7a40 	vmov.f32	s15, s0
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <CRsF_Process+0x194>)
 8001392:	edc3 7a03 	vstr	s15, [r3, #12]
    ScaledControllerOutput[CH_ARM] = CRsFChannel[CH_ARM];
 8001396:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <CRsF_Process+0x180>)
 8001398:	891b      	ldrh	r3, [r3, #8]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <CRsF_Process+0x194>)
 80013a4:	edc3 7a04 	vstr	s15, [r3, #16]
 80013a8:	e004      	b.n	80013b4 <CRsF_Process+0x174>
        return;
 80013aa:	bf00      	nop
 80013ac:	e002      	b.n	80013b4 <CRsF_Process+0x174>
        return;
 80013ae:	bf00      	nop
 80013b0:	e000      	b.n	80013b4 <CRsF_Process+0x174>
        return;
 80013b2:	bf00      	nop


}
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000a8 	.word	0x200000a8
 80013c0:	2000007c 	.word	0x2000007c
 80013c4:	44d48000 	.word	0x44d48000
 80013c8:	00000000 	.word	0x00000000
 80013cc:	44e26000 	.word	0x44e26000
 80013d0:	43370000 	.word	0x43370000
 80013d4:	200005fc 	.word	0x200005fc
 80013d8:	44fa0000 	.word	0x44fa0000
 80013dc:	447a0000 	.word	0x447a0000
 80013e0:	44e1a000 	.word	0x44e1a000
 80013e4:	432f0000 	.word	0x432f0000
 80013e8:	432e0000 	.word	0x432e0000
 80013ec:	44e12000 	.word	0x44e12000

080013f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <MX_DMA_Init+0xb8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a2a      	ldr	r2, [pc, #168]	@ (80014a8 <MX_DMA_Init+0xb8>)
 8001400:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b28      	ldr	r3, [pc, #160]	@ (80014a8 <MX_DMA_Init+0xb8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <MX_DMA_Init+0xb8>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a23      	ldr	r2, [pc, #140]	@ (80014a8 <MX_DMA_Init+0xb8>)
 800141c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_DMA_Init+0xb8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2101      	movs	r1, #1
 8001432:	200b      	movs	r0, #11
 8001434:	f002 fd43 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001438:	200b      	movs	r0, #11
 800143a:	f002 fd5c 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 1, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2101      	movs	r1, #1
 8001442:	200d      	movs	r0, #13
 8001444:	f002 fd3b 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001448:	200d      	movs	r0, #13
 800144a:	f002 fd54 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2101      	movs	r1, #1
 8001452:	200e      	movs	r0, #14
 8001454:	f002 fd33 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001458:	200e      	movs	r0, #14
 800145a:	f002 fd4c 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 1, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2101      	movs	r1, #1
 8001462:	202f      	movs	r0, #47	@ 0x2f
 8001464:	f002 fd2b 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001468:	202f      	movs	r0, #47	@ 0x2f
 800146a:	f002 fd44 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2101      	movs	r1, #1
 8001472:	2038      	movs	r0, #56	@ 0x38
 8001474:	f002 fd23 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001478:	2038      	movs	r0, #56	@ 0x38
 800147a:	f002 fd3c 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2039      	movs	r0, #57	@ 0x39
 8001484:	f002 fd1b 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001488:	2039      	movs	r0, #57	@ 0x39
 800148a:	f002 fd34 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 1, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2101      	movs	r1, #1
 8001492:	203b      	movs	r0, #59	@ 0x3b
 8001494:	f002 fd13 	bl	8003ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001498:	203b      	movs	r0, #59	@ 0x3b
 800149a:	f002 fd2c 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <Dshot_CalculateCRCandTelemtryBit>:
#include "dshot.h"



uint16_t Dshot_CalculateCRCandTelemtryBit(uint16_t value) {
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
    value = value << 1;
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	80fb      	strh	r3, [r7, #6]
    return ((value ^ (value >> 4) ^ (value >> 8))) & 0x0F;
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	4053      	eors	r3, r2
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4053      	eors	r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	b29b      	uxth	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <Dshot_GetDshotFrame>:

uint16_t Dshot_GetDshotFrame(uint16_t value) {
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	80fb      	strh	r3, [r7, #6]
    return ((value << 5) | Dshot_CalculateCRCandTelemtryBit(value));
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	015b      	lsls	r3, r3, #5
 80014f4:	b21c      	sxth	r4, r3
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ffd7 	bl	80014ac <Dshot_CalculateCRCandTelemtryBit>
 80014fe:	4603      	mov	r3, r0
 8001500:	b21b      	sxth	r3, r3
 8001502:	4323      	orrs	r3, r4
 8001504:	b21b      	sxth	r3, r3
 8001506:	b29b      	uxth	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bd90      	pop	{r4, r7, pc}

08001510 <Dshot_DMABuffer_init>:

void Dshot_DMABuffer_init(uint32_t *MemoryBuffer){
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MEM_BUFFER_LENGTH ; i++){
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e008      	b.n	8001530 <Dshot_DMABuffer_init+0x20>
		MemoryBuffer[i] = BIT_0_CCR_REG_VALUE;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	2269      	movs	r2, #105	@ 0x69
 8001528:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MEM_BUFFER_LENGTH ; i++){
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	ddf3      	ble.n	800151e <Dshot_DMABuffer_init+0xe>
	}

}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <Dshot_MemoryBuffer_init>:
void Dshot_MemoryBuffer_init(uint32_t *dmaBuffer){
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	for (int i = MEM_BUFFER_LENGTH; i < DMA_BUFFER_LENGTH; i++){
 800154c:	2310      	movs	r3, #16
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e008      	b.n	8001564 <Dshot_MemoryBuffer_init+0x20>
		dmaBuffer[i] = 0;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
	for (int i = MEM_BUFFER_LENGTH; i < DMA_BUFFER_LENGTH; i++){
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3301      	adds	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b1f      	cmp	r3, #31
 8001568:	ddf3      	ble.n	8001552 <Dshot_MemoryBuffer_init+0xe>
	}

}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <Dshot_Calibrate>:
            (DshotFrame & 0x01) ? BIT_1_CCR_REG_VALUE : BIT_0_CCR_REG_VALUE;
        DshotFrame >>= 1;
    }
}

void Dshot_Calibrate(uint32_t *mem_buffer) {
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	e008      	b.n	8001598 <Dshot_Calibrate+0x20>
        mem_buffer[i] = BIT_0_CCR_REG_VALUE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	2269      	movs	r2, #105	@ 0x69
 8001590:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	ddf3      	ble.n	8001586 <Dshot_Calibrate+0xe>
    }
}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <Dshot_PrepareFrame>:

void Dshot_PrepareFrame(uint16_t throttleValue, uint32_t *mem_buffer) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	80fb      	strh	r3, [r7, #6]
	throttleValue += 48; //vì Dshot đi từ 48 -> 2047
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	3330      	adds	r3, #48	@ 0x30
 80015bc:	80fb      	strh	r3, [r7, #6]
    uint16_t frame = Dshot_GetDshotFrame(throttleValue);
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff8f 	bl	80014e4 <Dshot_GetDshotFrame>
 80015c6:	4603      	mov	r3, r0
 80015c8:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	e014      	b.n	80015fa <Dshot_PrepareFrame+0x4e>
        mem_buffer[MEM_BUFFER_LENGTH - 1 - i] =
            (frame & 0x01) ? BIT_1_CCR_REG_VALUE : BIT_0_CCR_REG_VALUE;
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <Dshot_PrepareFrame+0x32>
 80015da:	22d2      	movs	r2, #210	@ 0xd2
 80015dc:	e000      	b.n	80015e0 <Dshot_PrepareFrame+0x34>
 80015de:	2269      	movs	r2, #105	@ 0x69
        mem_buffer[MEM_BUFFER_LENGTH - 1 - i] =
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f1c3 030f 	rsb	r3, r3, #15
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	6839      	ldr	r1, [r7, #0]
 80015ea:	440b      	add	r3, r1
 80015ec:	601a      	str	r2, [r3, #0]
        frame >>= 1;
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	3301      	adds	r3, #1
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	dde7      	ble.n	80015d0 <Dshot_PrepareFrame+0x24>
    }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <IIR_Filter_1D_Init>:
#include "filter.h"

void IIR_Filter_1D_Init(IIR_Filter_1D *f, float alpha, float beta){
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	ed87 0a02 	vstr	s0, [r7, #8]
 8001616:	edc7 0a01 	vstr	s1, [r7, #4]
    f->alpha = alpha;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	601a      	str	r2, [r3, #0]
    f->beta = beta;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	605a      	str	r2, [r3, #4]
    f->prev_input = 0.0f;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    f->prev_output = 0.0f;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <IIR_Filter_1D_Update>:
float IIR_Filter_1D_Update(IIR_Filter_1D *f, float input){
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	ed87 0a00 	vstr	s0, [r7]
    float output = f->alpha * f->prev_output + f->beta * input + f->beta * f->prev_input;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 7a02 	vldr	s15, [r3, #8]
 800165a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edd3 6a01 	vldr	s13, [r3, #4]
 8001664:	edd7 7a00 	vldr	s15, [r7]
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	edd3 6a01 	vldr	s13, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a03 	vldr	s15, [r3, #12]
 800167c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev_input = input;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	60da      	str	r2, [r3, #12]
    f->prev_output = output;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	609a      	str	r2, [r3, #8]
    return output;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	ee07 3a90 	vmov	s15, r3
}
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <IIR_Filter_3D_Init>:
void IIR_Filter_3D_Init(IIR_Filter_3D *f, float alpha, float beta){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80016b4:	edc7 0a01 	vstr	s1, [r7, #4]
	IIR_Filter_1D_Init(&f->x, alpha, beta);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd7 0a01 	vldr	s1, [r7, #4]
 80016be:	ed97 0a02 	vldr	s0, [r7, #8]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffa1 	bl	800160a <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->y, alpha, beta);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3310      	adds	r3, #16
 80016cc:	edd7 0a01 	vldr	s1, [r7, #4]
 80016d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff98 	bl	800160a <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->z, alpha, beta);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3320      	adds	r3, #32
 80016de:	edd7 0a01 	vldr	s1, [r7, #4]
 80016e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff8f 	bl	800160a <IIR_Filter_1D_Init>
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <IIR_Filter_3D_Update>:
void IIR_Filter_3D_Update(IIR_Filter_3D *f, float x_in, float y_in, float z_in, float *x_out, float *y_out, float *z_out){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	61f8      	str	r0, [r7, #28]
 80016fc:	ed87 0a06 	vstr	s0, [r7, #24]
 8001700:	edc7 0a05 	vstr	s1, [r7, #20]
 8001704:	ed87 1a04 	vstr	s2, [r7, #16]
 8001708:	60f9      	str	r1, [r7, #12]
 800170a:	60ba      	str	r2, [r7, #8]
 800170c:	607b      	str	r3, [r7, #4]
    *x_out = IIR_Filter_1D_Update(&f->x, x_in);
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	ed97 0a06 	vldr	s0, [r7, #24]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff94 	bl	8001642 <IIR_Filter_1D_Update>
 800171a:	eef0 7a40 	vmov.f32	s15, s0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	edc3 7a00 	vstr	s15, [r3]
    *y_out = IIR_Filter_1D_Update(&f->y, y_in);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3310      	adds	r3, #16
 8001728:	ed97 0a05 	vldr	s0, [r7, #20]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff88 	bl	8001642 <IIR_Filter_1D_Update>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	edc3 7a00 	vstr	s15, [r3]
    *z_out = IIR_Filter_1D_Update(&f->z, z_in);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	3320      	adds	r3, #32
 8001740:	ed97 0a04 	vldr	s0, [r7, #16]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff7c 	bl	8001642 <IIR_Filter_1D_Update>
 800174a:	eef0 7a40 	vmov.f32	s15, s0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	edc3 7a00 	vstr	s15, [r3]
}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <MX_GPIO_Init+0x98>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	4a1e      	ldr	r2, [pc, #120]	@ (80017f4 <MX_GPIO_Init+0x98>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	@ 0x30
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <MX_GPIO_Init+0x98>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <MX_GPIO_Init+0x98>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <MX_GPIO_Init+0x98>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <MX_GPIO_Init+0x98>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_GPIO_Init+0x98>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <MX_GPIO_Init+0x98>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_GPIO_Init+0x98>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2110      	movs	r1, #16
 80017ca:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 80017cc:	f003 f94c 	bl	8004a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017d0:	2310      	movs	r3, #16
 80017d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4804      	ldr	r0, [pc, #16]	@ (80017f8 <MX_GPIO_Init+0x9c>)
 80017e8:	f002 ffa2 	bl	8004730 <HAL_GPIO_Init>

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_TIM_PeriodElapsedCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800180c:	d10c      	bne.n	8001828 <HAL_TIM_PeriodElapsedCallback+0x2c>
        if (mpu.state == 0) {
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001810:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <HAL_TIM_PeriodElapsedCallback+0x2c>
            mpu.state = 1; // request new transfer
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            MPU6000_Start_DMA(&mpu);
 8001822:	4803      	ldr	r0, [pc, #12]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001824:	f000 ffb4 	bl	8002790 <MPU6000_Start_DMA>
        }
    }
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000022c 	.word	0x2000022c

08001834 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a09      	ldr	r2, [pc, #36]	@ (8001868 <HAL_SPI_TxRxCpltCallback+0x34>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d10c      	bne.n	8001860 <HAL_SPI_TxRxCpltCallback+0x2c>
        HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2110      	movs	r1, #16
 800184a:	4808      	ldr	r0, [pc, #32]	@ (800186c <HAL_SPI_TxRxCpltCallback+0x38>)
 800184c:	f003 f90c 	bl	8004a68 <HAL_GPIO_WritePin>
        mpu.state = 2; // DMA finished
 8001850:	4b07      	ldr	r3, [pc, #28]	@ (8001870 <HAL_SPI_TxRxCpltCallback+0x3c>)
 8001852:	2202      	movs	r2, #2
 8001854:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        mpu.spi_transfer_done = true;
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800185a:	2201      	movs	r2, #1
 800185c:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40013000 	.word	0x40013000
 800186c:	40020000 	.word	0x40020000
 8001870:	2000022c 	.word	0x2000022c

08001874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:




void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b4b0      	push	{r4, r5, r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2b      	ldr	r2, [pc, #172]	@ (8001930 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xbc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d125      	bne.n	80018d2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5e>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7f1b      	ldrb	r3, [r3, #28]
 800188a:	2b04      	cmp	r3, #4
 800188c:	d10e      	bne.n	80018ac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
        {
            memcpy(DShot_DMABufferMotor2, DShot_MemoryBufferMotor2,
 800188e:	4a29      	ldr	r2, [pc, #164]	@ (8001934 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc0>)
 8001890:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc4>)
 8001892:	4614      	mov	r4, r2
 8001894:	461d      	mov	r5, r3
 8001896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {
            memcpy(DShot_DMABufferMotor4, DShot_MemoryBufferMotor4,
                   MEM_BUFFER_LENGTH * sizeof(DShot_DMABufferMotor4[0]));
        }
    }
}
 80018aa:	e03c      	b.n	8001926 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7f1b      	ldrb	r3, [r3, #28]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d138      	bne.n	8001926 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
            memcpy(DShot_DMABufferMotor3, DShot_MemoryBufferMotor3,
 80018b4:	4a21      	ldr	r2, [pc, #132]	@ (800193c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>)
 80018b6:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xcc>)
 80018b8:	4614      	mov	r4, r2
 80018ba:	461d      	mov	r5, r3
 80018bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80018d0:	e029      	b.n	8001926 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
    else if (htim->Instance == TIM3){
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001944 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d124      	bne.n	8001926 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7f1b      	ldrb	r3, [r3, #28]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d10e      	bne.n	8001902 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x8e>
            memcpy(DShot_DMABufferMotor1, DShot_MemoryBufferMotor1,
 80018e4:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>)
 80018e6:	4b19      	ldr	r3, [pc, #100]	@ (800194c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd8>)
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001900:	e011      	b.n	8001926 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7f1b      	ldrb	r3, [r3, #28]
 8001906:	2b04      	cmp	r3, #4
 8001908:	d10d      	bne.n	8001926 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb2>
            memcpy(DShot_DMABufferMotor4, DShot_MemoryBufferMotor4,
 800190a:	4a11      	ldr	r2, [pc, #68]	@ (8001950 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xdc>)
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xe0>)
 800190e:	4614      	mov	r4, r2
 8001910:	461d      	mov	r5, r3
 8001912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001922:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bcb0      	pop	{r4, r5, r7}
 800192e:	4770      	bx	lr
 8001930:	40000c00 	.word	0x40000c00
 8001934:	200003c0 	.word	0x200003c0
 8001938:	20000380 	.word	0x20000380
 800193c:	20000480 	.word	0x20000480
 8001940:	20000440 	.word	0x20000440
 8001944:	40000400 	.word	0x40000400
 8001948:	20000300 	.word	0x20000300
 800194c:	200002c0 	.word	0x200002c0
 8001950:	20000540 	.word	0x20000540
 8001954:	20000500 	.word	0x20000500

08001958 <constrain>:
static inline float constrain(float value, float min_val, float max_val)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001962:	edc7 0a02 	vstr	s1, [r7, #8]
 8001966:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_val) return min_val;
 800196a:	ed97 7a03 	vldr	s14, [r7, #12]
 800196e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d501      	bpl.n	8001980 <constrain+0x28>
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	e00b      	b.n	8001998 <constrain+0x40>
    else if (value > max_val) return max_val;
 8001980:	ed97 7a03 	vldr	s14, [r7, #12]
 8001984:	edd7 7a01 	vldr	s15, [r7, #4]
 8001988:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800198c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001990:	dd01      	ble.n	8001996 <constrain+0x3e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	e000      	b.n	8001998 <constrain+0x40>
    else return value;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <init_PIDs>:
float get_roll(float Ax, float Az) {
    return atan2f(-Ax, Az) * 180.0f / M_PI;
}

void init_PIDs(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
//    PID_Init(&pid_roll,  1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
//    PID_Init(&pid_pitch, 1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
//    PID_Init(&pid_yaw,   2.0f, 0.0f, 0.10f, 400.0f, 100.0f);
	PID_Init(&PID_Controller_Pitch.inner_loop, PID_KP_PITCH_INNER, PID_KI_PITCH_INNER, PID_KD_PITCH_INNER, 200.0f, 50.0f);
 80019b0:	ed9f 2a27 	vldr	s4, [pc, #156]	@ 8001a50 <init_PIDs+0xa4>
 80019b4:	eddf 1a27 	vldr	s3, [pc, #156]	@ 8001a54 <init_PIDs+0xa8>
 80019b8:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8001a58 <init_PIDs+0xac>
 80019bc:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001a58 <init_PIDs+0xac>
 80019c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80019c4:	4825      	ldr	r0, [pc, #148]	@ (8001a5c <init_PIDs+0xb0>)
 80019c6:	f001 f8ea 	bl	8002b9e <PID_Init>
	PID_Init(&PID_Controller_Roll.inner_loop, PID_KP_ROLL_INNER, PID_KI_ROLL_INNER, PID_KD_ROLL_INNER, 200.0f, 50.0f);
 80019ca:	ed9f 2a21 	vldr	s4, [pc, #132]	@ 8001a50 <init_PIDs+0xa4>
 80019ce:	eddf 1a21 	vldr	s3, [pc, #132]	@ 8001a54 <init_PIDs+0xa8>
 80019d2:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8001a58 <init_PIDs+0xac>
 80019d6:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8001a58 <init_PIDs+0xac>
 80019da:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80019de:	4820      	ldr	r0, [pc, #128]	@ (8001a60 <init_PIDs+0xb4>)
 80019e0:	f001 f8dd 	bl	8002b9e <PID_Init>
	PID_Init(&PID_Controller_Yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW, 400.0f, 100.0f);
 80019e4:	ed9f 2a1f 	vldr	s4, [pc, #124]	@ 8001a64 <init_PIDs+0xb8>
 80019e8:	eddf 1a1f 	vldr	s3, [pc, #124]	@ 8001a68 <init_PIDs+0xbc>
 80019ec:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8001a58 <init_PIDs+0xac>
 80019f0:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001a58 <init_PIDs+0xac>
 80019f4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80019f8:	481c      	ldr	r0, [pc, #112]	@ (8001a6c <init_PIDs+0xc0>)
 80019fa:	f001 f8d0 	bl	8002b9e <PID_Init>

	PID_Init(&PID_Controller_Pitch.outer_loop, PID_KP_PITCH_OUTER, PID_KI_PITCH_OUTER, PID_KD_PITCH_OUTER, 200.0f, 50.0f);
 80019fe:	ed9f 2a14 	vldr	s4, [pc, #80]	@ 8001a50 <init_PIDs+0xa4>
 8001a02:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8001a54 <init_PIDs+0xa8>
 8001a06:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8001a0a:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001a70 <init_PIDs+0xc4>
 8001a0e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001a12:	4818      	ldr	r0, [pc, #96]	@ (8001a74 <init_PIDs+0xc8>)
 8001a14:	f001 f8c3 	bl	8002b9e <PID_Init>
	PID_Init(&PID_Controller_Roll.outer_loop, PID_KP_ROLL_OUTER, PID_KI_ROLL_OUTER, PID_KD_ROLL_OUTER, 200.0f, 50.0f);
 8001a18:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8001a50 <init_PIDs+0xa4>
 8001a1c:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8001a54 <init_PIDs+0xa8>
 8001a20:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8001a24:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8001a70 <init_PIDs+0xc4>
 8001a28:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001a78 <init_PIDs+0xcc>
 8001a2c:	4813      	ldr	r0, [pc, #76]	@ (8001a7c <init_PIDs+0xd0>)
 8001a2e:	f001 f8b6 	bl	8002b9e <PID_Init>
	PID_Init(&PID_Controller_Yaw_Rate, PID_KP_YAW_RATE, PID_KI_YAW_RATE, PID_KD_YAW_RATE, 200.0f, 50.0f);
 8001a32:	ed9f 2a07 	vldr	s4, [pc, #28]	@ 8001a50 <init_PIDs+0xa4>
 8001a36:	eddf 1a07 	vldr	s3, [pc, #28]	@ 8001a54 <init_PIDs+0xa8>
 8001a3a:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8001a58 <init_PIDs+0xac>
 8001a3e:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001a58 <init_PIDs+0xac>
 8001a42:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001a46:	480e      	ldr	r0, [pc, #56]	@ (8001a80 <init_PIDs+0xd4>)
 8001a48:	f001 f8a9 	bl	8002b9e <PID_Init>

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	42480000 	.word	0x42480000
 8001a54:	43480000 	.word	0x43480000
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	2000019c 	.word	0x2000019c
 8001a60:	2000013c 	.word	0x2000013c
 8001a64:	42c80000 	.word	0x42c80000
 8001a68:	43c80000 	.word	0x43c80000
 8001a6c:	200001cc 	.word	0x200001cc
 8001a70:	3f4ccccd 	.word	0x3f4ccccd
 8001a74:	2000016c 	.word	0x2000016c
 8001a78:	3e4ccccd 	.word	0x3e4ccccd
 8001a7c:	2000010c 	.word	0x2000010c
 8001a80:	200001fc 	.word	0x200001fc

08001a84 <CRSF_IdleHandler>:

void CRSF_IdleHandler(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
    uint16_t dma_remaining = __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <CRSF_IdleHandler+0xbc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	813b      	strh	r3, [r7, #8]
    uint16_t new_pos = CRSF_DMA_BUF_SIZE - dma_remaining;
 8001a92:	893b      	ldrh	r3, [r7, #8]
 8001a94:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001a98:	80fb      	strh	r3, [r7, #6]

    if(new_pos >= old_pos) {
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <CRSF_IdleHandler+0xc0>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	88fa      	ldrh	r2, [r7, #6]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d318      	bcc.n	8001ad6 <CRSF_IdleHandler+0x52>
        for(uint16_t i = old_pos; i < new_pos; i++) {
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <CRSF_IdleHandler+0xc0>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	81fb      	strh	r3, [r7, #14]
 8001aaa:	e00f      	b.n	8001acc <CRSF_IdleHandler+0x48>
            if(Check_Status(crsf_dma_buf[i], &receive_frame)) {
 8001aac:	89fb      	ldrh	r3, [r7, #14]
 8001aae:	4a26      	ldr	r2, [pc, #152]	@ (8001b48 <CRSF_IdleHandler+0xc4>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	4926      	ldr	r1, [pc, #152]	@ (8001b4c <CRSF_IdleHandler+0xc8>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fb0d 	bl	80010d4 <Check_Status>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <CRSF_IdleHandler+0x42>
                CRsF_Process(&receive_frame);
 8001ac0:	4822      	ldr	r0, [pc, #136]	@ (8001b4c <CRSF_IdleHandler+0xc8>)
 8001ac2:	f7ff fbbd 	bl	8001240 <CRsF_Process>
        for(uint16_t i = old_pos; i < new_pos; i++) {
 8001ac6:	89fb      	ldrh	r3, [r7, #14]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	81fb      	strh	r3, [r7, #14]
 8001acc:	89fa      	ldrh	r2, [r7, #14]
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3eb      	bcc.n	8001aac <CRSF_IdleHandler+0x28>
 8001ad4:	e02d      	b.n	8001b32 <CRSF_IdleHandler+0xae>
            }
        }
    } else {
        for(uint16_t i = old_pos; i < CRSF_DMA_BUF_SIZE; i++) {
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <CRSF_IdleHandler+0xc0>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	81bb      	strh	r3, [r7, #12]
 8001adc:	e00f      	b.n	8001afe <CRSF_IdleHandler+0x7a>
            if(Check_Status(crsf_dma_buf[i], &receive_frame)) {
 8001ade:	89bb      	ldrh	r3, [r7, #12]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <CRSF_IdleHandler+0xc4>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	4919      	ldr	r1, [pc, #100]	@ (8001b4c <CRSF_IdleHandler+0xc8>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff faf4 	bl	80010d4 <Check_Status>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <CRSF_IdleHandler+0x74>
                CRsF_Process(&receive_frame);
 8001af2:	4816      	ldr	r0, [pc, #88]	@ (8001b4c <CRSF_IdleHandler+0xc8>)
 8001af4:	f7ff fba4 	bl	8001240 <CRsF_Process>
        for(uint16_t i = old_pos; i < CRSF_DMA_BUF_SIZE; i++) {
 8001af8:	89bb      	ldrh	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	81bb      	strh	r3, [r7, #12]
 8001afe:	89bb      	ldrh	r3, [r7, #12]
 8001b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b02:	d9ec      	bls.n	8001ade <CRSF_IdleHandler+0x5a>
            }
        }
        for(uint16_t i = 0; i < new_pos; i++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	817b      	strh	r3, [r7, #10]
 8001b08:	e00f      	b.n	8001b2a <CRSF_IdleHandler+0xa6>
            if(Check_Status(crsf_dma_buf[i], &receive_frame)) {
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <CRSF_IdleHandler+0xc4>)
 8001b0e:	5cd3      	ldrb	r3, [r2, r3]
 8001b10:	490e      	ldr	r1, [pc, #56]	@ (8001b4c <CRSF_IdleHandler+0xc8>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fade 	bl	80010d4 <Check_Status>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <CRSF_IdleHandler+0xa0>
                CRsF_Process(&receive_frame);
 8001b1e:	480b      	ldr	r0, [pc, #44]	@ (8001b4c <CRSF_IdleHandler+0xc8>)
 8001b20:	f7ff fb8e 	bl	8001240 <CRsF_Process>
        for(uint16_t i = 0; i < new_pos; i++) {
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	3301      	adds	r3, #1
 8001b28:	817b      	strh	r3, [r7, #10]
 8001b2a:	897a      	ldrh	r2, [r7, #10]
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d3eb      	bcc.n	8001b0a <CRSF_IdleHandler+0x86>
            }
        }
    }

    old_pos = new_pos;
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <CRSF_IdleHandler+0xc0>)
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	8013      	strh	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000a58 	.word	0x20000a58
 8001b44:	20000690 	.word	0x20000690
 8001b48:	20000610 	.word	0x20000610
 8001b4c:	200005e0 	.word	0x200005e0

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	ed2d 8b02 	vpush	{d8}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5a:	f002 f83f 	bl	8003bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5e:	f000 fd07 	bl	8002570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b62:	f7ff fdfb 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b66:	f7ff fc43 	bl	80013f0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001b6a:	f001 fa75 	bl	8003058 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001b6e:	f001 fc43 	bl	80033f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b72:	f001 fc8d 	bl	8003490 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001b76:	f001 fd0f 	bl	8003598 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 8001b7a:	f001 ff55 	bl	8003a28 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //IIR_Filter_3D_Init(&acc_filtered, IIR_ACC_ALPHA, IIR_ACC_BETA);
  IIR_Filter_3D_Init(&gyro_filtered, IIR_GYR_ALPHA, IIR_GYR_BETA);
 8001b7e:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8001cc0 <main+0x170>
 8001b82:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001cc4 <main+0x174>
 8001b86:	4850      	ldr	r0, [pc, #320]	@ (8001cc8 <main+0x178>)
 8001b88:	f7ff fd8e 	bl	80016a8 <IIR_Filter_3D_Init>
  MPU6000_Init(&mpu, &hspi1);
 8001b8c:	494f      	ldr	r1, [pc, #316]	@ (8001ccc <main+0x17c>)
 8001b8e:	4850      	ldr	r0, [pc, #320]	@ (8001cd0 <main+0x180>)
 8001b90:	f000 fdb2 	bl	80026f8 <MPU6000_Init>

  mpu.state=0;
 8001b94:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd0 <main+0x180>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  for(int i=0;i<=14;i++) mpu.tx_buffer[i]=0xFF;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	e008      	b.n	8001bb4 <main+0x64>
 8001ba2:	4a4b      	ldr	r2, [pc, #300]	@ (8001cd0 <main+0x180>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3338      	adds	r3, #56	@ 0x38
 8001baa:	22ff      	movs	r2, #255	@ 0xff
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0e      	cmp	r3, #14
 8001bb8:	ddf3      	ble.n	8001ba2 <main+0x52>
  init_PIDs();
 8001bba:	f7ff fef7 	bl	80019ac <init_PIDs>
  MPU6000_Calibrate(&mpu);
 8001bbe:	4844      	ldr	r0, [pc, #272]	@ (8001cd0 <main+0x180>)
 8001bc0:	f000 ff22 	bl	8002a08 <MPU6000_Calibrate>

  Dshot_DMABuffer_init(DShot_DMABufferMotor1);
 8001bc4:	4843      	ldr	r0, [pc, #268]	@ (8001cd4 <main+0x184>)
 8001bc6:	f7ff fca3 	bl	8001510 <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor2);
 8001bca:	4843      	ldr	r0, [pc, #268]	@ (8001cd8 <main+0x188>)
 8001bcc:	f7ff fca0 	bl	8001510 <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor3);
 8001bd0:	4842      	ldr	r0, [pc, #264]	@ (8001cdc <main+0x18c>)
 8001bd2:	f7ff fc9d 	bl	8001510 <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor4);
 8001bd6:	4842      	ldr	r0, [pc, #264]	@ (8001ce0 <main+0x190>)
 8001bd8:	f7ff fc9a 	bl	8001510 <Dshot_DMABuffer_init>


  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor1);
 8001bdc:	4841      	ldr	r0, [pc, #260]	@ (8001ce4 <main+0x194>)
 8001bde:	f7ff fcb1 	bl	8001544 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor2);
 8001be2:	4841      	ldr	r0, [pc, #260]	@ (8001ce8 <main+0x198>)
 8001be4:	f7ff fcae 	bl	8001544 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor3);
 8001be8:	4840      	ldr	r0, [pc, #256]	@ (8001cec <main+0x19c>)
 8001bea:	f7ff fcab 	bl	8001544 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor4);
 8001bee:	4840      	ldr	r0, [pc, #256]	@ (8001cf0 <main+0x1a0>)
 8001bf0:	f7ff fca8 	bl	8001544 <Dshot_MemoryBuffer_init>

  Dshot_Calibrate(DShot_DMABufferMotor1);
 8001bf4:	4837      	ldr	r0, [pc, #220]	@ (8001cd4 <main+0x184>)
 8001bf6:	f7ff fcbf 	bl	8001578 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor2);
 8001bfa:	4837      	ldr	r0, [pc, #220]	@ (8001cd8 <main+0x188>)
 8001bfc:	f7ff fcbc 	bl	8001578 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor3);
 8001c00:	4836      	ldr	r0, [pc, #216]	@ (8001cdc <main+0x18c>)
 8001c02:	f7ff fcb9 	bl	8001578 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor4);
 8001c06:	4836      	ldr	r0, [pc, #216]	@ (8001ce0 <main+0x190>)
 8001c08:	f7ff fcb6 	bl	8001578 <Dshot_Calibrate>

  //HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_1, DShot_DMABufferMotor1, DMA_BUFFER_LENGTH);
  HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, DShot_DMABufferMotor1, DMA_BUFFER_LENGTH);
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	4a31      	ldr	r2, [pc, #196]	@ (8001cd4 <main+0x184>)
 8001c10:	210c      	movs	r1, #12
 8001c12:	4838      	ldr	r0, [pc, #224]	@ (8001cf4 <main+0x1a4>)
 8001c14:	f004 fcbc 	bl	8006590 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, DShot_DMABufferMotor2, DMA_BUFFER_LENGTH);
 8001c18:	2320      	movs	r3, #32
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd8 <main+0x188>)
 8001c1c:	2108      	movs	r1, #8
 8001c1e:	4836      	ldr	r0, [pc, #216]	@ (8001cf8 <main+0x1a8>)
 8001c20:	f004 fcb6 	bl	8006590 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, DShot_DMABufferMotor3, DMA_BUFFER_LENGTH);
 8001c24:	2320      	movs	r3, #32
 8001c26:	4a2d      	ldr	r2, [pc, #180]	@ (8001cdc <main+0x18c>)
 8001c28:	210c      	movs	r1, #12
 8001c2a:	4833      	ldr	r0, [pc, #204]	@ (8001cf8 <main+0x1a8>)
 8001c2c:	f004 fcb0 	bl	8006590 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_3, DShot_DMABufferMotor4, DMA_BUFFER_LENGTH);
 8001c30:	2320      	movs	r3, #32
 8001c32:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce0 <main+0x190>)
 8001c34:	2108      	movs	r1, #8
 8001c36:	482f      	ldr	r0, [pc, #188]	@ (8001cf4 <main+0x1a4>)
 8001c38:	f004 fcaa 	bl	8006590 <HAL_TIM_PWM_Start_DMA>
  motor_armed = true;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <main+0x1ac>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]

  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor1);
 8001c42:	4928      	ldr	r1, [pc, #160]	@ (8001ce4 <main+0x194>)
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff fcb1 	bl	80015ac <Dshot_PrepareFrame>
  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor2);
 8001c4a:	4927      	ldr	r1, [pc, #156]	@ (8001ce8 <main+0x198>)
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7ff fcad 	bl	80015ac <Dshot_PrepareFrame>
  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor3);
 8001c52:	4926      	ldr	r1, [pc, #152]	@ (8001cec <main+0x19c>)
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fca9 	bl	80015ac <Dshot_PrepareFrame>
  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor4);
 8001c5a:	4925      	ldr	r1, [pc, #148]	@ (8001cf0 <main+0x1a0>)
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff fca5 	bl	80015ac <Dshot_PrepareFrame>

  HAL_Delay(3000);
 8001c62:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001c66:	f002 f82b 	bl	8003cc0 <HAL_Delay>

  HAL_UART_Receive_DMA(&huart6, crsf_dma_buf, CRSF_DMA_BUF_SIZE);
 8001c6a:	2280      	movs	r2, #128	@ 0x80
 8001c6c:	4924      	ldr	r1, [pc, #144]	@ (8001d00 <main+0x1b0>)
 8001c6e:	4825      	ldr	r0, [pc, #148]	@ (8001d04 <main+0x1b4>)
 8001c70:	f005 fdc8 	bl	8007804 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);  // enable IDLE interrupt
 8001c74:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <main+0x1b4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	4b22      	ldr	r3, [pc, #136]	@ (8001d04 <main+0x1b4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0210 	orr.w	r2, r2, #16
 8001c82:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 8001c84:	4820      	ldr	r0, [pc, #128]	@ (8001d08 <main+0x1b8>)
 8001c86:	f004 fbb9 	bl	80063fc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (ScaledControllerOutput[CH_ARM] < 1500){
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <main+0x1bc>)
 8001c8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c90:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001d10 <main+0x1c0>
 8001c94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	d53a      	bpl.n	8001d14 <main+0x1c4>
		  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor1);
 8001c9e:	4911      	ldr	r1, [pc, #68]	@ (8001ce4 <main+0x194>)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fc83 	bl	80015ac <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor2);
 8001ca6:	4910      	ldr	r1, [pc, #64]	@ (8001ce8 <main+0x198>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fc7f 	bl	80015ac <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor3);
 8001cae:	490f      	ldr	r1, [pc, #60]	@ (8001cec <main+0x19c>)
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff fc7b 	bl	80015ac <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(0, DShot_MemoryBufferMotor4);
 8001cb6:	490e      	ldr	r1, [pc, #56]	@ (8001cf0 <main+0x1a0>)
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff fc77 	bl	80015ac <Dshot_PrepareFrame>
 8001cbe:	e059      	b.n	8001d74 <main+0x224>
 8001cc0:	3e3b15b5 	.word	0x3e3b15b5
 8001cc4:	3f227525 	.word	0x3f227525
 8001cc8:	20000290 	.word	0x20000290
 8001ccc:	200006a0 	.word	0x200006a0
 8001cd0:	2000022c 	.word	0x2000022c
 8001cd4:	20000300 	.word	0x20000300
 8001cd8:	200003c0 	.word	0x200003c0
 8001cdc:	20000480 	.word	0x20000480
 8001ce0:	20000540 	.word	0x20000540
 8001ce4:	200002c0 	.word	0x200002c0
 8001ce8:	20000380 	.word	0x20000380
 8001cec:	20000440 	.word	0x20000440
 8001cf0:	20000500 	.word	0x20000500
 8001cf4:	20000848 	.word	0x20000848
 8001cf8:	20000800 	.word	0x20000800
 8001cfc:	200005cc 	.word	0x200005cc
 8001d00:	20000610 	.word	0x20000610
 8001d04:	20000a10 	.word	0x20000a10
 8001d08:	200007b8 	.word	0x200007b8
 8001d0c:	200005fc 	.word	0x200005fc
 8001d10:	44bb8000 	.word	0x44bb8000

	  }
	  else{
		  //0 <= m1, m2, m3, m4 <= 1999
		  Dshot_PrepareFrame(m1, DShot_MemoryBufferMotor1);
 8001d14:	4bd2      	ldr	r3, [pc, #840]	@ (8002060 <main+0x510>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d1e:	ee17 3a90 	vmov	r3, s15
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	49cf      	ldr	r1, [pc, #828]	@ (8002064 <main+0x514>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fc40 	bl	80015ac <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(m2, DShot_MemoryBufferMotor2);
 8001d2c:	4bce      	ldr	r3, [pc, #824]	@ (8002068 <main+0x518>)
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d36:	ee17 3a90 	vmov	r3, s15
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	49cb      	ldr	r1, [pc, #812]	@ (800206c <main+0x51c>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fc34 	bl	80015ac <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(m3, DShot_MemoryBufferMotor3);
 8001d44:	4bca      	ldr	r3, [pc, #808]	@ (8002070 <main+0x520>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	49c7      	ldr	r1, [pc, #796]	@ (8002074 <main+0x524>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fc28 	bl	80015ac <Dshot_PrepareFrame>
		  Dshot_PrepareFrame(m4, DShot_MemoryBufferMotor4);
 8001d5c:	4bc6      	ldr	r3, [pc, #792]	@ (8002078 <main+0x528>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d66:	ee17 3a90 	vmov	r3, s15
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	49c3      	ldr	r1, [pc, #780]	@ (800207c <main+0x52c>)
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fc1c 	bl	80015ac <Dshot_PrepareFrame>
	  }

	  if (mpu.state==2){
 8001d74:	4bc2      	ldr	r3, [pc, #776]	@ (8002080 <main+0x530>)
 8001d76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d184      	bne.n	8001c8a <main+0x13a>
		  MPU6000_Process_DMA(&mpu);
 8001d80:	48bf      	ldr	r0, [pc, #764]	@ (8002080 <main+0x530>)
 8001d82:	f000 fd3b 	bl	80027fc <MPU6000_Process_DMA>
		  mpu.state = 0;
 8001d86:	4bbe      	ldr	r3, [pc, #760]	@ (8002080 <main+0x530>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59


		  /*low-pass filter*/
//		  IIR_Filter_3D_Update(&acc_filtered, mpu.acc[0], mpu.acc[1], mpu.acc[2], &acc_x, &acc_y, &acc_z);
		  acc_x = mpu.acc[0];
 8001d8e:	4bbc      	ldr	r3, [pc, #752]	@ (8002080 <main+0x530>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4abc      	ldr	r2, [pc, #752]	@ (8002084 <main+0x534>)
 8001d94:	6013      	str	r3, [r2, #0]
		  acc_y = mpu.acc[1];
 8001d96:	4bba      	ldr	r3, [pc, #744]	@ (8002080 <main+0x530>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	4abb      	ldr	r2, [pc, #748]	@ (8002088 <main+0x538>)
 8001d9c:	6013      	str	r3, [r2, #0]
		  acc_z = mpu.acc[2];
 8001d9e:	4bb8      	ldr	r3, [pc, #736]	@ (8002080 <main+0x530>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4aba      	ldr	r2, [pc, #744]	@ (800208c <main+0x53c>)
 8001da4:	6013      	str	r3, [r2, #0]
		  IIR_Filter_3D_Update(&gyro_filtered, mpu.gyro[0], mpu.gyro[1], mpu.gyro[2], &gyro_p, &gyro_q, &gyro_r);
 8001da6:	4bb6      	ldr	r3, [pc, #728]	@ (8002080 <main+0x530>)
 8001da8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dac:	4bb4      	ldr	r3, [pc, #720]	@ (8002080 <main+0x530>)
 8001dae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001db2:	4bb3      	ldr	r3, [pc, #716]	@ (8002080 <main+0x530>)
 8001db4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001db8:	4bb5      	ldr	r3, [pc, #724]	@ (8002090 <main+0x540>)
 8001dba:	4ab6      	ldr	r2, [pc, #728]	@ (8002094 <main+0x544>)
 8001dbc:	49b6      	ldr	r1, [pc, #728]	@ (8002098 <main+0x548>)
 8001dbe:	eeb0 1a66 	vmov.f32	s2, s13
 8001dc2:	eef0 0a47 	vmov.f32	s1, s14
 8001dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dca:	48b4      	ldr	r0, [pc, #720]	@ (800209c <main+0x54c>)
 8001dcc:	f7ff fc92 	bl	80016f4 <IIR_Filter_3D_Update>

		  /*Estimate pitch and roll*/
		  rollHat_acc_rad = atan2f(acc_y, acc_z);
 8001dd0:	4bad      	ldr	r3, [pc, #692]	@ (8002088 <main+0x538>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	4bad      	ldr	r3, [pc, #692]	@ (800208c <main+0x53c>)
 8001dd8:	ed93 7a00 	vldr	s14, [r3]
 8001ddc:	eef0 0a47 	vmov.f32	s1, s14
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	f006 fe2c 	bl	8008a40 <atan2f>
 8001de8:	eef0 7a40 	vmov.f32	s15, s0
 8001dec:	4bac      	ldr	r3, [pc, #688]	@ (80020a0 <main+0x550>)
 8001dee:	edc3 7a00 	vstr	s15, [r3]
		  pitchHat_acc_rad = atan2f(-acc_x, sqrtf(acc_y * acc_y + acc_z * acc_z));
 8001df2:	4ba4      	ldr	r3, [pc, #656]	@ (8002084 <main+0x534>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	eeb1 8a67 	vneg.f32	s16, s15
 8001dfc:	4ba2      	ldr	r3, [pc, #648]	@ (8002088 <main+0x538>)
 8001dfe:	ed93 7a00 	vldr	s14, [r3]
 8001e02:	4ba1      	ldr	r3, [pc, #644]	@ (8002088 <main+0x538>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e0c:	4b9f      	ldr	r3, [pc, #636]	@ (800208c <main+0x53c>)
 8001e0e:	edd3 6a00 	vldr	s13, [r3]
 8001e12:	4b9e      	ldr	r3, [pc, #632]	@ (800208c <main+0x53c>)
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	f006 fe0e 	bl	8008a44 <sqrtf>
 8001e28:	eef0 7a40 	vmov.f32	s15, s0
 8001e2c:	eef0 0a67 	vmov.f32	s1, s15
 8001e30:	eeb0 0a48 	vmov.f32	s0, s16
 8001e34:	f006 fe04 	bl	8008a40 <atan2f>
 8001e38:	eef0 7a40 	vmov.f32	s15, s0
 8001e3c:	4b99      	ldr	r3, [pc, #612]	@ (80020a4 <main+0x554>)
 8001e3e:	edc3 7a00 	vstr	s15, [r3]


		  float rollDot_rad = (gyro_p * (M_PI / 180.0f) + tanf(pitchHat_acc_rad) * sinf(rollHat_acc_rad) * gyro_q * (M_PI / 180.0f) + tanf(pitchHat_acc_rad) * cosf(rollHat_acc_rad) * gyro_r * (M_PI / 180.0f));
 8001e42:	4b95      	ldr	r3, [pc, #596]	@ (8002098 <main+0x548>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fb22 	bl	8000490 <__aeabi_f2d>
 8001e4c:	a37e      	add	r3, pc, #504	@ (adr r3, 8002048 <main+0x4f8>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fb75 	bl	8000540 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4614      	mov	r4, r2
 8001e5c:	461d      	mov	r5, r3
 8001e5e:	4b91      	ldr	r3, [pc, #580]	@ (80020a4 <main+0x554>)
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	eeb0 0a67 	vmov.f32	s0, s15
 8001e68:	f006 fe94 	bl	8008b94 <tanf>
 8001e6c:	eeb0 8a40 	vmov.f32	s16, s0
 8001e70:	4b8b      	ldr	r3, [pc, #556]	@ (80020a0 <main+0x550>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7a:	f006 fe45 	bl	8008b08 <sinf>
 8001e7e:	eef0 7a40 	vmov.f32	s15, s0
 8001e82:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001e86:	4b83      	ldr	r3, [pc, #524]	@ (8002094 <main+0x544>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e90:	ee17 0a90 	vmov	r0, s15
 8001e94:	f7fe fafc 	bl	8000490 <__aeabi_f2d>
 8001e98:	a36b      	add	r3, pc, #428	@ (adr r3, 8002048 <main+0x4f8>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fb4f 	bl	8000540 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f7fe f993 	bl	80001d4 <__adddf3>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	@ (80020a4 <main+0x554>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	f006 fe68 	bl	8008b94 <tanf>
 8001ec4:	eeb0 8a40 	vmov.f32	s16, s0
 8001ec8:	4b75      	ldr	r3, [pc, #468]	@ (80020a0 <main+0x550>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	f006 fdd5 	bl	8008a80 <cosf>
 8001ed6:	eef0 7a40 	vmov.f32	s15, s0
 8001eda:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001ede:	4b6c      	ldr	r3, [pc, #432]	@ (8002090 <main+0x540>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee8:	ee17 0a90 	vmov	r0, s15
 8001eec:	f7fe fad0 	bl	8000490 <__aeabi_f2d>
 8001ef0:	a355      	add	r3, pc, #340	@ (adr r3, 8002048 <main+0x4f8>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	f7fe fb23 	bl	8000540 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f7fe f967 	bl	80001d4 <__adddf3>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fd29 	bl	8000964 <__aeabi_d2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	61bb      	str	r3, [r7, #24]
		  float pitchDot_rad = (cosf(rollHat_acc_rad) * gyro_q * (M_PI / 180.0f) - sinf(rollHat_acc_rad) * gyro_r * (M_PI / 180.0f));
 8001f16:	4b62      	ldr	r3, [pc, #392]	@ (80020a0 <main+0x550>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f20:	f006 fdae 	bl	8008a80 <cosf>
 8001f24:	eeb0 7a40 	vmov.f32	s14, s0
 8001f28:	4b5a      	ldr	r3, [pc, #360]	@ (8002094 <main+0x544>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	ee17 0a90 	vmov	r0, s15
 8001f36:	f7fe faab 	bl	8000490 <__aeabi_f2d>
 8001f3a:	a343      	add	r3, pc, #268	@ (adr r3, 8002048 <main+0x4f8>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe fafe 	bl	8000540 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4614      	mov	r4, r2
 8001f4a:	461d      	mov	r5, r3
 8001f4c:	4b54      	ldr	r3, [pc, #336]	@ (80020a0 <main+0x550>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f006 fdd7 	bl	8008b08 <sinf>
 8001f5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002090 <main+0x540>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	ee17 0a90 	vmov	r0, s15
 8001f6c:	f7fe fa90 	bl	8000490 <__aeabi_f2d>
 8001f70:	a335      	add	r3, pc, #212	@ (adr r3, 8002048 <main+0x4f8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fae3 	bl	8000540 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe f925 	bl	80001d0 <__aeabi_dsub>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fce9 	bl	8000964 <__aeabi_d2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	617b      	str	r3, [r7, #20]

		  //Complementary filter
		  roll_rad = (1.0f - COMP_ALPHA) * rollHat_acc_rad + COMP_ALPHA * (roll_rad + rollDot_rad * dt );
 8001f96:	4b42      	ldr	r3, [pc, #264]	@ (80020a0 <main+0x550>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fa78 	bl	8000490 <__aeabi_f2d>
 8001fa0:	a32b      	add	r3, pc, #172	@ (adr r3, 8002050 <main+0x500>)
 8001fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa6:	f7fe facb 	bl	8000540 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4614      	mov	r4, r2
 8001fb0:	461d      	mov	r5, r3
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <main+0x558>)
 8001fb4:	ed93 7a00 	vldr	s14, [r3]
 8001fb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80020ac <main+0x55c>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fca:	ee17 0a90 	vmov	r0, s15
 8001fce:	f7fe fa5f 	bl	8000490 <__aeabi_f2d>
 8001fd2:	a321      	add	r3, pc, #132	@ (adr r3, 8002058 <main+0x508>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fab2 	bl	8000540 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4620      	mov	r0, r4
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	f7fe f8f6 	bl	80001d4 <__adddf3>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fcb8 	bl	8000964 <__aeabi_d2f>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80020ac <main+0x55c>)
 8001ff8:	6013      	str	r3, [r2, #0]
		  pitch_rad = (1.0f - COMP_ALPHA) * pitchHat_acc_rad + COMP_ALPHA * (pitch_rad + pitchDot_rad * dt );
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <main+0x554>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa46 	bl	8000490 <__aeabi_f2d>
 8002004:	a312      	add	r3, pc, #72	@ (adr r3, 8002050 <main+0x500>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fa99 	bl	8000540 <__aeabi_dmul>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4614      	mov	r4, r2
 8002014:	461d      	mov	r5, r3
 8002016:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <main+0x558>)
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002024:	4b22      	ldr	r3, [pc, #136]	@ (80020b0 <main+0x560>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202e:	ee17 0a90 	vmov	r0, s15
 8002032:	f7fe fa2d 	bl	8000490 <__aeabi_f2d>
 8002036:	a308      	add	r3, pc, #32	@ (adr r3, 8002058 <main+0x508>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fa80 	bl	8000540 <__aeabi_dmul>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4620      	mov	r0, r4
 8002046:	e035      	b.n	80020b4 <main+0x564>
 8002048:	a2529d39 	.word	0xa2529d39
 800204c:	3f91df46 	.word	0x3f91df46
 8002050:	999999a0 	.word	0x999999a0
 8002054:	3fa99999 	.word	0x3fa99999
 8002058:	66666666 	.word	0x66666666
 800205c:	3fee6666 	.word	0x3fee6666
 8002060:	200005d0 	.word	0x200005d0
 8002064:	200002c0 	.word	0x200002c0
 8002068:	200005d4 	.word	0x200005d4
 800206c:	20000380 	.word	0x20000380
 8002070:	200005d8 	.word	0x200005d8
 8002074:	20000440 	.word	0x20000440
 8002078:	200005dc 	.word	0x200005dc
 800207c:	20000500 	.word	0x20000500
 8002080:	2000022c 	.word	0x2000022c
 8002084:	200000e0 	.word	0x200000e0
 8002088:	200000e4 	.word	0x200000e4
 800208c:	200000e8 	.word	0x200000e8
 8002090:	200000f4 	.word	0x200000f4
 8002094:	200000f0 	.word	0x200000f0
 8002098:	200000ec 	.word	0x200000ec
 800209c:	20000290 	.word	0x20000290
 80020a0:	20000288 	.word	0x20000288
 80020a4:	2000028c 	.word	0x2000028c
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000104 	.word	0x20000104
 80020b0:	20000108 	.word	0x20000108
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe f88d 	bl	80001d4 <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fc4f 	bl	8000964 <__aeabi_d2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4a83      	ldr	r2, [pc, #524]	@ (80022d8 <main+0x788>)
 80020ca:	6013      	str	r3, [r2, #0]





		  float yawDot = gyro_r;
 80020cc:	4b83      	ldr	r3, [pc, #524]	@ (80022dc <main+0x78c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	613b      	str	r3, [r7, #16]
		  float rollDot = rollDot_rad * (180.0f / M_PI);
 80020d2:	69b8      	ldr	r0, [r7, #24]
 80020d4:	f7fe f9dc 	bl	8000490 <__aeabi_f2d>
 80020d8:	a37d      	add	r3, pc, #500	@ (adr r3, 80022d0 <main+0x780>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe fa2f 	bl	8000540 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fc3b 	bl	8000964 <__aeabi_d2f>
 80020ee:	4603      	mov	r3, r0
 80020f0:	60fb      	str	r3, [r7, #12]
		  float pitchDot = pitchDot_rad * (180.0f / M_PI);
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7fe f9cc 	bl	8000490 <__aeabi_f2d>
 80020f8:	a375      	add	r3, pc, #468	@ (adr r3, 80022d0 <main+0x780>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa1f 	bl	8000540 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fc2b 	bl	8000964 <__aeabi_d2f>
 800210e:	4603      	mov	r3, r0
 8002110:	60bb      	str	r3, [r7, #8]

		  roll = roll_rad * (180.0f / M_PI);
 8002112:	4b73      	ldr	r3, [pc, #460]	@ (80022e0 <main+0x790>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe f9ba 	bl	8000490 <__aeabi_f2d>
 800211c:	a36c      	add	r3, pc, #432	@ (adr r3, 80022d0 <main+0x780>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe fa0d 	bl	8000540 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f7fe fc19 	bl	8000964 <__aeabi_d2f>
 8002132:	4603      	mov	r3, r0
 8002134:	4a6b      	ldr	r2, [pc, #428]	@ (80022e4 <main+0x794>)
 8002136:	6013      	str	r3, [r2, #0]
		  pitch = pitch_rad * (180.0f / M_PI);
 8002138:	4b67      	ldr	r3, [pc, #412]	@ (80022d8 <main+0x788>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f9a7 	bl	8000490 <__aeabi_f2d>
 8002142:	a363      	add	r3, pc, #396	@ (adr r3, 80022d0 <main+0x780>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe f9fa 	bl	8000540 <__aeabi_dmul>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fc06 	bl	8000964 <__aeabi_d2f>
 8002158:	4603      	mov	r3, r0
 800215a:	4a63      	ldr	r2, [pc, #396]	@ (80022e8 <main+0x798>)
 800215c:	6013      	str	r3, [r2, #0]
		  yaw = yaw + yawDot * dt;
 800215e:	4b63      	ldr	r3, [pc, #396]	@ (80022ec <main+0x79c>)
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	edd7 7a04 	vldr	s15, [r7, #16]
 8002168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800216c:	4b60      	ldr	r3, [pc, #384]	@ (80022f0 <main+0x7a0>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002176:	4b5e      	ldr	r3, [pc, #376]	@ (80022f0 <main+0x7a0>)
 8002178:	edc3 7a00 	vstr	s15, [r3]
		  while (yaw>= 360.0f) yaw -= 360.0f;
 800217c:	e009      	b.n	8002192 <main+0x642>
 800217e:	4b5c      	ldr	r3, [pc, #368]	@ (80022f0 <main+0x7a0>)
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80022f4 <main+0x7a4>
 8002188:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800218c:	4b58      	ldr	r3, [pc, #352]	@ (80022f0 <main+0x7a0>)
 800218e:	edc3 7a00 	vstr	s15, [r3]
 8002192:	4b57      	ldr	r3, [pc, #348]	@ (80022f0 <main+0x7a0>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80022f4 <main+0x7a4>
 800219c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	daeb      	bge.n	800217e <main+0x62e>
		  while (yaw < 0.0f)         yaw += 360.0f;
 80021a6:	e009      	b.n	80021bc <main+0x66c>
 80021a8:	4b51      	ldr	r3, [pc, #324]	@ (80022f0 <main+0x7a0>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80022f4 <main+0x7a4>
 80021b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021b6:	4b4e      	ldr	r3, [pc, #312]	@ (80022f0 <main+0x7a0>)
 80021b8:	edc3 7a00 	vstr	s15, [r3]
 80021bc:	4b4c      	ldr	r3, [pc, #304]	@ (80022f0 <main+0x7a0>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	d4ed      	bmi.n	80021a8 <main+0x658>

		  global_counter++;
 80021cc:	4b4a      	ldr	r3, [pc, #296]	@ (80022f8 <main+0x7a8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	4a49      	ldr	r2, [pc, #292]	@ (80022f8 <main+0x7a8>)
 80021d4:	6013      	str	r3, [r2, #0]
		  PID_outer_loop_activation_flag = (global_counter % 1);
 80021d6:	4b49      	ldr	r3, [pc, #292]	@ (80022fc <main+0x7ac>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]


		  roll_out = PID_Double_Calculation(&PID_Controller_Roll, (ScaledControllerOutput[CH_ROLL]- 1500.0f) * 0.2f, roll, rollDot, dt);
 80021dc:	4b48      	ldr	r3, [pc, #288]	@ (8002300 <main+0x7b0>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002304 <main+0x7b4>
 80021e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021ea:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002308 <main+0x7b8>
 80021ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f2:	4b3c      	ldr	r3, [pc, #240]	@ (80022e4 <main+0x794>)
 80021f4:	ed93 7a00 	vldr	s14, [r3]
 80021f8:	4b3c      	ldr	r3, [pc, #240]	@ (80022ec <main+0x79c>)
 80021fa:	edd3 6a00 	vldr	s13, [r3]
 80021fe:	eef0 1a66 	vmov.f32	s3, s13
 8002202:	ed97 1a03 	vldr	s2, [r7, #12]
 8002206:	eef0 0a47 	vmov.f32	s1, s14
 800220a:	eeb0 0a67 	vmov.f32	s0, s15
 800220e:	483f      	ldr	r0, [pc, #252]	@ (800230c <main+0x7bc>)
 8002210:	f000 fd04 	bl	8002c1c <PID_Double_Calculation>
 8002214:	eef0 7a40 	vmov.f32	s15, s0
 8002218:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <main+0x7c0>)
 800221a:	edc3 7a00 	vstr	s15, [r3]
		  pitch_out = PID_Double_Calculation(&PID_Controller_Pitch,(ScaledControllerOutput[CH_PITCH] -1500.0f) * -0.2f, pitch, pitchDot, dt);
 800221e:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <main+0x7b0>)
 8002220:	edd3 7a02 	vldr	s15, [r3, #8]
 8002224:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002304 <main+0x7b4>
 8002228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800222c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002314 <main+0x7c4>
 8002230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002234:	4b2c      	ldr	r3, [pc, #176]	@ (80022e8 <main+0x798>)
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	4b2c      	ldr	r3, [pc, #176]	@ (80022ec <main+0x79c>)
 800223c:	edd3 6a00 	vldr	s13, [r3]
 8002240:	eef0 1a66 	vmov.f32	s3, s13
 8002244:	ed97 1a02 	vldr	s2, [r7, #8]
 8002248:	eef0 0a47 	vmov.f32	s1, s14
 800224c:	eeb0 0a67 	vmov.f32	s0, s15
 8002250:	4831      	ldr	r0, [pc, #196]	@ (8002318 <main+0x7c8>)
 8002252:	f000 fce3 	bl	8002c1c <PID_Double_Calculation>
 8002256:	eef0 7a40 	vmov.f32	s15, s0
 800225a:	4b30      	ldr	r3, [pc, #192]	@ (800231c <main+0x7cc>)
 800225c:	edc3 7a00 	vstr	s15, [r3]

		  if (ScaledControllerOutput[CH_YAW] < 1485 || ScaledControllerOutput[CH_YAW] > 1515){
 8002260:	4b27      	ldr	r3, [pc, #156]	@ (8002300 <main+0x7b0>)
 8002262:	edd3 7a03 	vldr	s15, [r3, #12]
 8002266:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002320 <main+0x7d0>
 800226a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	d409      	bmi.n	8002288 <main+0x738>
 8002274:	4b22      	ldr	r3, [pc, #136]	@ (8002300 <main+0x7b0>)
 8002276:	edd3 7a03 	vldr	s15, [r3, #12]
 800227a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002324 <main+0x7d4>
 800227e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	dd55      	ble.n	8002334 <main+0x7e4>
			  yaw_heading_reference = yaw;
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <main+0x7a0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a26      	ldr	r2, [pc, #152]	@ (8002328 <main+0x7d8>)
 800228e:	6013      	str	r3, [r2, #0]
			  yaw_out = PID_Yaw_Rate_Calculation(&PID_Controller_Yaw_Rate, (ScaledControllerOutput[CH_YAW] - 1500.0f) * -0.2f , yawDot, dt);
 8002290:	4b1b      	ldr	r3, [pc, #108]	@ (8002300 <main+0x7b0>)
 8002292:	edd3 7a03 	vldr	s15, [r3, #12]
 8002296:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002304 <main+0x7b4>
 800229a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800229e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002314 <main+0x7c4>
 80022a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <main+0x79c>)
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	eeb0 1a47 	vmov.f32	s2, s14
 80022b0:	edd7 0a04 	vldr	s1, [r7, #16]
 80022b4:	eeb0 0a67 	vmov.f32	s0, s15
 80022b8:	481c      	ldr	r0, [pc, #112]	@ (800232c <main+0x7dc>)
 80022ba:	f000 fe63 	bl	8002f84 <PID_Yaw_Rate_Calculation>
 80022be:	eef0 7a40 	vmov.f32	s15, s0
 80022c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <main+0x7e0>)
 80022c4:	edc3 7a00 	vstr	s15, [r3]
 80022c8:	e04d      	b.n	8002366 <main+0x816>
 80022ca:	bf00      	nop
 80022cc:	f3af 8000 	nop.w
 80022d0:	1a63c1f8 	.word	0x1a63c1f8
 80022d4:	404ca5dc 	.word	0x404ca5dc
 80022d8:	20000108 	.word	0x20000108
 80022dc:	200000f4 	.word	0x200000f4
 80022e0:	20000104 	.word	0x20000104
 80022e4:	200000fc 	.word	0x200000fc
 80022e8:	200000f8 	.word	0x200000f8
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000100 	.word	0x20000100
 80022f4:	43b40000 	.word	0x43b40000
 80022f8:	20000698 	.word	0x20000698
 80022fc:	2000069c 	.word	0x2000069c
 8002300:	200005fc 	.word	0x200005fc
 8002304:	44bb8000 	.word	0x44bb8000
 8002308:	3e4ccccd 	.word	0x3e4ccccd
 800230c:	2000010c 	.word	0x2000010c
 8002310:	200005c0 	.word	0x200005c0
 8002314:	be4ccccd 	.word	0xbe4ccccd
 8002318:	2000016c 	.word	0x2000016c
 800231c:	200005c4 	.word	0x200005c4
 8002320:	44b9a000 	.word	0x44b9a000
 8002324:	44bd6000 	.word	0x44bd6000
 8002328:	20000694 	.word	0x20000694
 800232c:	200001fc 	.word	0x200001fc
 8002330:	200005c8 	.word	0x200005c8
		  }
		  else{
			  yaw_out = PID_Yaw_Angle_Calculation(&PID_Controller_Yaw, yaw_heading_reference , yaw, yawDot, dt);
 8002334:	4b7e      	ldr	r3, [pc, #504]	@ (8002530 <main+0x9e0>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	4b7e      	ldr	r3, [pc, #504]	@ (8002534 <main+0x9e4>)
 800233c:	ed93 7a00 	vldr	s14, [r3]
 8002340:	4b7d      	ldr	r3, [pc, #500]	@ (8002538 <main+0x9e8>)
 8002342:	edd3 6a00 	vldr	s13, [r3]
 8002346:	eef0 1a66 	vmov.f32	s3, s13
 800234a:	ed97 1a04 	vldr	s2, [r7, #16]
 800234e:	eef0 0a47 	vmov.f32	s1, s14
 8002352:	eeb0 0a67 	vmov.f32	s0, s15
 8002356:	4879      	ldr	r0, [pc, #484]	@ (800253c <main+0x9ec>)
 8002358:	f000 fd88 	bl	8002e6c <PID_Yaw_Angle_Calculation>
 800235c:	eef0 7a40 	vmov.f32	s15, s0
 8002360:	4b77      	ldr	r3, [pc, #476]	@ (8002540 <main+0x9f0>)
 8002362:	edc3 7a00 	vstr	s15, [r3]
		  }


		  // Clamp PID outputs to safe range
		  const float max_correction = 200.0f;  // adjust based on tuning
 8002366:	4b77      	ldr	r3, [pc, #476]	@ (8002544 <main+0x9f4>)
 8002368:	607b      	str	r3, [r7, #4]
		  roll_out  = constrain(roll_out,  -max_correction, max_correction);
 800236a:	4b77      	ldr	r3, [pc, #476]	@ (8002548 <main+0x9f8>)
 800236c:	ed93 7a00 	vldr	s14, [r3]
 8002370:	edd7 7a01 	vldr	s15, [r7, #4]
 8002374:	eef1 7a67 	vneg.f32	s15, s15
 8002378:	ed97 1a01 	vldr	s2, [r7, #4]
 800237c:	eef0 0a67 	vmov.f32	s1, s15
 8002380:	eeb0 0a47 	vmov.f32	s0, s14
 8002384:	f7ff fae8 	bl	8001958 <constrain>
 8002388:	eef0 7a40 	vmov.f32	s15, s0
 800238c:	4b6e      	ldr	r3, [pc, #440]	@ (8002548 <main+0x9f8>)
 800238e:	edc3 7a00 	vstr	s15, [r3]
		  pitch_out = constrain(pitch_out, -max_correction, max_correction);
 8002392:	4b6e      	ldr	r3, [pc, #440]	@ (800254c <main+0x9fc>)
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	edd7 7a01 	vldr	s15, [r7, #4]
 800239c:	eef1 7a67 	vneg.f32	s15, s15
 80023a0:	ed97 1a01 	vldr	s2, [r7, #4]
 80023a4:	eef0 0a67 	vmov.f32	s1, s15
 80023a8:	eeb0 0a47 	vmov.f32	s0, s14
 80023ac:	f7ff fad4 	bl	8001958 <constrain>
 80023b0:	eef0 7a40 	vmov.f32	s15, s0
 80023b4:	4b65      	ldr	r3, [pc, #404]	@ (800254c <main+0x9fc>)
 80023b6:	edc3 7a00 	vstr	s15, [r3]
		  yaw_out   = constrain(yaw_out,   -max_correction, max_correction);
 80023ba:	4b61      	ldr	r3, [pc, #388]	@ (8002540 <main+0x9f0>)
 80023bc:	ed93 7a00 	vldr	s14, [r3]
 80023c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80023c4:	eef1 7a67 	vneg.f32	s15, s15
 80023c8:	ed97 1a01 	vldr	s2, [r7, #4]
 80023cc:	eef0 0a67 	vmov.f32	s1, s15
 80023d0:	eeb0 0a47 	vmov.f32	s0, s14
 80023d4:	f7ff fac0 	bl	8001958 <constrain>
 80023d8:	eef0 7a40 	vmov.f32	s15, s0
 80023dc:	4b58      	ldr	r3, [pc, #352]	@ (8002540 <main+0x9f0>)
 80023de:	edc3 7a00 	vstr	s15, [r3]

		  // Motor mix
		  m1 = 100 + ScaledControllerOutput[CH_THROTTLE] - pitch_out - roll_out + yaw_out;
 80023e2:	4b5b      	ldr	r3, [pc, #364]	@ (8002550 <main+0xa00>)
 80023e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023e8:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002554 <main+0xa04>
 80023ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80023f0:	4b56      	ldr	r3, [pc, #344]	@ (800254c <main+0x9fc>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023fa:	4b53      	ldr	r3, [pc, #332]	@ (8002548 <main+0x9f8>)
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002404:	4b4e      	ldr	r3, [pc, #312]	@ (8002540 <main+0x9f0>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	4b52      	ldr	r3, [pc, #328]	@ (8002558 <main+0xa08>)
 8002410:	edc3 7a00 	vstr	s15, [r3]
		  m2 = 100 + ScaledControllerOutput[CH_THROTTLE] + pitch_out - roll_out - yaw_out;
 8002414:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <main+0xa00>)
 8002416:	edd3 7a01 	vldr	s15, [r3, #4]
 800241a:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002554 <main+0xa04>
 800241e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002422:	4b4a      	ldr	r3, [pc, #296]	@ (800254c <main+0x9fc>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242c:	4b46      	ldr	r3, [pc, #280]	@ (8002548 <main+0x9f8>)
 800242e:	edd3 7a00 	vldr	s15, [r3]
 8002432:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002436:	4b42      	ldr	r3, [pc, #264]	@ (8002540 <main+0x9f0>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002440:	4b46      	ldr	r3, [pc, #280]	@ (800255c <main+0xa0c>)
 8002442:	edc3 7a00 	vstr	s15, [r3]
		  m3 = 100 + ScaledControllerOutput[CH_THROTTLE] - pitch_out + roll_out - yaw_out;
 8002446:	4b42      	ldr	r3, [pc, #264]	@ (8002550 <main+0xa00>)
 8002448:	edd3 7a01 	vldr	s15, [r3, #4]
 800244c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8002554 <main+0xa04>
 8002450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002454:	4b3d      	ldr	r3, [pc, #244]	@ (800254c <main+0x9fc>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800245e:	4b3a      	ldr	r3, [pc, #232]	@ (8002548 <main+0x9f8>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002468:	4b35      	ldr	r3, [pc, #212]	@ (8002540 <main+0x9f0>)
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002472:	4b3b      	ldr	r3, [pc, #236]	@ (8002560 <main+0xa10>)
 8002474:	edc3 7a00 	vstr	s15, [r3]
		  m4 = 100 + ScaledControllerOutput[CH_THROTTLE] + pitch_out + roll_out + yaw_out;
 8002478:	4b35      	ldr	r3, [pc, #212]	@ (8002550 <main+0xa00>)
 800247a:	edd3 7a01 	vldr	s15, [r3, #4]
 800247e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002554 <main+0xa04>
 8002482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002486:	4b31      	ldr	r3, [pc, #196]	@ (800254c <main+0x9fc>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002490:	4b2d      	ldr	r3, [pc, #180]	@ (8002548 <main+0x9f8>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800249a:	4b29      	ldr	r3, [pc, #164]	@ (8002540 <main+0x9f0>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002564 <main+0xa14>)
 80024a6:	edc3 7a00 	vstr	s15, [r3]

		  // Clamp final motor values
		  m1 = constrain(m1, 0, 1999);
 80024aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <main+0xa08>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 8002568 <main+0xa18>
 80024b4:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 800256c <main+0xa1c>
 80024b8:	eeb0 0a67 	vmov.f32	s0, s15
 80024bc:	f7ff fa4c 	bl	8001958 <constrain>
 80024c0:	eef0 7a40 	vmov.f32	s15, s0
 80024c4:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <main+0xa08>)
 80024c6:	edc3 7a00 	vstr	s15, [r3]
		  m2 = constrain(m2, 0, 1999);
 80024ca:	4b24      	ldr	r3, [pc, #144]	@ (800255c <main+0xa0c>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 8002568 <main+0xa18>
 80024d4:	eddf 0a25 	vldr	s1, [pc, #148]	@ 800256c <main+0xa1c>
 80024d8:	eeb0 0a67 	vmov.f32	s0, s15
 80024dc:	f7ff fa3c 	bl	8001958 <constrain>
 80024e0:	eef0 7a40 	vmov.f32	s15, s0
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <main+0xa0c>)
 80024e6:	edc3 7a00 	vstr	s15, [r3]
		  m3 = constrain(m3, 0, 1999);
 80024ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <main+0xa10>)
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 8002568 <main+0xa18>
 80024f4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800256c <main+0xa1c>
 80024f8:	eeb0 0a67 	vmov.f32	s0, s15
 80024fc:	f7ff fa2c 	bl	8001958 <constrain>
 8002500:	eef0 7a40 	vmov.f32	s15, s0
 8002504:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <main+0xa10>)
 8002506:	edc3 7a00 	vstr	s15, [r3]
		  m4 = constrain(m4, 0, 1999);
 800250a:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <main+0xa14>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 8002568 <main+0xa18>
 8002514:	eddf 0a15 	vldr	s1, [pc, #84]	@ 800256c <main+0xa1c>
 8002518:	eeb0 0a67 	vmov.f32	s0, s15
 800251c:	f7ff fa1c 	bl	8001958 <constrain>
 8002520:	eef0 7a40 	vmov.f32	s15, s0
 8002524:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <main+0xa14>)
 8002526:	edc3 7a00 	vstr	s15, [r3]
	  if (ScaledControllerOutput[CH_ARM] < 1500){
 800252a:	f7ff bbae 	b.w	8001c8a <main+0x13a>
 800252e:	bf00      	nop
 8002530:	20000694 	.word	0x20000694
 8002534:	20000100 	.word	0x20000100
 8002538:	20000000 	.word	0x20000000
 800253c:	200001cc 	.word	0x200001cc
 8002540:	200005c8 	.word	0x200005c8
 8002544:	43480000 	.word	0x43480000
 8002548:	200005c0 	.word	0x200005c0
 800254c:	200005c4 	.word	0x200005c4
 8002550:	200005fc 	.word	0x200005fc
 8002554:	42c80000 	.word	0x42c80000
 8002558:	200005d0 	.word	0x200005d0
 800255c:	200005d4 	.word	0x200005d4
 8002560:	200005d8 	.word	0x200005d8
 8002564:	200005dc 	.word	0x200005dc
 8002568:	44f9e000 	.word	0x44f9e000
 800256c:	00000000 	.word	0x00000000

08002570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b094      	sub	sp, #80	@ 0x50
 8002574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002576:	f107 0320 	add.w	r3, r7, #32
 800257a:	2230      	movs	r2, #48	@ 0x30
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f006 fa1e 	bl	80089c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002584:	f107 030c 	add.w	r3, r7, #12
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	4b28      	ldr	r3, [pc, #160]	@ (800263c <SystemClock_Config+0xcc>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	4a27      	ldr	r2, [pc, #156]	@ (800263c <SystemClock_Config+0xcc>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <SystemClock_Config+0xcc>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025b0:	2300      	movs	r3, #0
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	4b22      	ldr	r3, [pc, #136]	@ (8002640 <SystemClock_Config+0xd0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a21      	ldr	r2, [pc, #132]	@ (8002640 <SystemClock_Config+0xd0>)
 80025ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002640 <SystemClock_Config+0xd0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025cc:	2302      	movs	r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025d4:	2310      	movs	r3, #16
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025d8:	2302      	movs	r3, #2
 80025da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025dc:	2300      	movs	r3, #0
 80025de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025e0:	2308      	movs	r3, #8
 80025e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80025e4:	23a8      	movs	r3, #168	@ 0xa8
 80025e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025ec:	2307      	movs	r3, #7
 80025ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f0:	f107 0320 	add.w	r3, r7, #32
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fa51 	bl	8004a9c <HAL_RCC_OscConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002600:	f000 f820 	bl	8002644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002604:	230f      	movs	r3, #15
 8002606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002608:	2302      	movs	r3, #2
 800260a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002610:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800261a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800261c:	f107 030c 	add.w	r3, r7, #12
 8002620:	2105      	movs	r1, #5
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fcb2 	bl	8004f8c <HAL_RCC_ClockConfig>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800262e:	f000 f809 	bl	8002644 <Error_Handler>
  }
}
 8002632:	bf00      	nop
 8002634:	3750      	adds	r7, #80	@ 0x50
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	40007000 	.word	0x40007000

08002644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002648:	b672      	cpsid	i
}
 800264a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <Error_Handler+0x8>

08002650 <MPU6000_Read>:
#include "mpu6000.h"
uint16_t MPU6000_Read(MPU6000 *dev, uint8_t reg) {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af02      	add	r7, sp, #8
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
    uint8_t tx[2] = {reg | 0x80, 0x00}; // reg addr + dummy
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002662:	b2db      	uxtb	r3, r3
 8002664:	733b      	strb	r3, [r7, #12]
 8002666:	2300      	movs	r3, #0
 8002668:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2] = {0};
 800266a:	2300      	movs	r3, #0
 800266c:	813b      	strh	r3, [r7, #8]

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 800266e:	2200      	movs	r2, #0
 8002670:	2110      	movs	r1, #16
 8002672:	480c      	ldr	r0, [pc, #48]	@ (80026a4 <MPU6000_Read+0x54>)
 8002674:	f002 f9f8 	bl	8004a68 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(dev->hspi, tx, rx, 2, HAL_MAX_DELAY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	f107 0208 	add.w	r2, r7, #8
 8002680:	f107 010c 	add.w	r1, r7, #12
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2302      	movs	r3, #2
 800268c:	f003 f86b 	bl	8005766 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 8002690:	2201      	movs	r2, #1
 8002692:	2110      	movs	r1, #16
 8002694:	4803      	ldr	r0, [pc, #12]	@ (80026a4 <MPU6000_Read+0x54>)
 8002696:	f002 f9e7 	bl	8004a68 <HAL_GPIO_WritePin>

    return rx[1]; // the second byte is the register value
 800269a:	7a7b      	ldrb	r3, [r7, #9]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40020000 	.word	0x40020000

080026a8 <MPU6000_Write>:

void MPU6000_Write(MPU6000 *dev, uint8_t reg, uint8_t data) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
 80026b4:	4613      	mov	r3, r2
 80026b6:	70bb      	strb	r3, [r7, #2]
    uint8_t tx[2] = {reg & 0x7F, data};
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	733b      	strb	r3, [r7, #12]
 80026c2:	78bb      	ldrb	r3, [r7, #2]
 80026c4:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2110      	movs	r1, #16
 80026ca:	480a      	ldr	r0, [pc, #40]	@ (80026f4 <MPU6000_Write+0x4c>)
 80026cc:	f002 f9cc 	bl	8004a68 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(dev->hspi, tx, 2, HAL_MAX_DELAY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	f107 010c 	add.w	r1, r7, #12
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	2202      	movs	r2, #2
 80026de:	f002 fefe 	bl	80054de <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80026e2:	2201      	movs	r2, #1
 80026e4:	2110      	movs	r1, #16
 80026e6:	4803      	ldr	r0, [pc, #12]	@ (80026f4 <MPU6000_Write+0x4c>)
 80026e8:	f002 f9be 	bl	8004a68 <HAL_GPIO_WritePin>
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40020000 	.word	0x40020000

080026f8 <MPU6000_Init>:

void MPU6000_Init(MPU6000 *dev, SPI_HandleTypeDef *hspi) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
    dev->hspi = hspi;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 8002708:	2201      	movs	r2, #1
 800270a:	2110      	movs	r1, #16
 800270c:	481f      	ldr	r0, [pc, #124]	@ (800278c <MPU6000_Init+0x94>)
 800270e:	f002 f9ab 	bl	8004a68 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002712:	2064      	movs	r0, #100	@ 0x64
 8002714:	f001 fad4 	bl	8003cc0 <HAL_Delay>

    // Reset device
    MPU6000_Write(dev, MPU6000_PWR_MGMT_1, 0x80);
 8002718:	2280      	movs	r2, #128	@ 0x80
 800271a:	216b      	movs	r1, #107	@ 0x6b
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7ff ffc3 	bl	80026a8 <MPU6000_Write>
    HAL_Delay(100);
 8002722:	2064      	movs	r0, #100	@ 0x64
 8002724:	f001 facc 	bl	8003cc0 <HAL_Delay>

    // Wake up with PLL
    MPU6000_Write(dev, MPU6000_PWR_MGMT_1, 0x01);
 8002728:	2201      	movs	r2, #1
 800272a:	216b      	movs	r1, #107	@ 0x6b
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ffbb 	bl	80026a8 <MPU6000_Write>
    HAL_Delay(10);
 8002732:	200a      	movs	r0, #10
 8002734:	f001 fac4 	bl	8003cc0 <HAL_Delay>

    uint8_t reg = MPU6000_Read(dev, MPU6000_GYRO_CONFIG);
 8002738:	211b      	movs	r1, #27
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff88 	bl	8002650 <MPU6000_Read>
 8002740:	4603      	mov	r3, r0
 8002742:	73fb      	strb	r3, [r7, #15]
    reg &= ~0x18; // clear FS_SEL
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	f023 0318 	bic.w	r3, r3, #24
 800274a:	73fb      	strb	r3, [r7, #15]
    reg |= (0 << 3);
    MPU6000_Write(dev, MPU6000_GYRO_CONFIG, reg);
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	461a      	mov	r2, r3
 8002750:	211b      	movs	r1, #27
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffa8 	bl	80026a8 <MPU6000_Write>

    reg = MPU6000_Read(dev, MPU6000_ACCEL_CONFIG);
 8002758:	211c      	movs	r1, #28
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff78 	bl	8002650 <MPU6000_Read>
 8002760:	4603      	mov	r3, r0
 8002762:	73fb      	strb	r3, [r7, #15]
    reg &= ~0x18; // clear AFS_SEL
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	f023 0318 	bic.w	r3, r3, #24
 800276a:	73fb      	strb	r3, [r7, #15]
    reg |= (0 << 3);
    MPU6000_Write(dev, MPU6000_ACCEL_CONFIG, reg);
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	461a      	mov	r2, r3
 8002770:	211c      	movs	r1, #28
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff98 	bl	80026a8 <MPU6000_Write>

    // Verify WHO_AM_I
    uint8_t whoami = MPU6000_Read(dev, MPU6000_WHO_AM_I);
 8002778:	2175      	movs	r1, #117	@ 0x75
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ff68 	bl	8002650 <MPU6000_Read>
 8002780:	4603      	mov	r3, r0
 8002782:	73bb      	strb	r3, [r7, #14]
    if (whoami != 0x68) {
        // handle error
    }
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40020000 	.word	0x40020000

08002790 <MPU6000_Start_DMA>:



void MPU6000_Start_DMA(MPU6000 *dev) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
    // Prepare TX buffer: [reg|0x80, dummy...]
    dev->tx_buffer[0] = 0x3B | 0x80; // ACCEL_XOUT_H
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	22bb      	movs	r2, #187	@ 0xbb
 800279c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    for (int i = 1; i < 15; i++) {
 80027a0:	2301      	movs	r3, #1
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e008      	b.n	80027b8 <MPU6000_Start_DMA+0x28>
        dev->tx_buffer[i] = 0xFF; // dummy bytes
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	3338      	adds	r3, #56	@ 0x38
 80027ae:	22ff      	movs	r2, #255	@ 0xff
 80027b0:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < 15; i++) {
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b0e      	cmp	r3, #14
 80027bc:	ddf3      	ble.n	80027a6 <MPU6000_Start_DMA+0x16>
    }

    // Pull CS low before starting transfer
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	2110      	movs	r1, #16
 80027c2:	480d      	ldr	r0, [pc, #52]	@ (80027f8 <MPU6000_Start_DMA+0x68>)
 80027c4:	f002 f950 	bl	8004a68 <HAL_GPIO_WritePin>

    // Start DMA (15 bytes total: 1 addr + 14 data)
    if (HAL_SPI_TransmitReceive_DMA(dev->hspi, dev->tx_buffer, dev->dma_buffer, 15) != HAL_OK) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80027d8:	230f      	movs	r3, #15
 80027da:	f003 f96d 	bl	8005ab8 <HAL_SPI_TransmitReceive_DMA>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <MPU6000_Start_DMA+0x5e>
        // Handle error if needed
        HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80027e4:	2201      	movs	r2, #1
 80027e6:	2110      	movs	r1, #16
 80027e8:	4803      	ldr	r0, [pc, #12]	@ (80027f8 <MPU6000_Start_DMA+0x68>)
 80027ea:	f002 f93d 	bl	8004a68 <HAL_GPIO_WritePin>
    }
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40020000 	.word	0x40020000

080027fc <MPU6000_Process_DMA>:


void MPU6000_Process_DMA(MPU6000 *dev) {
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    int16_t raw_acc_x = (dev->dma_buffer[1] << 8) | dev->dma_buffer[2];
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800280a:	b21b      	sxth	r3, r3
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b21a      	sxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8002816:	b21b      	sxth	r3, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	82bb      	strh	r3, [r7, #20]
    int16_t raw_acc_y = (dev->dma_buffer[3] << 8) | dev->dma_buffer[4];
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8002822:	b21b      	sxth	r3, r3
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	b21a      	sxth	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800282e:	b21b      	sxth	r3, r3
 8002830:	4313      	orrs	r3, r2
 8002832:	827b      	strh	r3, [r7, #18]
    int16_t raw_acc_z = (dev->dma_buffer[5] << 8) | dev->dma_buffer[6];
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800283a:	b21b      	sxth	r3, r3
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	b21a      	sxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8002846:	b21b      	sxth	r3, r3
 8002848:	4313      	orrs	r3, r2
 800284a:	823b      	strh	r3, [r7, #16]

    int16_t raw_temp  = (dev->dma_buffer[7] << 8) | dev->dma_buffer[8];
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8002852:	b21b      	sxth	r3, r3
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	b21a      	sxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800285e:	b21b      	sxth	r3, r3
 8002860:	4313      	orrs	r3, r2
 8002862:	81fb      	strh	r3, [r7, #14]

    int16_t raw_gyro_x = (dev->dma_buffer[9] << 8) | dev->dma_buffer[10];
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800286a:	b21b      	sxth	r3, r3
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	b21a      	sxth	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8002876:	b21b      	sxth	r3, r3
 8002878:	4313      	orrs	r3, r2
 800287a:	81bb      	strh	r3, [r7, #12]
    int16_t raw_gyro_y = (dev->dma_buffer[11] << 8) | dev->dma_buffer[12];
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8002882:	b21b      	sxth	r3, r3
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	b21a      	sxth	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800288e:	b21b      	sxth	r3, r3
 8002890:	4313      	orrs	r3, r2
 8002892:	817b      	strh	r3, [r7, #10]
    int16_t raw_gyro_z = (dev->dma_buffer[13] << 8) | dev->dma_buffer[14];
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800289a:	b21b      	sxth	r3, r3
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	b21a      	sxth	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	813b      	strh	r3, [r7, #8]

    dev->acc[0] = (float)raw_acc_x / ACCEL_SCALE;
 80028ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b8:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80029f8 <MPU6000_Process_DMA+0x1fc>
 80028bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	edc3 7a01 	vstr	s15, [r3, #4]
    dev->acc[1] = -(float)raw_acc_y / ACCEL_SCALE;
 80028c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d2:	eeb1 7a67 	vneg.f32	s14, s15
 80028d6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80029f8 <MPU6000_Process_DMA+0x1fc>
 80028da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	edc3 7a02 	vstr	s15, [r3, #8]
    dev->acc[2] = (float)raw_acc_z / ACCEL_SCALE;
 80028e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80029f8 <MPU6000_Process_DMA+0x1fc>
 80028f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	edc3 7a03 	vstr	s15, [r3, #12]

    dev->temp = ((float)raw_temp) / 340.0f + 36.53f;
 80028fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800290a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80029fc <MPU6000_Process_DMA+0x200>
 800290e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002912:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8002a00 <MPU6000_Process_DMA+0x204>
 8002916:	ee77 7a87 	vadd.f32	s15, s15, s14
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    dev->gyro[0] = (float)raw_gyro_x / GYRO_SCALE;
 8002920:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292c:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002a04 <MPU6000_Process_DMA+0x208>
 8002930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	edc3 7a04 	vstr	s15, [r3, #16]
    dev->gyro[1] = -(float)raw_gyro_y / GYRO_SCALE;
 800293a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002946:	eeb1 7a67 	vneg.f32	s14, s15
 800294a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8002a04 <MPU6000_Process_DMA+0x208>
 800294e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	edc3 7a05 	vstr	s15, [r3, #20]
    dev->gyro[2] = (float)raw_gyro_z / GYRO_SCALE;
 8002958:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800295c:	ee07 3a90 	vmov	s15, r3
 8002960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002964:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8002a04 <MPU6000_Process_DMA+0x208>
 8002968:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	edc3 7a06 	vstr	s15, [r3, #24]

    if (dev->calibrated){
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002978:	2b00      	cmp	r3, #0
 800297a:	d037      	beq.n	80029ec <MPU6000_Process_DMA+0x1f0>
        for (uint8_t i = 0; i < 3; i++){
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
 8002980:	e031      	b.n	80029e6 <MPU6000_Process_DMA+0x1ea>
        	dev->acc[i] -= dev->acc_offset[i];
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	ed93 7a00 	vldr	s14, [r3]
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	3306      	adds	r3, #6
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3304      	adds	r3, #4
 80029ae:	edc3 7a00 	vstr	s15, [r3]
        	dev->gyro[i] -= dev->gyro_offset[i];
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	ed93 7a00 	vldr	s14, [r3]
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	330a      	adds	r3, #10
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t i = 0; i < 3; i++){
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	3301      	adds	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d9ca      	bls.n	8002982 <MPU6000_Process_DMA+0x186>
        }
    }
}
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	46800000 	.word	0x46800000
 80029fc:	43aa0000 	.word	0x43aa0000
 8002a00:	42121eb8 	.word	0x42121eb8
 8002a04:	43030000 	.word	0x43030000

08002a08 <MPU6000_Calibrate>:

void MPU6000_Calibrate(MPU6000 *dev) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    const uint16_t samples = 3000;
 8002a10:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8002a14:	847b      	strh	r3, [r7, #34]	@ 0x22
    float acc_sum[3] = {0}, gyro_sum[3] = {0};
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

    dev->calibrated = false;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    for (uint16_t i = 0; i < samples; i++) {
 8002a36:	2300      	movs	r3, #0
 8002a38:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002a3a:	e05a      	b.n	8002af2 <MPU6000_Calibrate+0xea>
        // Start a DMA read
        dev->spi_transfer_done = false;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
        MPU6000_Start_DMA(dev);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fea3 	bl	8002790 <MPU6000_Start_DMA>

        // Wait until DMA completes
        while (!dev->spi_transfer_done) { }
 8002a4a:	bf00      	nop
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f6      	bne.n	8002a4c <MPU6000_Calibrate+0x44>

        // Process latest sample
        MPU6000_Process_DMA(dev);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fecc 	bl	80027fc <MPU6000_Process_DMA>

        for (uint8_t axis = 0; axis < 3; axis++) {
 8002a64:	2300      	movs	r3, #0
 8002a66:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002a6a:	e038      	b.n	8002ade <MPU6000_Calibrate+0xd6>
            acc_sum[axis]  += dev->acc[axis];
 8002a6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	3328      	adds	r3, #40	@ 0x28
 8002a74:	443b      	add	r3, r7
 8002a76:	3b14      	subs	r3, #20
 8002a78:	ed93 7a00 	vldr	s14, [r3]
 8002a7c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3304      	adds	r3, #4
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	3328      	adds	r3, #40	@ 0x28
 8002a98:	443b      	add	r3, r7
 8002a9a:	3b14      	subs	r3, #20
 8002a9c:	edc3 7a00 	vstr	s15, [r3]
            gyro_sum[axis] += dev->gyro[axis];
 8002aa0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3328      	adds	r3, #40	@ 0x28
 8002aa8:	443b      	add	r3, r7
 8002aaa:	3b20      	subs	r3, #32
 8002aac:	ed93 7a00 	vldr	s14, [r3]
 8002ab0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	3328      	adds	r3, #40	@ 0x28
 8002acc:	443b      	add	r3, r7
 8002ace:	3b20      	subs	r3, #32
 8002ad0:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t axis = 0; axis < 3; axis++) {
 8002ad4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002ade:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d9c2      	bls.n	8002a6c <MPU6000_Calibrate+0x64>

        }

        HAL_Delay(1); // ~1 kHz sample rate
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f001 f8ea 	bl	8003cc0 <HAL_Delay>
    for (uint16_t i = 0; i < samples; i++) {
 8002aec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002aee:	3301      	adds	r3, #1
 8002af0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002af2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002af4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3a0      	bcc.n	8002a3c <MPU6000_Calibrate+0x34>
    }

    for (uint8_t axis = 0; axis < 3; axis++) {
 8002afa:	2300      	movs	r3, #0
 8002afc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002b00:	e033      	b.n	8002b6a <MPU6000_Calibrate+0x162>
        dev->acc_offset[axis]  = acc_sum[axis] / samples;
 8002b02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	3328      	adds	r3, #40	@ 0x28
 8002b0a:	443b      	add	r3, r7
 8002b0c:	3b14      	subs	r3, #20
 8002b0e:	edd3 6a00 	vldr	s13, [r3]
 8002b12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	3306      	adds	r3, #6
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
        dev->gyro_offset[axis] = gyro_sum[axis] / samples;
 8002b32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	3328      	adds	r3, #40	@ 0x28
 8002b3a:	443b      	add	r3, r7
 8002b3c:	3b20      	subs	r3, #32
 8002b3e:	edd3 6a00 	vldr	s13, [r3]
 8002b42:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	330a      	adds	r3, #10
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t axis = 0; axis < 3; axis++) {
 8002b60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002b6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d9c7      	bls.n	8002b02 <MPU6000_Calibrate+0xfa>
    }

    // Subtract gravity on Z axis
    dev->acc_offset[2] -= 1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002b78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    dev->state = 0;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    dev->calibrated = true;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8002b96:	bf00      	nop
 8002b98:	3728      	adds	r7, #40	@ 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <PID_Init>:
#include "pid.h"

void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float output_limit, float integral_limit)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b087      	sub	sp, #28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6178      	str	r0, [r7, #20]
 8002ba6:	ed87 0a04 	vstr	s0, [r7, #16]
 8002baa:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bae:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bb2:	edc7 1a01 	vstr	s3, [r7, #4]
 8002bb6:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	609a      	str	r2, [r3, #8]

    pid->target_value = 0.0f;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
    pid->measured_value = 0.0f;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
    pid->measured_value_prev = 0.0f;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	615a      	str	r2, [r3, #20]

    pid->error = 0.0f;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
    pid->error_sum = 0.0f;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	61da      	str	r2, [r3, #28]
    pid->error_deriv = 0.0f;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	621a      	str	r2, [r3, #32]

    pid->output = 0.0f;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c

    pid->output_limit = output_limit;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->integral_limit = integral_limit;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <PID_Double_Calculation>:
        pid->output = -pid->output_limit;

    return pid->output;
}

float PID_Double_Calculation(Double_PID_Controller *axis, float target_angle, float measured_angle, float measured_rate, float dt){
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6178      	str	r0, [r7, #20]
 8002c24:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c28:	edc7 0a03 	vstr	s1, [r7, #12]
 8002c2c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002c30:	edc7 1a01 	vstr	s3, [r7, #4]
	/*Double PID outer loop calculation */
	if (PID_outer_loop_activation_flag){
 8002c34:	4b8c      	ldr	r3, [pc, #560]	@ (8002e68 <PID_Double_Calculation+0x24c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8090 	beq.w	8002d5e <PID_Double_Calculation+0x142>
		axis->outer_loop.target_value = target_angle;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	60da      	str	r2, [r3, #12]
		axis->outer_loop.measured_value = measured_angle;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	611a      	str	r2, [r3, #16]

		axis->outer_loop.error = axis->outer_loop.target_value - axis->outer_loop.measured_value;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	edc3 7a06 	vstr	s15, [r3, #24]
		axis->outer_loop.error_sum += axis->outer_loop.error * dt;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	edc3 7a07 	vstr	s15, [r3, #28]

		if (axis->outer_loop.error_sum > axis->outer_loop.integral_limit) axis->outer_loop.error_sum = axis->outer_loop.integral_limit;
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002c8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c92:	dd04      	ble.n	8002c9e <PID_Double_Calculation+0x82>
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	61da      	str	r2, [r3, #28]
 8002c9c:	e014      	b.n	8002cc8 <PID_Double_Calculation+0xac>
		else if (axis->outer_loop.error_sum < -axis->outer_loop.integral_limit) axis->outer_loop.error_sum = -axis->outer_loop.integral_limit;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002caa:	eef1 7a67 	vneg.f32	s15, s15
 8002cae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	d507      	bpl.n	8002cc8 <PID_Double_Calculation+0xac>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002cbe:	eef1 7a67 	vneg.f32	s15, s15
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	edc3 7a07 	vstr	s15, [r3, #28]

		axis->outer_loop.error_deriv = -measured_rate;
 8002cc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ccc:	eef1 7a67 	vneg.f32	s15, s15
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	edc3 7a08 	vstr	s15, [r3, #32]

		axis->outer_loop.output = axis->outer_loop.Kp * axis->outer_loop.error +
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
								  axis->outer_loop.Ki * axis->outer_loop.error_sum +
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	edd3 6a01 	vldr	s13, [r3, #4]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
		axis->outer_loop.output = axis->outer_loop.Kp * axis->outer_loop.error +
 8002cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
								  axis->outer_loop.Kd * axis->outer_loop.error_deriv;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
								  axis->outer_loop.Ki * axis->outer_loop.error_sum +
 8002d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
		axis->outer_loop.output = axis->outer_loop.Kp * axis->outer_loop.error +
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		if (axis->outer_loop.output > axis->outer_loop.output_limit) axis->outer_loop.output = axis->outer_loop.output_limit;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	dd04      	ble.n	8002d34 <PID_Double_Calculation+0x118>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d32:	e014      	b.n	8002d5e <PID_Double_Calculation+0x142>
		else if (axis->outer_loop.output < -axis->outer_loop.output_limit) axis->outer_loop.output = -axis->outer_loop.output_limit;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002d40:	eef1 7a67 	vneg.f32	s15, s15
 8002d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4c:	d507      	bpl.n	8002d5e <PID_Double_Calculation+0x142>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002d54:	eef1 7a67 	vneg.f32	s15, s15
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	/*Double PID inner loop calculation*/
	axis->inner_loop.target_value = axis->outer_loop.output;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	63da      	str	r2, [r3, #60]	@ 0x3c
	axis->inner_loop.measured_value = measured_rate;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	641a      	str	r2, [r3, #64]	@ 0x40

	axis->inner_loop.error = axis->inner_loop.target_value - axis->inner_loop.measured_value;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	axis->inner_loop.error_sum += axis->inner_loop.error * dt;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8002d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	if (axis->inner_loop.error_sum > axis->inner_loop.integral_limit) axis->inner_loop.error_sum = axis->inner_loop.integral_limit;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	dd04      	ble.n	8002dc0 <PID_Double_Calculation+0x1a4>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002dbe:	e014      	b.n	8002dea <PID_Double_Calculation+0x1ce>
	else if (axis->inner_loop.error_sum < -axis->inner_loop.integral_limit) axis->inner_loop.error_sum = -axis->inner_loop.integral_limit;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002dcc:	eef1 7a67 	vneg.f32	s15, s15
 8002dd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d507      	bpl.n	8002dea <PID_Double_Calculation+0x1ce>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002de0:	eef1 7a67 	vneg.f32	s15, s15
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	axis->inner_loop.error_deriv = -(axis->inner_loop.measured_value - axis->inner_loop.measured_value_prev) / dt;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfa:	eef1 6a67 	vneg.f32	s13, s15
 8002dfe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	axis->inner_loop.measured_value_prev = axis->inner_loop.measured_value;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	645a      	str	r2, [r3, #68]	@ 0x44

	axis->inner_loop.output = axis->inner_loop.Kp * axis->inner_loop.error +
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002e20:	ee27 7a27 	vmul.f32	s14, s14, s15
			  	  	  	  	  axis->inner_loop.Ki * axis->inner_loop.error_sum +
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8002e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->inner_loop.output = axis->inner_loop.Kp * axis->inner_loop.error +
 8002e34:	ee37 7a27 	vadd.f32	s14, s14, s15
							  axis->inner_loop.Kd * axis->inner_loop.error_deriv;
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  	  	  	  	  axis->inner_loop.Ki * axis->inner_loop.error_sum +
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->inner_loop.output = axis->inner_loop.Kp * axis->inner_loop.error +
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	return axis->inner_loop.output;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e56:	ee07 3a90 	vmov	s15, r3
}
 8002e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	2000069c 	.word	0x2000069c

08002e6c <PID_Yaw_Angle_Calculation>:

/*
 * Yaw angle duoc dung khi throttle chinh yaw duoc giu nguyen -> giu cho heading khong thay doi
 * Yaw rate duoc dung khi throttle di chuyen -> dung pid dieu chinh toc do
 */
float PID_Yaw_Angle_Calculation(PID_Controller *axis, float target_angle, float measured_angle, float measured_rate, float dt){
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6178      	str	r0, [r7, #20]
 8002e74:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e78:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e7c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e80:	edc7 1a01 	vstr	s3, [r7, #4]
	axis->target_value = target_angle;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	60da      	str	r2, [r3, #12]
	axis->measured_value = measured_angle;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	611a      	str	r2, [r3, #16]

	axis->error = axis->target_value - axis->measured_value;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	edc3 7a06 	vstr	s15, [r3, #24]
	//Deal voi truong hop di tu 10 do quay sang 350 do chang han
	if (axis->error > 180.f) axis->error -= 360.f;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002eac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002f78 <PID_Yaw_Angle_Calculation+0x10c>
 8002eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dd0a      	ble.n	8002ed0 <PID_Yaw_Angle_Calculation+0x64>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ec0:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002f7c <PID_Yaw_Angle_Calculation+0x110>
 8002ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	edc3 7a06 	vstr	s15, [r3, #24]
 8002ece:	e013      	b.n	8002ef8 <PID_Yaw_Angle_Calculation+0x8c>
	else if (axis->error < -180.f) axis->error += 360.f;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ed6:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002f80 <PID_Yaw_Angle_Calculation+0x114>
 8002eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	d509      	bpl.n	8002ef8 <PID_Yaw_Angle_Calculation+0x8c>
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	edd3 7a06 	vldr	s15, [r3, #24]
 8002eea:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002f7c <PID_Yaw_Angle_Calculation+0x110>
 8002eee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	edc3 7a06 	vstr	s15, [r3, #24]

	axis->error_sum += axis->error * dt;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	ed93 7a07 	vldr	s14, [r3, #28]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	edd3 6a06 	vldr	s13, [r3, #24]
 8002f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	edc3 7a07 	vstr	s15, [r3, #28]

	axis->error_deriv = -measured_rate;
 8002f16:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f1a:	eef1 7a67 	vneg.f32	s15, s15
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	edc3 7a08 	vstr	s15, [r3, #32]

	axis->output = axis->Kp * axis->error +
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	ed93 7a00 	vldr	s14, [r3]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f30:	ee27 7a27 	vmul.f32	s14, s14, s15
  	  	  	  	   axis->Ki * axis->error_sum +
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->output = axis->Kp * axis->error +
 8002f44:	ee37 7a27 	vadd.f32	s14, s14, s15
				   axis->Kd * axis->error_deriv;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
  	  	  	  	   axis->Ki * axis->error_sum +
 8002f58:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->output = axis->Kp * axis->error +
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	return axis->output;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	ee07 3a90 	vmov	s15, r3
}
 8002f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	43340000 	.word	0x43340000
 8002f7c:	43b40000 	.word	0x43b40000
 8002f80:	c3340000 	.word	0xc3340000

08002f84 <PID_Yaw_Rate_Calculation>:

float PID_Yaw_Rate_Calculation(PID_Controller *axis, float target_rate, float measured_rate, float dt){
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f90:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f94:	ed87 1a00 	vstr	s2, [r7]
	axis->target_value = target_rate;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
	axis->measured_value = measured_rate;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	611a      	str	r2, [r3, #16]

	axis->error = axis->target_value - axis->measured_value;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	ed93 7a03 	vldr	s14, [r3, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	edc3 7a06 	vstr	s15, [r3, #24]

	axis->error_sum += axis->error * dt;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	ed93 7a07 	vldr	s14, [r3, #28]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	edd3 6a06 	vldr	s13, [r3, #24]
 8002fc6:	edd7 7a00 	vldr	s15, [r7]
 8002fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	edc3 7a07 	vstr	s15, [r3, #28]

	axis->error_deriv = -(axis->measured_value - axis->measured_value_prev) / dt;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	ed93 7a04 	vldr	s14, [r3, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe8:	eef1 6a67 	vneg.f32	s13, s15
 8002fec:	ed97 7a00 	vldr	s14, [r7]
 8002ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->measured_value_prev = axis->measured_value;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	615a      	str	r2, [r3, #20]

	axis->output = axis->Kp * axis->error +
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	ed93 7a00 	vldr	s14, [r3]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	edd3 7a06 	vldr	s15, [r3, #24]
 800300e:	ee27 7a27 	vmul.f32	s14, s14, s15
  	  	  	  	   axis->Ki * axis->error_sum +
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	edd3 6a01 	vldr	s13, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	edd3 7a07 	vldr	s15, [r3, #28]
 800301e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->output = axis->Kp * axis->error +
 8003022:	ee37 7a27 	vadd.f32	s14, s14, s15
				   axis->Kd * axis->error_deriv;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	edd3 6a02 	vldr	s13, [r3, #8]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003032:	ee66 7aa7 	vmul.f32	s15, s13, s15
  	  	  	  	   axis->Ki * axis->error_sum +
 8003036:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->output = axis->Kp * axis->error +
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	return axis->output;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	ee07 3a90 	vmov	s15, r3
}
 8003048:	eeb0 0a67 	vmov.f32	s0, s15
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800305c:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <MX_SPI1_Init+0x64>)
 800305e:	4a18      	ldr	r2, [pc, #96]	@ (80030c0 <MX_SPI1_Init+0x68>)
 8003060:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003062:	4b16      	ldr	r3, [pc, #88]	@ (80030bc <MX_SPI1_Init+0x64>)
 8003064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003068:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800306a:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <MX_SPI1_Init+0x64>)
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003070:	4b12      	ldr	r3, [pc, #72]	@ (80030bc <MX_SPI1_Init+0x64>)
 8003072:	2200      	movs	r2, #0
 8003074:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003076:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <MX_SPI1_Init+0x64>)
 8003078:	2200      	movs	r2, #0
 800307a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800307c:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <MX_SPI1_Init+0x64>)
 800307e:	2200      	movs	r2, #0
 8003080:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <MX_SPI1_Init+0x64>)
 8003084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003088:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800308a:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <MX_SPI1_Init+0x64>)
 800308c:	2210      	movs	r2, #16
 800308e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003090:	4b0a      	ldr	r3, [pc, #40]	@ (80030bc <MX_SPI1_Init+0x64>)
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003096:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <MX_SPI1_Init+0x64>)
 8003098:	2200      	movs	r2, #0
 800309a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800309c:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <MX_SPI1_Init+0x64>)
 800309e:	2200      	movs	r2, #0
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <MX_SPI1_Init+0x64>)
 80030a4:	220a      	movs	r2, #10
 80030a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030a8:	4804      	ldr	r0, [pc, #16]	@ (80030bc <MX_SPI1_Init+0x64>)
 80030aa:	f002 f98f 	bl	80053cc <HAL_SPI_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030b4:	f7ff fac6 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	200006a0 	.word	0x200006a0
 80030c0:	40013000 	.word	0x40013000

080030c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	@ 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003214 <HAL_SPI_MspInit+0x150>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	f040 8092 	bne.w	800320c <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003218 <HAL_SPI_MspInit+0x154>)
 80030ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f0:	4a49      	ldr	r2, [pc, #292]	@ (8003218 <HAL_SPI_MspInit+0x154>)
 80030f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f8:	4b47      	ldr	r3, [pc, #284]	@ (8003218 <HAL_SPI_MspInit+0x154>)
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003104:	2300      	movs	r3, #0
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	4b43      	ldr	r3, [pc, #268]	@ (8003218 <HAL_SPI_MspInit+0x154>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	4a42      	ldr	r2, [pc, #264]	@ (8003218 <HAL_SPI_MspInit+0x154>)
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	6313      	str	r3, [r2, #48]	@ 0x30
 8003114:	4b40      	ldr	r3, [pc, #256]	@ (8003218 <HAL_SPI_MspInit+0x154>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003120:	23e0      	movs	r3, #224	@ 0xe0
 8003122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003130:	2305      	movs	r3, #5
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4619      	mov	r1, r3
 800313a:	4838      	ldr	r0, [pc, #224]	@ (800321c <HAL_SPI_MspInit+0x158>)
 800313c:	f001 faf8 	bl	8004730 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003140:	4b37      	ldr	r3, [pc, #220]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003142:	4a38      	ldr	r2, [pc, #224]	@ (8003224 <HAL_SPI_MspInit+0x160>)
 8003144:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003146:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003148:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800314c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800314e:	4b34      	ldr	r3, [pc, #208]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003154:	4b32      	ldr	r3, [pc, #200]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800315a:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 800315c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003160:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003162:	4b2f      	ldr	r3, [pc, #188]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003168:	4b2d      	ldr	r3, [pc, #180]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 800316a:	2200      	movs	r2, #0
 800316c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800316e:	4b2c      	ldr	r3, [pc, #176]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003170:	2200      	movs	r2, #0
 8003172:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003174:	4b2a      	ldr	r3, [pc, #168]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003176:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800317a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 800317e:	2200      	movs	r2, #0
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003182:	4827      	ldr	r0, [pc, #156]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003184:	f000 fed2 	bl	8003f2c <HAL_DMA_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800318e:	f7ff fa59 	bl	8002644 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a22      	ldr	r2, [pc, #136]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 8003196:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003198:	4a21      	ldr	r2, [pc, #132]	@ (8003220 <HAL_SPI_MspInit+0x15c>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800319e:	4b22      	ldr	r3, [pc, #136]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031a0:	4a22      	ldr	r2, [pc, #136]	@ (800322c <HAL_SPI_MspInit+0x168>)
 80031a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80031a4:	4b20      	ldr	r3, [pc, #128]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031a6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80031aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031be:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031c0:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031c6:	4b18      	ldr	r3, [pc, #96]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80031cc:	4b16      	ldr	r3, [pc, #88]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80031d2:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031da:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031dc:	2200      	movs	r2, #0
 80031de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80031e0:	4811      	ldr	r0, [pc, #68]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031e2:	f000 fea3 	bl	8003f2c <HAL_DMA_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80031ec:	f7ff fa2a 	bl	8002644 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031f4:	649a      	str	r2, [r3, #72]	@ 0x48
 80031f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003228 <HAL_SPI_MspInit+0x164>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2101      	movs	r1, #1
 8003200:	2023      	movs	r0, #35	@ 0x23
 8003202:	f000 fe5c 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003206:	2023      	movs	r0, #35	@ 0x23
 8003208:	f000 fe75 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800320c:	bf00      	nop
 800320e:	3728      	adds	r7, #40	@ 0x28
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40013000 	.word	0x40013000
 8003218:	40023800 	.word	0x40023800
 800321c:	40020000 	.word	0x40020000
 8003220:	200006f8 	.word	0x200006f8
 8003224:	40026410 	.word	0x40026410
 8003228:	20000758 	.word	0x20000758
 800322c:	40026458 	.word	0x40026458

08003230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	4b10      	ldr	r3, [pc, #64]	@ (800327c <HAL_MspInit+0x4c>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	4a0f      	ldr	r2, [pc, #60]	@ (800327c <HAL_MspInit+0x4c>)
 8003240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003244:	6453      	str	r3, [r2, #68]	@ 0x44
 8003246:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <HAL_MspInit+0x4c>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4b09      	ldr	r3, [pc, #36]	@ (800327c <HAL_MspInit+0x4c>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	4a08      	ldr	r2, [pc, #32]	@ (800327c <HAL_MspInit+0x4c>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003260:	6413      	str	r3, [r2, #64]	@ 0x40
 8003262:	4b06      	ldr	r3, [pc, #24]	@ (800327c <HAL_MspInit+0x4c>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800

08003280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003284:	bf00      	nop
 8003286:	e7fd      	b.n	8003284 <NMI_Handler+0x4>

08003288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <HardFault_Handler+0x4>

08003290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <MemManage_Handler+0x4>

08003298 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <BusFault_Handler+0x4>

080032a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <UsageFault_Handler+0x4>

080032a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d6:	f000 fcd3 	bl	8003c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3_up);
 80032e4:	4802      	ldr	r0, [pc, #8]	@ (80032f0 <DMA1_Stream0_IRQHandler+0x10>)
 80032e6:	f000 ffb9 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000950 	.word	0x20000950

080032f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80032f8:	4802      	ldr	r0, [pc, #8]	@ (8003304 <DMA1_Stream2_IRQHandler+0x10>)
 80032fa:	f000 ffaf 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200008f0 	.word	0x200008f0

08003308 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4_trig);
 800330c:	4802      	ldr	r0, [pc, #8]	@ (8003318 <DMA1_Stream3_IRQHandler+0x10>)
 800330e:	f000 ffa5 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200009b0 	.word	0x200009b0

0800331c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003320:	4802      	ldr	r0, [pc, #8]	@ (800332c <TIM2_IRQHandler+0x10>)
 8003322:	f003 fafd 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	200007b8 	.word	0x200007b8

08003330 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003334:	4802      	ldr	r0, [pc, #8]	@ (8003340 <SPI1_IRQHandler+0x10>)
 8003336:	f002 fcbb 	bl	8005cb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200006a0 	.word	0x200006a0

08003344 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <DMA1_Stream7_IRQHandler+0x10>)
 800334a:	f000 ff87 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000890 	.word	0x20000890

08003358 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <DMA2_Stream0_IRQHandler+0x10>)
 800335e:	f000 ff7d 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200006f8 	.word	0x200006f8

0800336c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003370:	4802      	ldr	r0, [pc, #8]	@ (800337c <DMA2_Stream1_IRQHandler+0x10>)
 8003372:	f000 ff73 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000a58 	.word	0x20000a58

08003380 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <DMA2_Stream3_IRQHandler+0x10>)
 8003386:	f000 ff69 	bl	800425c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000758 	.word	0x20000758

08003394 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
    if(__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <USART6_IRQHandler+0x3c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d10c      	bne.n	80033c2 <USART6_IRQHandler+0x2e>
        __HAL_UART_CLEAR_IDLEFLAG(&huart6);
 80033a8:	2300      	movs	r3, #0
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <USART6_IRQHandler+0x3c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <USART6_IRQHandler+0x3c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
        CRSF_IdleHandler();   // calls your parser
 80033be:	f7fe fb61 	bl	8001a84 <CRSF_IdleHandler>
    }
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80033c2:	4803      	ldr	r0, [pc, #12]	@ (80033d0 <USART6_IRQHandler+0x3c>)
 80033c4:	f004 fa44 	bl	8007850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000a10 	.word	0x20000a10

080033d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033d8:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <SystemInit+0x20>)
 80033da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033de:	4a05      	ldr	r2, [pc, #20]	@ (80033f4 <SystemInit+0x20>)
 80033e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch3_up;
DMA_HandleTypeDef hdma_tim5_ch4_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033fe:	f107 0308 	add.w	r3, r7, #8
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800340c:	463b      	mov	r3, r7
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003414:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <MX_TIM2_Init+0x94>)
 8003416:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800341a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 800341c:	4b1b      	ldr	r3, [pc, #108]	@ (800348c <MX_TIM2_Init+0x94>)
 800341e:	2253      	movs	r2, #83	@ 0x53
 8003420:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003422:	4b1a      	ldr	r3, [pc, #104]	@ (800348c <MX_TIM2_Init+0x94>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003428:	4b18      	ldr	r3, [pc, #96]	@ (800348c <MX_TIM2_Init+0x94>)
 800342a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800342e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003430:	4b16      	ldr	r3, [pc, #88]	@ (800348c <MX_TIM2_Init+0x94>)
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003436:	4b15      	ldr	r3, [pc, #84]	@ (800348c <MX_TIM2_Init+0x94>)
 8003438:	2200      	movs	r2, #0
 800343a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800343c:	4813      	ldr	r0, [pc, #76]	@ (800348c <MX_TIM2_Init+0x94>)
 800343e:	f002 ff8d 	bl	800635c <HAL_TIM_Base_Init>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003448:	f7ff f8fc 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800344c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003450:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	4619      	mov	r1, r3
 8003458:	480c      	ldr	r0, [pc, #48]	@ (800348c <MX_TIM2_Init+0x94>)
 800345a:	f003 fc13 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003464:	f7ff f8ee 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800346c:	2300      	movs	r3, #0
 800346e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003470:	463b      	mov	r3, r7
 8003472:	4619      	mov	r1, r3
 8003474:	4805      	ldr	r0, [pc, #20]	@ (800348c <MX_TIM2_Init+0x94>)
 8003476:	f004 f8e5 	bl	8007644 <HAL_TIMEx_MasterConfigSynchronization>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003480:	f7ff f8e0 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003484:	bf00      	nop
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	200007b8 	.word	0x200007b8

08003490 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08e      	sub	sp, #56	@ 0x38
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a4:	f107 0320 	add.w	r3, r7, #32
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
 80034ba:	611a      	str	r2, [r3, #16]
 80034bc:	615a      	str	r2, [r3, #20]
 80034be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034c0:	4b33      	ldr	r3, [pc, #204]	@ (8003590 <MX_TIM3_Init+0x100>)
 80034c2:	4a34      	ldr	r2, [pc, #208]	@ (8003594 <MX_TIM3_Init+0x104>)
 80034c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80034c6:	4b32      	ldr	r3, [pc, #200]	@ (8003590 <MX_TIM3_Init+0x100>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034cc:	4b30      	ldr	r3, [pc, #192]	@ (8003590 <MX_TIM3_Init+0x100>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 280-1;
 80034d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003590 <MX_TIM3_Init+0x100>)
 80034d4:	f240 1217 	movw	r2, #279	@ 0x117
 80034d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034da:	4b2d      	ldr	r3, [pc, #180]	@ (8003590 <MX_TIM3_Init+0x100>)
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003590 <MX_TIM3_Init+0x100>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034e6:	482a      	ldr	r0, [pc, #168]	@ (8003590 <MX_TIM3_Init+0x100>)
 80034e8:	f002 ff38 	bl	800635c <HAL_TIM_Base_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80034f2:	f7ff f8a7 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003500:	4619      	mov	r1, r3
 8003502:	4823      	ldr	r0, [pc, #140]	@ (8003590 <MX_TIM3_Init+0x100>)
 8003504:	f003 fbbe 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800350e:	f7ff f899 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003512:	481f      	ldr	r0, [pc, #124]	@ (8003590 <MX_TIM3_Init+0x100>)
 8003514:	f002 ffe2 	bl	80064dc <HAL_TIM_PWM_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800351e:	f7ff f891 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800352a:	f107 0320 	add.w	r3, r7, #32
 800352e:	4619      	mov	r1, r3
 8003530:	4817      	ldr	r0, [pc, #92]	@ (8003590 <MX_TIM3_Init+0x100>)
 8003532:	f004 f887 	bl	8007644 <HAL_TIMEx_MasterConfigSynchronization>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800353c:	f7ff f882 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003540:	2360      	movs	r3, #96	@ 0x60
 8003542:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 105;
 8003544:	2369      	movs	r3, #105	@ 0x69
 8003546:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800354c:	2304      	movs	r3, #4
 800354e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	2208      	movs	r2, #8
 8003554:	4619      	mov	r1, r3
 8003556:	480e      	ldr	r0, [pc, #56]	@ (8003590 <MX_TIM3_Init+0x100>)
 8003558:	f003 fad2 	bl	8006b00 <HAL_TIM_PWM_ConfigChannel>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003562:	f7ff f86f 	bl	8002644 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	220c      	movs	r2, #12
 800356e:	4619      	mov	r1, r3
 8003570:	4807      	ldr	r0, [pc, #28]	@ (8003590 <MX_TIM3_Init+0x100>)
 8003572:	f003 fac5 	bl	8006b00 <HAL_TIM_PWM_ConfigChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800357c:	f7ff f862 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003580:	4803      	ldr	r0, [pc, #12]	@ (8003590 <MX_TIM3_Init+0x100>)
 8003582:	f000 f9ef 	bl	8003964 <HAL_TIM_MspPostInit>

}
 8003586:	bf00      	nop
 8003588:	3738      	adds	r7, #56	@ 0x38
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000800 	.word	0x20000800
 8003594:	40000400 	.word	0x40000400

08003598 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	@ 0x38
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800359e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ac:	f107 0320 	add.w	r3, r7, #32
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
 80035c4:	615a      	str	r2, [r3, #20]
 80035c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035c8:	4b32      	ldr	r3, [pc, #200]	@ (8003694 <MX_TIM5_Init+0xfc>)
 80035ca:	4a33      	ldr	r2, [pc, #204]	@ (8003698 <MX_TIM5_Init+0x100>)
 80035cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80035ce:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <MX_TIM5_Init+0xfc>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003694 <MX_TIM5_Init+0xfc>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 280-1;
 80035da:	4b2e      	ldr	r3, [pc, #184]	@ (8003694 <MX_TIM5_Init+0xfc>)
 80035dc:	f240 1217 	movw	r2, #279	@ 0x117
 80035e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <MX_TIM5_Init+0xfc>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <MX_TIM5_Init+0xfc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035ee:	4829      	ldr	r0, [pc, #164]	@ (8003694 <MX_TIM5_Init+0xfc>)
 80035f0:	f002 feb4 	bl	800635c <HAL_TIM_Base_Init>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80035fa:	f7ff f823 	bl	8002644 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003602:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003604:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003608:	4619      	mov	r1, r3
 800360a:	4822      	ldr	r0, [pc, #136]	@ (8003694 <MX_TIM5_Init+0xfc>)
 800360c:	f003 fb3a 	bl	8006c84 <HAL_TIM_ConfigClockSource>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8003616:	f7ff f815 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800361a:	481e      	ldr	r0, [pc, #120]	@ (8003694 <MX_TIM5_Init+0xfc>)
 800361c:	f002 ff5e 	bl	80064dc <HAL_TIM_PWM_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8003626:	f7ff f80d 	bl	8002644 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003632:	f107 0320 	add.w	r3, r7, #32
 8003636:	4619      	mov	r1, r3
 8003638:	4816      	ldr	r0, [pc, #88]	@ (8003694 <MX_TIM5_Init+0xfc>)
 800363a:	f004 f803 	bl	8007644 <HAL_TIMEx_MasterConfigSynchronization>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8003644:	f7fe fffe 	bl	8002644 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003648:	2360      	movs	r3, #96	@ 0x60
 800364a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 105;
 800364c:	2369      	movs	r3, #105	@ 0x69
 800364e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003654:	2304      	movs	r3, #4
 8003656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	2208      	movs	r2, #8
 800365c:	4619      	mov	r1, r3
 800365e:	480d      	ldr	r0, [pc, #52]	@ (8003694 <MX_TIM5_Init+0xfc>)
 8003660:	f003 fa4e 	bl	8006b00 <HAL_TIM_PWM_ConfigChannel>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800366a:	f7fe ffeb 	bl	8002644 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	220c      	movs	r2, #12
 8003672:	4619      	mov	r1, r3
 8003674:	4807      	ldr	r0, [pc, #28]	@ (8003694 <MX_TIM5_Init+0xfc>)
 8003676:	f003 fa43 	bl	8006b00 <HAL_TIM_PWM_ConfigChannel>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8003680:	f7fe ffe0 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003684:	4803      	ldr	r0, [pc, #12]	@ (8003694 <MX_TIM5_Init+0xfc>)
 8003686:	f000 f96d 	bl	8003964 <HAL_TIM_MspPostInit>

}
 800368a:	bf00      	nop
 800368c:	3738      	adds	r7, #56	@ 0x38
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000848 	.word	0x20000848
 8003698:	40000c00 	.word	0x40000c00

0800369c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d116      	bne.n	80036dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	4b53      	ldr	r3, [pc, #332]	@ (8003800 <HAL_TIM_Base_MspInit+0x164>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	4a52      	ldr	r2, [pc, #328]	@ (8003800 <HAL_TIM_Base_MspInit+0x164>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80036be:	4b50      	ldr	r3, [pc, #320]	@ (8003800 <HAL_TIM_Base_MspInit+0x164>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2105      	movs	r1, #5
 80036ce:	201c      	movs	r0, #28
 80036d0:	f000 fbf5 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d4:	201c      	movs	r0, #28
 80036d6:	f000 fc0e 	bl	8003ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80036da:	e133      	b.n	8003944 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a48      	ldr	r2, [pc, #288]	@ (8003804 <HAL_TIM_Base_MspInit+0x168>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f040 8098 	bne.w	8003818 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	4b44      	ldr	r3, [pc, #272]	@ (8003800 <HAL_TIM_Base_MspInit+0x164>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	4a43      	ldr	r2, [pc, #268]	@ (8003800 <HAL_TIM_Base_MspInit+0x164>)
 80036f2:	f043 0302 	orr.w	r3, r3, #2
 80036f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80036f8:	4b41      	ldr	r3, [pc, #260]	@ (8003800 <HAL_TIM_Base_MspInit+0x164>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 8003704:	4b40      	ldr	r3, [pc, #256]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003706:	4a41      	ldr	r2, [pc, #260]	@ (800380c <HAL_TIM_Base_MspInit+0x170>)
 8003708:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 800370a:	4b3f      	ldr	r3, [pc, #252]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 800370c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003710:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003712:	4b3d      	ldr	r3, [pc, #244]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003714:	2240      	movs	r2, #64	@ 0x40
 8003716:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003718:	4b3b      	ldr	r3, [pc, #236]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 800371a:	2200      	movs	r2, #0
 800371c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800371e:	4b3a      	ldr	r3, [pc, #232]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003720:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003724:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003726:	4b38      	ldr	r3, [pc, #224]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003728:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800372c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800372e:	4b36      	ldr	r3, [pc, #216]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003730:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003734:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 8003736:	4b34      	ldr	r3, [pc, #208]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003738:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800373c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800373e:	4b32      	ldr	r3, [pc, #200]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003740:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003744:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003746:	4b30      	ldr	r3, [pc, #192]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003748:	2204      	movs	r2, #4
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800374c:	4b2e      	ldr	r3, [pc, #184]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 800374e:	2203      	movs	r2, #3
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8003752:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003754:	2200      	movs	r2, #0
 8003756:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003758:	4b2b      	ldr	r3, [pc, #172]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800375e:	482a      	ldr	r0, [pc, #168]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003760:	f000 fbe4 	bl	8003f2c <HAL_DMA_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_TIM_Base_MspInit+0xd2>
      Error_Handler();
 800376a:	f7fe ff6b 	bl	8002644 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a25      	ldr	r2, [pc, #148]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003772:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003774:	4a24      	ldr	r2, [pc, #144]	@ (8003808 <HAL_TIM_Base_MspInit+0x16c>)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800377a:	4b25      	ldr	r3, [pc, #148]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 800377c:	4a25      	ldr	r2, [pc, #148]	@ (8003814 <HAL_TIM_Base_MspInit+0x178>)
 800377e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 8003780:	4b23      	ldr	r3, [pc, #140]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 8003782:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003786:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003788:	4b21      	ldr	r3, [pc, #132]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 800378a:	2240      	movs	r2, #64	@ 0x40
 800378c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800378e:	4b20      	ldr	r3, [pc, #128]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8003794:	4b1e      	ldr	r3, [pc, #120]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 8003796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800379a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800379c:	4b1c      	ldr	r3, [pc, #112]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 800379e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037a2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037aa:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 80037ac:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037b2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037b4:	4b16      	ldr	r3, [pc, #88]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80037ba:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037bc:	4b14      	ldr	r3, [pc, #80]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037be:	2204      	movs	r2, #4
 80037c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80037c2:	4b13      	ldr	r3, [pc, #76]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037c4:	2203      	movs	r2, #3
 80037c6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 80037c8:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80037ce:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80037d4:	480e      	ldr	r0, [pc, #56]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037d6:	f000 fba9 	bl	8003f2c <HAL_DMA_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_TIM_Base_MspInit+0x148>
      Error_Handler();
 80037e0:	f7fe ff30 	bl	8002644 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80037ea:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a07      	ldr	r2, [pc, #28]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037f4:	621a      	str	r2, [r3, #32]
 80037f6:	4a06      	ldr	r2, [pc, #24]	@ (8003810 <HAL_TIM_Base_MspInit+0x174>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80037fc:	e0a2      	b.n	8003944 <HAL_TIM_Base_MspInit+0x2a8>
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	40000400 	.word	0x40000400
 8003808:	20000890 	.word	0x20000890
 800380c:	400260b8 	.word	0x400260b8
 8003810:	200008f0 	.word	0x200008f0
 8003814:	40026040 	.word	0x40026040
  else if(tim_baseHandle->Instance==TIM5)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4b      	ldr	r2, [pc, #300]	@ (800394c <HAL_TIM_Base_MspInit+0x2b0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	f040 8090 	bne.w	8003944 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	4b49      	ldr	r3, [pc, #292]	@ (8003950 <HAL_TIM_Base_MspInit+0x2b4>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	4a48      	ldr	r2, [pc, #288]	@ (8003950 <HAL_TIM_Base_MspInit+0x2b4>)
 800382e:	f043 0308 	orr.w	r3, r3, #8
 8003832:	6413      	str	r3, [r2, #64]	@ 0x40
 8003834:	4b46      	ldr	r3, [pc, #280]	@ (8003950 <HAL_TIM_Base_MspInit+0x2b4>)
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch3_up.Instance = DMA1_Stream0;
 8003840:	4b44      	ldr	r3, [pc, #272]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003842:	4a45      	ldr	r2, [pc, #276]	@ (8003958 <HAL_TIM_Base_MspInit+0x2bc>)
 8003844:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3_up.Init.Channel = DMA_CHANNEL_6;
 8003846:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003848:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800384c:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800384e:	4b41      	ldr	r3, [pc, #260]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003850:	2240      	movs	r2, #64	@ 0x40
 8003852:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003854:	4b3f      	ldr	r3, [pc, #252]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003856:	2200      	movs	r2, #0
 8003858:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 800385a:	4b3e      	ldr	r3, [pc, #248]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 800385c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003860:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003862:	4b3c      	ldr	r3, [pc, #240]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003864:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003868:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800386a:	4b3a      	ldr	r3, [pc, #232]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 800386c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003870:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3_up.Init.Mode = DMA_CIRCULAR;
 8003872:	4b38      	ldr	r3, [pc, #224]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003878:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800387a:	4b36      	ldr	r3, [pc, #216]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 800387c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003880:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003882:	4b34      	ldr	r3, [pc, #208]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003884:	2204      	movs	r2, #4
 8003886:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch3_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003888:	4b32      	ldr	r3, [pc, #200]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 800388a:	2203      	movs	r2, #3
 800388c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch3_up.Init.MemBurst = DMA_MBURST_SINGLE;
 800388e:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003890:	2200      	movs	r2, #0
 8003892:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch3_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003894:	4b2f      	ldr	r3, [pc, #188]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3_up) != HAL_OK)
 800389a:	482e      	ldr	r0, [pc, #184]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 800389c:	f000 fb46 	bl	8003f2c <HAL_DMA_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_TIM_Base_MspInit+0x20e>
      Error_Handler();
 80038a6:	f7fe fecd 	bl	8002644 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3_up);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a29      	ldr	r2, [pc, #164]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 80038ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80038b0:	4a28      	ldr	r2, [pc, #160]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_ch3_up);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a26      	ldr	r2, [pc, #152]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 80038ba:	621a      	str	r2, [r3, #32]
 80038bc:	4a25      	ldr	r2, [pc, #148]	@ (8003954 <HAL_TIM_Base_MspInit+0x2b8>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4_trig.Instance = DMA1_Stream3;
 80038c2:	4b26      	ldr	r3, [pc, #152]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038c4:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <HAL_TIM_Base_MspInit+0x2c4>)
 80038c6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4_trig.Init.Channel = DMA_CHANNEL_6;
 80038c8:	4b24      	ldr	r3, [pc, #144]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038ca:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80038ce:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038d0:	4b22      	ldr	r3, [pc, #136]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038d2:	2240      	movs	r2, #64	@ 0x40
 80038d4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80038d6:	4b21      	ldr	r3, [pc, #132]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4_trig.Init.MemInc = DMA_MINC_ENABLE;
 80038dc:	4b1f      	ldr	r3, [pc, #124]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038e2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038ea:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038f2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4_trig.Init.Mode = DMA_CIRCULAR;
 80038f4:	4b19      	ldr	r3, [pc, #100]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038fa:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4_trig.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80038fc:	4b17      	ldr	r3, [pc, #92]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 80038fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003902:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003904:	4b15      	ldr	r3, [pc, #84]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 8003906:	2204      	movs	r2, #4
 8003908:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800390a:	4b14      	ldr	r3, [pc, #80]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 800390c:	2203      	movs	r2, #3
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 8003910:	4b12      	ldr	r3, [pc, #72]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 8003912:	2200      	movs	r2, #0
 8003914:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003916:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4_trig) != HAL_OK)
 800391c:	480f      	ldr	r0, [pc, #60]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 800391e:	f000 fb05 	bl	8003f2c <HAL_DMA_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_MspInit+0x290>
      Error_Handler();
 8003928:	f7fe fe8c 	bl	8002644 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4_trig);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a0b      	ldr	r2, [pc, #44]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 8003930:	631a      	str	r2, [r3, #48]	@ 0x30
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim5_ch4_trig);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a08      	ldr	r2, [pc, #32]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
 800393e:	4a07      	ldr	r2, [pc, #28]	@ (800395c <HAL_TIM_Base_MspInit+0x2c0>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40000c00 	.word	0x40000c00
 8003950:	40023800 	.word	0x40023800
 8003954:	20000950 	.word	0x20000950
 8003958:	40026010 	.word	0x40026010
 800395c:	200009b0 	.word	0x200009b0
 8003960:	40026058 	.word	0x40026058

08003964 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	@ 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a24      	ldr	r2, [pc, #144]	@ (8003a14 <HAL_TIM_MspPostInit+0xb0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d11e      	bne.n	80039c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	4b23      	ldr	r3, [pc, #140]	@ (8003a18 <HAL_TIM_MspPostInit+0xb4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	4a22      	ldr	r2, [pc, #136]	@ (8003a18 <HAL_TIM_MspPostInit+0xb4>)
 8003990:	f043 0302 	orr.w	r3, r3, #2
 8003994:	6313      	str	r3, [r2, #48]	@ 0x30
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_TIM_MspPostInit+0xb4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039a2:	2303      	movs	r3, #3
 80039a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ae:	2300      	movs	r3, #0
 80039b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039b2:	2302      	movs	r3, #2
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	f107 0314 	add.w	r3, r7, #20
 80039ba:	4619      	mov	r1, r3
 80039bc:	4817      	ldr	r0, [pc, #92]	@ (8003a1c <HAL_TIM_MspPostInit+0xb8>)
 80039be:	f000 feb7 	bl	8004730 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80039c2:	e022      	b.n	8003a0a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a15      	ldr	r2, [pc, #84]	@ (8003a20 <HAL_TIM_MspPostInit+0xbc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d11d      	bne.n	8003a0a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <HAL_TIM_MspPostInit+0xb4>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a10      	ldr	r2, [pc, #64]	@ (8003a18 <HAL_TIM_MspPostInit+0xb4>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <HAL_TIM_MspPostInit+0xb4>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039ea:	230c      	movs	r3, #12
 80039ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ee:	2302      	movs	r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80039fa:	2302      	movs	r3, #2
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fe:	f107 0314 	add.w	r3, r7, #20
 8003a02:	4619      	mov	r1, r3
 8003a04:	4807      	ldr	r0, [pc, #28]	@ (8003a24 <HAL_TIM_MspPostInit+0xc0>)
 8003a06:	f000 fe93 	bl	8004730 <HAL_GPIO_Init>
}
 8003a0a:	bf00      	nop
 8003a0c:	3728      	adds	r7, #40	@ 0x28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40000c00 	.word	0x40000c00
 8003a24:	40020000 	.word	0x40020000

08003a28 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003a2c:	4b11      	ldr	r3, [pc, #68]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a2e:	4a12      	ldr	r2, [pc, #72]	@ (8003a78 <MX_USART6_UART_Init+0x50>)
 8003a30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 420000;
 8003a32:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a34:	4a11      	ldr	r2, [pc, #68]	@ (8003a7c <MX_USART6_UART_Init+0x54>)
 8003a36:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003a38:	4b0e      	ldr	r3, [pc, #56]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a4c:	220c      	movs	r2, #12
 8003a4e:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a50:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_8;
 8003a56:	4b07      	ldr	r3, [pc, #28]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003a5e:	4805      	ldr	r0, [pc, #20]	@ (8003a74 <MX_USART6_UART_Init+0x4c>)
 8003a60:	f003 fe80 	bl	8007764 <HAL_UART_Init>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003a6a:	f7fe fdeb 	bl	8002644 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000a10 	.word	0x20000a10
 8003a78:	40011400 	.word	0x40011400
 8003a7c:	000668a0 	.word	0x000668a0

08003a80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	@ 0x28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a35      	ldr	r2, [pc, #212]	@ (8003b74 <HAL_UART_MspInit+0xf4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d163      	bne.n	8003b6a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <HAL_UART_MspInit+0xf8>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	4a33      	ldr	r2, [pc, #204]	@ (8003b78 <HAL_UART_MspInit+0xf8>)
 8003aac:	f043 0320 	orr.w	r3, r3, #32
 8003ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ab2:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <HAL_UART_MspInit+0xf8>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b78 <HAL_UART_MspInit+0xf8>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b78 <HAL_UART_MspInit+0xf8>)
 8003ac8:	f043 0304 	orr.w	r3, r3, #4
 8003acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ace:	4b2a      	ldr	r3, [pc, #168]	@ (8003b78 <HAL_UART_MspInit+0xf8>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ada:	23c0      	movs	r3, #192	@ 0xc0
 8003adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003aea:	2308      	movs	r3, #8
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	4619      	mov	r1, r3
 8003af4:	4821      	ldr	r0, [pc, #132]	@ (8003b7c <HAL_UART_MspInit+0xfc>)
 8003af6:	f000 fe1b 	bl	8004730 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003afa:	4b21      	ldr	r3, [pc, #132]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003afc:	4a21      	ldr	r2, [pc, #132]	@ (8003b84 <HAL_UART_MspInit+0x104>)
 8003afe:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003b00:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b02:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003b06:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b08:	4b1d      	ldr	r3, [pc, #116]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b14:	4b1a      	ldr	r3, [pc, #104]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b1a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b1c:	4b18      	ldr	r3, [pc, #96]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b22:	4b17      	ldr	r3, [pc, #92]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003b28:	4b15      	ldr	r3, [pc, #84]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b2e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b30:	4b13      	ldr	r3, [pc, #76]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b32:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b36:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b38:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003b3e:	4810      	ldr	r0, [pc, #64]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b40:	f000 f9f4 	bl	8003f2c <HAL_DMA_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003b4a:	f7fe fd7b 	bl	8002644 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a0b      	ldr	r2, [pc, #44]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b54:	4a0a      	ldr	r2, [pc, #40]	@ (8003b80 <HAL_UART_MspInit+0x100>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	2047      	movs	r0, #71	@ 0x47
 8003b60:	f000 f9ad 	bl	8003ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b64:	2047      	movs	r0, #71	@ 0x47
 8003b66:	f000 f9c6 	bl	8003ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3728      	adds	r7, #40	@ 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40011400 	.word	0x40011400
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40020800 	.word	0x40020800
 8003b80:	20000a58 	.word	0x20000a58
 8003b84:	40026428 	.word	0x40026428

08003b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b8c:	f7ff fc22 	bl	80033d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b90:	480c      	ldr	r0, [pc, #48]	@ (8003bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b92:	490d      	ldr	r1, [pc, #52]	@ (8003bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b94:	4a0d      	ldr	r2, [pc, #52]	@ (8003bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b98:	e002      	b.n	8003ba0 <LoopCopyDataInit>

08003b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b9e:	3304      	adds	r3, #4

08003ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ba4:	d3f9      	bcc.n	8003b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ba8:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bac:	e001      	b.n	8003bb2 <LoopFillZerobss>

08003bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb0:	3204      	adds	r2, #4

08003bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bb4:	d3fb      	bcc.n	8003bae <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003bb6:	f004 ff11 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bba:	f7fd ffc9 	bl	8001b50 <main>
  bx  lr    
 8003bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bc8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003bcc:	08009ec0 	.word	0x08009ec0
  ldr r2, =_sbss
 8003bd0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003bd4:	20000bf4 	.word	0x20000bf4

08003bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd8:	e7fe      	b.n	8003bd8 <ADC_IRQHandler>
	...

08003bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003be0:	4b0e      	ldr	r3, [pc, #56]	@ (8003c1c <HAL_Init+0x40>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c1c <HAL_Init+0x40>)
 8003be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_Init+0x40>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8003c1c <HAL_Init+0x40>)
 8003bf2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf8:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <HAL_Init+0x40>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a07      	ldr	r2, [pc, #28]	@ (8003c1c <HAL_Init+0x40>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c04:	2003      	movs	r0, #3
 8003c06:	f000 f94f 	bl	8003ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c0a:	200f      	movs	r0, #15
 8003c0c:	f000 f808 	bl	8003c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c10:	f7ff fb0e 	bl	8003230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023c00 	.word	0x40023c00

08003c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c28:	4b12      	ldr	r3, [pc, #72]	@ (8003c74 <HAL_InitTick+0x54>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_InitTick+0x58>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f967 	bl	8003f12 <HAL_SYSTICK_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e00e      	b.n	8003c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b0f      	cmp	r3, #15
 8003c52:	d80a      	bhi.n	8003c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c54:	2200      	movs	r2, #0
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5c:	f000 f92f 	bl	8003ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c60:	4a06      	ldr	r2, [pc, #24]	@ (8003c7c <HAL_InitTick+0x5c>)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e000      	b.n	8003c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000004 	.word	0x20000004
 8003c78:	2000000c 	.word	0x2000000c
 8003c7c:	20000008 	.word	0x20000008

08003c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c84:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_IncTick+0x20>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_IncTick+0x24>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4413      	add	r3, r2
 8003c90:	4a04      	ldr	r2, [pc, #16]	@ (8003ca4 <HAL_IncTick+0x24>)
 8003c92:	6013      	str	r3, [r2, #0]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	2000000c 	.word	0x2000000c
 8003ca4:	20000ab8 	.word	0x20000ab8

08003ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <HAL_GetTick+0x14>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000ab8 	.word	0x20000ab8

08003cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cc8:	f7ff ffee 	bl	8003ca8 <HAL_GetTick>
 8003ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d005      	beq.n	8003ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cda:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <HAL_Delay+0x44>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ce6:	bf00      	nop
 8003ce8:	f7ff ffde 	bl	8003ca8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d8f7      	bhi.n	8003ce8 <HAL_Delay+0x28>
  {
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c

08003d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d18:	4b0c      	ldr	r3, [pc, #48]	@ (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d24:	4013      	ands	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d3a:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <__NVIC_SetPriorityGrouping+0x44>)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	60d3      	str	r3, [r2, #12]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d54:	4b04      	ldr	r3, [pc, #16]	@ (8003d68 <__NVIC_GetPriorityGrouping+0x18>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	f003 0307 	and.w	r3, r3, #7
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	e000ed00 	.word	0xe000ed00

08003d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	db0b      	blt.n	8003d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	f003 021f 	and.w	r2, r3, #31
 8003d84:	4907      	ldr	r1, [pc, #28]	@ (8003da4 <__NVIC_EnableIRQ+0x38>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	e000e100 	.word	0xe000e100

08003da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	6039      	str	r1, [r7, #0]
 8003db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	db0a      	blt.n	8003dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	490c      	ldr	r1, [pc, #48]	@ (8003df4 <__NVIC_SetPriority+0x4c>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	0112      	lsls	r2, r2, #4
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	440b      	add	r3, r1
 8003dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd0:	e00a      	b.n	8003de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4908      	ldr	r1, [pc, #32]	@ (8003df8 <__NVIC_SetPriority+0x50>)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	3b04      	subs	r3, #4
 8003de0:	0112      	lsls	r2, r2, #4
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	440b      	add	r3, r1
 8003de6:	761a      	strb	r2, [r3, #24]
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000e100 	.word	0xe000e100
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	@ 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f1c3 0307 	rsb	r3, r3, #7
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	bf28      	it	cs
 8003e1a:	2304      	movcs	r3, #4
 8003e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2b06      	cmp	r3, #6
 8003e24:	d902      	bls.n	8003e2c <NVIC_EncodePriority+0x30>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3b03      	subs	r3, #3
 8003e2a:	e000      	b.n	8003e2e <NVIC_EncodePriority+0x32>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43da      	mvns	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	401a      	ands	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e44:	f04f 31ff 	mov.w	r1, #4294967295
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	43d9      	mvns	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	4313      	orrs	r3, r2
         );
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3724      	adds	r7, #36	@ 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e74:	d301      	bcc.n	8003e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e76:	2301      	movs	r3, #1
 8003e78:	e00f      	b.n	8003e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e82:	210f      	movs	r1, #15
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	f7ff ff8e 	bl	8003da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e92:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <SysTick_Config+0x40>)
 8003e94:	2207      	movs	r2, #7
 8003e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	e000e010 	.word	0xe000e010

08003ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff ff29 	bl	8003d08 <__NVIC_SetPriorityGrouping>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	60b9      	str	r1, [r7, #8]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ed0:	f7ff ff3e 	bl	8003d50 <__NVIC_GetPriorityGrouping>
 8003ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	6978      	ldr	r0, [r7, #20]
 8003edc:	f7ff ff8e 	bl	8003dfc <NVIC_EncodePriority>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff ff5d 	bl	8003da8 <__NVIC_SetPriority>
}
 8003eee:	bf00      	nop
 8003ef0:	3718      	adds	r7, #24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff ff31 	bl	8003d6c <__NVIC_EnableIRQ>
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ffa2 	bl	8003e64 <SysTick_Config>
 8003f20:	4603      	mov	r3, r0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7ff feb6 	bl	8003ca8 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e099      	b.n	800407c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f68:	e00f      	b.n	8003f8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f6a:	f7ff fe9d 	bl	8003ca8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d908      	bls.n	8003f8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2203      	movs	r2, #3
 8003f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e078      	b.n	800407c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e8      	bne.n	8003f6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <HAL_DMA_Init+0x158>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d107      	bne.n	8003ff4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	4313      	orrs	r3, r2
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0307 	bic.w	r3, r3, #7
 800400a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	2b04      	cmp	r3, #4
 800401c:	d117      	bne.n	800404e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00e      	beq.n	800404e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fb01 	bl	8004638 <DMA_CheckFifoParam>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2240      	movs	r2, #64	@ 0x40
 8004040:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800404a:	2301      	movs	r3, #1
 800404c:	e016      	b.n	800407c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fab8 	bl	80045cc <DMA_CalcBaseAndBitshift>
 800405c:	4603      	mov	r3, r0
 800405e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004064:	223f      	movs	r2, #63	@ 0x3f
 8004066:	409a      	lsls	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	f010803f 	.word	0xf010803f

08004088 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_DMA_Start_IT+0x26>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e040      	b.n	8004130 <HAL_DMA_Start_IT+0xa8>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d12f      	bne.n	8004122 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 fa4a 	bl	8004570 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e0:	223f      	movs	r2, #63	@ 0x3f
 80040e2:	409a      	lsls	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0216 	orr.w	r2, r2, #22
 80040f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0208 	orr.w	r2, r2, #8
 800410e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e005      	b.n	800412e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800412a:	2302      	movs	r3, #2
 800412c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800412e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004144:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004146:	f7ff fdaf 	bl	8003ca8 <HAL_GetTick>
 800414a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d008      	beq.n	800416a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2280      	movs	r2, #128	@ 0x80
 800415c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e052      	b.n	8004210 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0216 	bic.w	r2, r2, #22
 8004178:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004188:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_DMA_Abort+0x62>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0208 	bic.w	r2, r2, #8
 80041a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ba:	e013      	b.n	80041e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041bc:	f7ff fd74 	bl	8003ca8 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d90c      	bls.n	80041e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2203      	movs	r2, #3
 80041d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e015      	b.n	8004210 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e4      	bne.n	80041bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f6:	223f      	movs	r2, #63	@ 0x3f
 80041f8:	409a      	lsls	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d004      	beq.n	8004236 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2280      	movs	r2, #128	@ 0x80
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e00c      	b.n	8004250 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2205      	movs	r2, #5
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004268:	4b8e      	ldr	r3, [pc, #568]	@ (80044a4 <HAL_DMA_IRQHandler+0x248>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a8e      	ldr	r2, [pc, #568]	@ (80044a8 <HAL_DMA_IRQHandler+0x24c>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	0a9b      	lsrs	r3, r3, #10
 8004274:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004286:	2208      	movs	r2, #8
 8004288:	409a      	lsls	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01a      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d013      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	2208      	movs	r2, #8
 80042b6:	409a      	lsls	r2, r3
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c0:	f043 0201 	orr.w	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	2201      	movs	r2, #1
 80042ce:	409a      	lsls	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	2201      	movs	r2, #1
 80042ec:	409a      	lsls	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004302:	2204      	movs	r2, #4
 8004304:	409a      	lsls	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d012      	beq.n	8004334 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	2204      	movs	r2, #4
 8004322:	409a      	lsls	r2, r3
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f043 0204 	orr.w	r2, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004338:	2210      	movs	r2, #16
 800433a:	409a      	lsls	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d043      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d03c      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004356:	2210      	movs	r2, #16
 8004358:	409a      	lsls	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d018      	beq.n	800439e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d024      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	4798      	blx	r3
 800438a:	e01f      	b.n	80043cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01b      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e016      	b.n	80043cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0208 	bic.w	r2, r2, #8
 80043ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	2220      	movs	r2, #32
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 808f 	beq.w	80044fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 8087 	beq.w	80044fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f2:	2220      	movs	r2, #32
 80043f4:	409a      	lsls	r2, r3
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b05      	cmp	r3, #5
 8004404:	d136      	bne.n	8004474 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0216 	bic.w	r2, r2, #22
 8004414:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695a      	ldr	r2, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004424:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_DMA_IRQHandler+0x1da>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0208 	bic.w	r2, r2, #8
 8004444:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800444a:	223f      	movs	r2, #63	@ 0x3f
 800444c:	409a      	lsls	r2, r3
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d07e      	beq.n	8004568 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
        }
        return;
 8004472:	e079      	b.n	8004568 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01d      	beq.n	80044be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10d      	bne.n	80044ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	2b00      	cmp	r3, #0
 8004496:	d031      	beq.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4798      	blx	r3
 80044a0:	e02c      	b.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
 80044a2:	bf00      	nop
 80044a4:	20000004 	.word	0x20000004
 80044a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d023      	beq.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
 80044bc:	e01e      	b.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10f      	bne.n	80044ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0210 	bic.w	r2, r2, #16
 80044da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004500:	2b00      	cmp	r3, #0
 8004502:	d032      	beq.n	800456a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d022      	beq.n	8004556 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2205      	movs	r2, #5
 8004514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	3301      	adds	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	429a      	cmp	r2, r3
 8004532:	d307      	bcc.n	8004544 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f2      	bne.n	8004528 <HAL_DMA_IRQHandler+0x2cc>
 8004542:	e000      	b.n	8004546 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004544:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e000      	b.n	800456a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004568:	bf00      	nop
    }
  }
}
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800458c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b40      	cmp	r3, #64	@ 0x40
 800459c:	d108      	bne.n	80045b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045ae:	e007      	b.n	80045c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	60da      	str	r2, [r3, #12]
}
 80045c0:	bf00      	nop
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3b10      	subs	r3, #16
 80045dc:	4a14      	ldr	r2, [pc, #80]	@ (8004630 <DMA_CalcBaseAndBitshift+0x64>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045e6:	4a13      	ldr	r2, [pc, #76]	@ (8004634 <DMA_CalcBaseAndBitshift+0x68>)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d909      	bls.n	800460e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	1d1a      	adds	r2, r3, #4
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	659a      	str	r2, [r3, #88]	@ 0x58
 800460c:	e007      	b.n	800461e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	aaaaaaab 	.word	0xaaaaaaab
 8004634:	08009aa0 	.word	0x08009aa0

08004638 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004648:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d11f      	bne.n	8004692 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d856      	bhi.n	8004706 <DMA_CheckFifoParam+0xce>
 8004658:	a201      	add	r2, pc, #4	@ (adr r2, 8004660 <DMA_CheckFifoParam+0x28>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004671 	.word	0x08004671
 8004664:	08004683 	.word	0x08004683
 8004668:	08004671 	.word	0x08004671
 800466c:	08004707 	.word	0x08004707
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d046      	beq.n	800470a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004680:	e043      	b.n	800470a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004686:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800468a:	d140      	bne.n	800470e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004690:	e03d      	b.n	800470e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800469a:	d121      	bne.n	80046e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d837      	bhi.n	8004712 <DMA_CheckFifoParam+0xda>
 80046a2:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <DMA_CheckFifoParam+0x70>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046bf 	.word	0x080046bf
 80046b0:	080046b9 	.word	0x080046b9
 80046b4:	080046d1 	.word	0x080046d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e030      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d025      	beq.n	8004716 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ce:	e022      	b.n	8004716 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046d8:	d11f      	bne.n	800471a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046de:	e01c      	b.n	800471a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d903      	bls.n	80046ee <DMA_CheckFifoParam+0xb6>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d003      	beq.n	80046f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046ec:	e018      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
      break;
 80046f2:	e015      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
      break;
 8004704:	e00b      	b.n	800471e <DMA_CheckFifoParam+0xe6>
      break;
 8004706:	bf00      	nop
 8004708:	e00a      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 800470a:	bf00      	nop
 800470c:	e008      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 800470e:	bf00      	nop
 8004710:	e006      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 8004712:	bf00      	nop
 8004714:	e004      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 8004716:	bf00      	nop
 8004718:	e002      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;   
 800471a:	bf00      	nop
 800471c:	e000      	b.n	8004720 <DMA_CheckFifoParam+0xe8>
      break;
 800471e:	bf00      	nop
    }
  } 
  
  return status; 
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop

08004730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004730:	b480      	push	{r7}
 8004732:	b089      	sub	sp, #36	@ 0x24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e16b      	b.n	8004a24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800474c:	2201      	movs	r2, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	429a      	cmp	r2, r3
 8004766:	f040 815a 	bne.w	8004a1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d005      	beq.n	8004782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800477e:	2b02      	cmp	r3, #2
 8004780:	d130      	bne.n	80047e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	2203      	movs	r2, #3
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047b8:	2201      	movs	r2, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0201 	and.w	r2, r3, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d017      	beq.n	8004820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d123      	bne.n	8004874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	08da      	lsrs	r2, r3, #3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3208      	adds	r2, #8
 8004834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	220f      	movs	r2, #15
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4013      	ands	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	08da      	lsrs	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3208      	adds	r2, #8
 800486e:	69b9      	ldr	r1, [r7, #24]
 8004870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0203 	and.w	r2, r3, #3
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80b4 	beq.w	8004a1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	4b60      	ldr	r3, [pc, #384]	@ (8004a3c <HAL_GPIO_Init+0x30c>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	4a5f      	ldr	r2, [pc, #380]	@ (8004a3c <HAL_GPIO_Init+0x30c>)
 80048c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80048c6:	4b5d      	ldr	r3, [pc, #372]	@ (8004a3c <HAL_GPIO_Init+0x30c>)
 80048c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a40 <HAL_GPIO_Init+0x310>)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a52      	ldr	r2, [pc, #328]	@ (8004a44 <HAL_GPIO_Init+0x314>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d02b      	beq.n	8004956 <HAL_GPIO_Init+0x226>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a51      	ldr	r2, [pc, #324]	@ (8004a48 <HAL_GPIO_Init+0x318>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d025      	beq.n	8004952 <HAL_GPIO_Init+0x222>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a50      	ldr	r2, [pc, #320]	@ (8004a4c <HAL_GPIO_Init+0x31c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <HAL_GPIO_Init+0x21e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4f      	ldr	r2, [pc, #316]	@ (8004a50 <HAL_GPIO_Init+0x320>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d019      	beq.n	800494a <HAL_GPIO_Init+0x21a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4e      	ldr	r2, [pc, #312]	@ (8004a54 <HAL_GPIO_Init+0x324>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_GPIO_Init+0x216>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a4d      	ldr	r2, [pc, #308]	@ (8004a58 <HAL_GPIO_Init+0x328>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00d      	beq.n	8004942 <HAL_GPIO_Init+0x212>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a4c      	ldr	r2, [pc, #304]	@ (8004a5c <HAL_GPIO_Init+0x32c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <HAL_GPIO_Init+0x20e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a4b      	ldr	r2, [pc, #300]	@ (8004a60 <HAL_GPIO_Init+0x330>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_GPIO_Init+0x20a>
 8004936:	2307      	movs	r3, #7
 8004938:	e00e      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800493a:	2308      	movs	r3, #8
 800493c:	e00c      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800493e:	2306      	movs	r3, #6
 8004940:	e00a      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004942:	2305      	movs	r3, #5
 8004944:	e008      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004946:	2304      	movs	r3, #4
 8004948:	e006      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800494a:	2303      	movs	r3, #3
 800494c:	e004      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800494e:	2302      	movs	r3, #2
 8004950:	e002      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004956:	2300      	movs	r3, #0
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	f002 0203 	and.w	r2, r2, #3
 800495e:	0092      	lsls	r2, r2, #2
 8004960:	4093      	lsls	r3, r2
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004968:	4935      	ldr	r1, [pc, #212]	@ (8004a40 <HAL_GPIO_Init+0x310>)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	3302      	adds	r3, #2
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004976:	4b3b      	ldr	r3, [pc, #236]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800499a:	4a32      	ldr	r2, [pc, #200]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049a0:	4b30      	ldr	r3, [pc, #192]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049c4:	4a27      	ldr	r2, [pc, #156]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049ca:	4b26      	ldr	r3, [pc, #152]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a18:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	f67f ae90 	bls.w	800474c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	3724      	adds	r7, #36	@ 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40013800 	.word	0x40013800
 8004a44:	40020000 	.word	0x40020000
 8004a48:	40020400 	.word	0x40020400
 8004a4c:	40020800 	.word	0x40020800
 8004a50:	40020c00 	.word	0x40020c00
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40021400 	.word	0x40021400
 8004a5c:	40021800 	.word	0x40021800
 8004a60:	40021c00 	.word	0x40021c00
 8004a64:	40013c00 	.word	0x40013c00

08004a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	807b      	strh	r3, [r7, #2]
 8004a74:	4613      	mov	r3, r2
 8004a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a78:	787b      	ldrb	r3, [r7, #1]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a84:	e003      	b.n	8004a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	041a      	lsls	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	619a      	str	r2, [r3, #24]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e267      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d075      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aba:	4b88      	ldr	r3, [pc, #544]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d00c      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac6:	4b85      	ldr	r3, [pc, #532]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d112      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad2:	4b82      	ldr	r3, [pc, #520]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d157      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e242      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x74>
 8004b02:	4b76      	ldr	r3, [pc, #472]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a75      	ldr	r2, [pc, #468]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b6d      	ldr	r3, [pc, #436]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a6c      	ldr	r2, [pc, #432]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b34:	4b69      	ldr	r3, [pc, #420]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a68      	ldr	r2, [pc, #416]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b66      	ldr	r3, [pc, #408]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a65      	ldr	r2, [pc, #404]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7ff f8a8 	bl	8003ca8 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7ff f8a4 	bl	8003ca8 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e207      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7ff f894 	bl	8003ca8 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7ff f890 	bl	8003ca8 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	@ 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e1f3      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	4b51      	ldr	r3, [pc, #324]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d063      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bbe:	4b47      	ldr	r3, [pc, #284]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d11c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bca:	4b44      	ldr	r3, [pc, #272]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d116      	bne.n	8004c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd6:	4b41      	ldr	r3, [pc, #260]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1c7      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bee:	4b3b      	ldr	r3, [pc, #236]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4937      	ldr	r1, [pc, #220]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	e03a      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0c:	4b34      	ldr	r3, [pc, #208]	@ (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7ff f849 	bl	8003ca8 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c1a:	f7ff f845 	bl	8003ca8 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1a8      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c38:	4b28      	ldr	r3, [pc, #160]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4925      	ldr	r1, [pc, #148]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]
 8004c4c:	e015      	b.n	8004c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ce0 <HAL_RCC_OscConfig+0x244>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7ff f828 	bl	8003ca8 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c5c:	f7ff f824 	bl	8003ca8 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e187      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d036      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <HAL_RCC_OscConfig+0x248>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7ff f808 	bl	8003ca8 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9c:	f7ff f804 	bl	8003ca8 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e167      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <HAL_RCC_OscConfig+0x240>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x200>
 8004cba:	e01b      	b.n	8004cf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbc:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <HAL_RCC_OscConfig+0x248>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc2:	f7fe fff1 	bl	8003ca8 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc8:	e00e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fe ffed 	bl	8003ca8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d907      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e150      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470000 	.word	0x42470000
 8004ce4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce8:	4b88      	ldr	r3, [pc, #544]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ea      	bne.n	8004cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8097 	beq.w	8004e30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d06:	4b81      	ldr	r3, [pc, #516]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	4b7d      	ldr	r3, [pc, #500]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d22:	4b7a      	ldr	r3, [pc, #488]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	60bb      	str	r3, [r7, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	4b77      	ldr	r3, [pc, #476]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d118      	bne.n	8004d70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3e:	4b74      	ldr	r3, [pc, #464]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a73      	ldr	r2, [pc, #460]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4a:	f7fe ffad 	bl	8003ca8 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d52:	f7fe ffa9 	bl	8003ca8 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e10c      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d64:	4b6a      	ldr	r3, [pc, #424]	@ (8004f10 <HAL_RCC_OscConfig+0x474>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0f0      	beq.n	8004d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x2ea>
 8004d78:	4b64      	ldr	r3, [pc, #400]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7c:	4a63      	ldr	r2, [pc, #396]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d84:	e01c      	b.n	8004dc0 <HAL_RCC_OscConfig+0x324>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x30c>
 8004d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d92:	4a5e      	ldr	r2, [pc, #376]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d94:	f043 0304 	orr.w	r3, r3, #4
 8004d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0x324>
 8004da8:	4b58      	ldr	r3, [pc, #352]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a57      	ldr	r2, [pc, #348]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	4b55      	ldr	r3, [pc, #340]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db8:	4a54      	ldr	r2, [pc, #336]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004dba:	f023 0304 	bic.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d015      	beq.n	8004df4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fe ff6e 	bl	8003ca8 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dce:	e00a      	b.n	8004de6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd0:	f7fe ff6a 	bl	8003ca8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e0cb      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de6:	4b49      	ldr	r3, [pc, #292]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0ee      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x334>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df4:	f7fe ff58 	bl	8003ca8 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fe ff54 	bl	8003ca8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0b5      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e12:	4b3e      	ldr	r3, [pc, #248]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1ee      	bne.n	8004dfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d105      	bne.n	8004e30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e24:	4b39      	ldr	r3, [pc, #228]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	4a38      	ldr	r2, [pc, #224]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 80a1 	beq.w	8004f7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e3a:	4b34      	ldr	r3, [pc, #208]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d05c      	beq.n	8004f00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d141      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b31      	ldr	r3, [pc, #196]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fe ff28 	bl	8003ca8 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fe ff24 	bl	8003ca8 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e087      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	4b27      	ldr	r3, [pc, #156]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69da      	ldr	r2, [r3, #28]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	019b      	lsls	r3, r3, #6
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	3b01      	subs	r3, #1
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9c:	061b      	lsls	r3, r3, #24
 8004e9e:	491b      	ldr	r1, [pc, #108]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fe fefd 	bl	8003ca8 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fe fef9 	bl	8003ca8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e05c      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec4:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x416>
 8004ed0:	e054      	b.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed2:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <HAL_RCC_OscConfig+0x478>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fe fee6 	bl	8003ca8 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fe fee2 	bl	8003ca8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e045      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <HAL_RCC_OscConfig+0x470>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x444>
 8004efe:	e03d      	b.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d107      	bne.n	8004f18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e038      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
 8004f0c:	40023800 	.word	0x40023800
 8004f10:	40007000 	.word	0x40007000
 8004f14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f18:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <HAL_RCC_OscConfig+0x4ec>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d028      	beq.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d121      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d11a      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d111      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	3b01      	subs	r3, #1
 8004f62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40023800 	.word	0x40023800

08004f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0cc      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b68      	ldr	r3, [pc, #416]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d90c      	bls.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b65      	ldr	r3, [pc, #404]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b63      	ldr	r3, [pc, #396]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0b8      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fe0:	4b59      	ldr	r3, [pc, #356]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a58      	ldr	r2, [pc, #352]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff8:	4b53      	ldr	r3, [pc, #332]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a52      	ldr	r2, [pc, #328]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b50      	ldr	r3, [pc, #320]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	494d      	ldr	r1, [pc, #308]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d044      	beq.n	80050ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800502a:	4b47      	ldr	r3, [pc, #284]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d119      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e07f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d003      	beq.n	800504a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005046:	2b03      	cmp	r3, #3
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800504a:	4b3f      	ldr	r3, [pc, #252]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d109      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e06f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505a:	4b3b      	ldr	r3, [pc, #236]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e067      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800506a:	4b37      	ldr	r3, [pc, #220]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4934      	ldr	r1, [pc, #208]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	4313      	orrs	r3, r2
 800507a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800507c:	f7fe fe14 	bl	8003ca8 <HAL_GetTick>
 8005080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	e00a      	b.n	800509a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005084:	f7fe fe10 	bl	8003ca8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005092:	4293      	cmp	r3, r2
 8005094:	d901      	bls.n	800509a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e04f      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	4b2b      	ldr	r3, [pc, #172]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 020c 	and.w	r2, r3, #12
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1eb      	bne.n	8005084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0307 	and.w	r3, r3, #7
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d20c      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ba:	4b22      	ldr	r3, [pc, #136]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050c2:	4b20      	ldr	r3, [pc, #128]	@ (8005144 <HAL_RCC_ClockConfig+0x1b8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e032      	b.n	800513a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050e0:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4916      	ldr	r1, [pc, #88]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050fe:	4b12      	ldr	r3, [pc, #72]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	490e      	ldr	r1, [pc, #56]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005112:	f000 f821 	bl	8005158 <HAL_RCC_GetSysClockFreq>
 8005116:	4602      	mov	r2, r0
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	490a      	ldr	r1, [pc, #40]	@ (800514c <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	5ccb      	ldrb	r3, [r1, r3]
 8005126:	fa22 f303 	lsr.w	r3, r2, r3
 800512a:	4a09      	ldr	r2, [pc, #36]	@ (8005150 <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800512e:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fd74 	bl	8003c20 <HAL_InitTick>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023c00 	.word	0x40023c00
 8005148:	40023800 	.word	0x40023800
 800514c:	08009a88 	.word	0x08009a88
 8005150:	20000004 	.word	0x20000004
 8005154:	20000008 	.word	0x20000008

08005158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b094      	sub	sp, #80	@ 0x50
 800515e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005170:	4b79      	ldr	r3, [pc, #484]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	2b08      	cmp	r3, #8
 800517a:	d00d      	beq.n	8005198 <HAL_RCC_GetSysClockFreq+0x40>
 800517c:	2b08      	cmp	r3, #8
 800517e:	f200 80e1 	bhi.w	8005344 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005182:	2b00      	cmp	r3, #0
 8005184:	d002      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x34>
 8005186:	2b04      	cmp	r3, #4
 8005188:	d003      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x3a>
 800518a:	e0db      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800518c:	4b73      	ldr	r3, [pc, #460]	@ (800535c <HAL_RCC_GetSysClockFreq+0x204>)
 800518e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005190:	e0db      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005192:	4b73      	ldr	r3, [pc, #460]	@ (8005360 <HAL_RCC_GetSysClockFreq+0x208>)
 8005194:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005196:	e0d8      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005198:	4b6f      	ldr	r3, [pc, #444]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d063      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	2200      	movs	r2, #0
 80051b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051c2:	2300      	movs	r3, #0
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051ca:	4622      	mov	r2, r4
 80051cc:	462b      	mov	r3, r5
 80051ce:	f04f 0000 	mov.w	r0, #0
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	0159      	lsls	r1, r3, #5
 80051d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051dc:	0150      	lsls	r0, r2, #5
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4621      	mov	r1, r4
 80051e4:	1a51      	subs	r1, r2, r1
 80051e6:	6139      	str	r1, [r7, #16]
 80051e8:	4629      	mov	r1, r5
 80051ea:	eb63 0301 	sbc.w	r3, r3, r1
 80051ee:	617b      	str	r3, [r7, #20]
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051fc:	4659      	mov	r1, fp
 80051fe:	018b      	lsls	r3, r1, #6
 8005200:	4651      	mov	r1, sl
 8005202:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005206:	4651      	mov	r1, sl
 8005208:	018a      	lsls	r2, r1, #6
 800520a:	4651      	mov	r1, sl
 800520c:	ebb2 0801 	subs.w	r8, r2, r1
 8005210:	4659      	mov	r1, fp
 8005212:	eb63 0901 	sbc.w	r9, r3, r1
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800522a:	4690      	mov	r8, r2
 800522c:	4699      	mov	r9, r3
 800522e:	4623      	mov	r3, r4
 8005230:	eb18 0303 	adds.w	r3, r8, r3
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	462b      	mov	r3, r5
 8005238:	eb49 0303 	adc.w	r3, r9, r3
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800524a:	4629      	mov	r1, r5
 800524c:	024b      	lsls	r3, r1, #9
 800524e:	4621      	mov	r1, r4
 8005250:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005254:	4621      	mov	r1, r4
 8005256:	024a      	lsls	r2, r1, #9
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525e:	2200      	movs	r2, #0
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005262:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005264:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005268:	f7fb fbcc 	bl	8000a04 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005274:	e058      	b.n	8005328 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005276:	4b38      	ldr	r3, [pc, #224]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	099b      	lsrs	r3, r3, #6
 800527c:	2200      	movs	r2, #0
 800527e:	4618      	mov	r0, r3
 8005280:	4611      	mov	r1, r2
 8005282:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	2300      	movs	r3, #0
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
 800528c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005290:	4642      	mov	r2, r8
 8005292:	464b      	mov	r3, r9
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	f04f 0100 	mov.w	r1, #0
 800529c:	0159      	lsls	r1, r3, #5
 800529e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a2:	0150      	lsls	r0, r2, #5
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4641      	mov	r1, r8
 80052aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80052ae:	4649      	mov	r1, r9
 80052b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052c8:	ebb2 040a 	subs.w	r4, r2, sl
 80052cc:	eb63 050b 	sbc.w	r5, r3, fp
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	00eb      	lsls	r3, r5, #3
 80052da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052de:	00e2      	lsls	r2, r4, #3
 80052e0:	4614      	mov	r4, r2
 80052e2:	461d      	mov	r5, r3
 80052e4:	4643      	mov	r3, r8
 80052e6:	18e3      	adds	r3, r4, r3
 80052e8:	603b      	str	r3, [r7, #0]
 80052ea:	464b      	mov	r3, r9
 80052ec:	eb45 0303 	adc.w	r3, r5, r3
 80052f0:	607b      	str	r3, [r7, #4]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052fe:	4629      	mov	r1, r5
 8005300:	028b      	lsls	r3, r1, #10
 8005302:	4621      	mov	r1, r4
 8005304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005308:	4621      	mov	r1, r4
 800530a:	028a      	lsls	r2, r1, #10
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005312:	2200      	movs	r2, #0
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	61fa      	str	r2, [r7, #28]
 8005318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800531c:	f7fb fb72 	bl	8000a04 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <HAL_RCC_GetSysClockFreq+0x200>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005338:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800533a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005342:	e002      	b.n	800534a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005344:	4b05      	ldr	r3, [pc, #20]	@ (800535c <HAL_RCC_GetSysClockFreq+0x204>)
 8005346:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800534a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800534c:	4618      	mov	r0, r3
 800534e:	3750      	adds	r7, #80	@ 0x50
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005356:	bf00      	nop
 8005358:	40023800 	.word	0x40023800
 800535c:	00f42400 	.word	0x00f42400
 8005360:	007a1200 	.word	0x007a1200

08005364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005368:	4b03      	ldr	r3, [pc, #12]	@ (8005378 <HAL_RCC_GetHCLKFreq+0x14>)
 800536a:	681b      	ldr	r3, [r3, #0]
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000004 	.word	0x20000004

0800537c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005380:	f7ff fff0 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	@ (800539c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0a9b      	lsrs	r3, r3, #10
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	@ (80053a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	08009a98 	.word	0x08009a98

080053a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053a8:	f7ff ffdc 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0b5b      	lsrs	r3, r3, #13
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	@ (80053c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	08009a98 	.word	0x08009a98

080053cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e07b      	b.n	80054d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d108      	bne.n	80053f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ee:	d009      	beq.n	8005404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	61da      	str	r2, [r3, #28]
 80053f6:	e005      	b.n	8005404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd fe50 	bl	80030c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005488:	ea42 0103 	orr.w	r1, r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	0c1b      	lsrs	r3, r3, #16
 80054a2:	f003 0104 	and.w	r1, r3, #4
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	f003 0210 	and.w	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b088      	sub	sp, #32
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4613      	mov	r3, r2
 80054ec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ee:	f7fe fbdb 	bl	8003ca8 <HAL_GetTick>
 80054f2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d001      	beq.n	8005508 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
 8005506:	e12a      	b.n	800575e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_SPI_Transmit+0x36>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e122      	b.n	800575e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <HAL_SPI_Transmit+0x48>
 8005522:	2302      	movs	r3, #2
 8005524:	e11b      	b.n	800575e <HAL_SPI_Transmit+0x280>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2203      	movs	r2, #3
 8005532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	88fa      	ldrh	r2, [r7, #6]
 800554c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005574:	d10f      	bne.n	8005596 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005584:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005594:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a0:	2b40      	cmp	r3, #64	@ 0x40
 80055a2:	d007      	beq.n	80055b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055bc:	d152      	bne.n	8005664 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d002      	beq.n	80055cc <HAL_SPI_Transmit+0xee>
 80055c6:	8b7b      	ldrh	r3, [r7, #26]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d145      	bne.n	8005658 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d0:	881a      	ldrh	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	1c9a      	adds	r2, r3, #2
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055f0:	e032      	b.n	8005658 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d112      	bne.n	8005626 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005604:	881a      	ldrh	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005610:	1c9a      	adds	r2, r3, #2
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005624:	e018      	b.n	8005658 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005626:	f7fe fb3f 	bl	8003ca8 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d803      	bhi.n	800563e <HAL_SPI_Transmit+0x160>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d102      	bne.n	8005644 <HAL_SPI_Transmit+0x166>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d109      	bne.n	8005658 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e082      	b.n	800575e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1c7      	bne.n	80055f2 <HAL_SPI_Transmit+0x114>
 8005662:	e053      	b.n	800570c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <HAL_SPI_Transmit+0x194>
 800566c:	8b7b      	ldrh	r3, [r7, #26]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d147      	bne.n	8005702 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	330c      	adds	r3, #12
 800567c:	7812      	ldrb	r2, [r2, #0]
 800567e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005698:	e033      	b.n	8005702 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d113      	bne.n	80056d0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056ce:	e018      	b.n	8005702 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d0:	f7fe faea 	bl	8003ca8 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d803      	bhi.n	80056e8 <HAL_SPI_Transmit+0x20a>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e6:	d102      	bne.n	80056ee <HAL_SPI_Transmit+0x210>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e02d      	b.n	800575e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1c6      	bne.n	800569a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	6839      	ldr	r1, [r7, #0]
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 fdcf 	bl	80062b4 <SPI_EndRxTxTransaction>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10a      	bne.n	8005740 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800575c:	2300      	movs	r3, #0
  }
}
 800575e:	4618      	mov	r0, r3
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b08a      	sub	sp, #40	@ 0x28
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005774:	2301      	movs	r3, #1
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005778:	f7fe fa96 	bl	8003ca8 <HAL_GetTick>
 800577c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005784:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005790:	7ffb      	ldrb	r3, [r7, #31]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d00c      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x4a>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800579c:	d106      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x46>
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d001      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
 80057ae:	e17f      	b.n	8005ab0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_SPI_TransmitReceive+0x5c>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_SPI_TransmitReceive+0x5c>
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e174      	b.n	8005ab0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_SPI_TransmitReceive+0x6e>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e16d      	b.n	8005ab0 <HAL_SPI_TransmitReceive+0x34a>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d003      	beq.n	80057f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2205      	movs	r2, #5
 80057ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	887a      	ldrh	r2, [r7, #2]
 8005800:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	887a      	ldrh	r2, [r7, #2]
 8005806:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	887a      	ldrh	r2, [r7, #2]
 8005812:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	887a      	ldrh	r2, [r7, #2]
 8005818:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005830:	2b40      	cmp	r3, #64	@ 0x40
 8005832:	d007      	beq.n	8005844 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800584c:	d17e      	bne.n	800594c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_TransmitReceive+0xf6>
 8005856:	8afb      	ldrh	r3, [r7, #22]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d16c      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005860:	881a      	ldrh	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586c:	1c9a      	adds	r2, r3, #2
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005880:	e059      	b.n	8005936 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b02      	cmp	r3, #2
 800588e:	d11b      	bne.n	80058c8 <HAL_SPI_TransmitReceive+0x162>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d016      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x162>
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	2b01      	cmp	r3, #1
 800589e:	d113      	bne.n	80058c8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	881a      	ldrh	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	1c9a      	adds	r2, r3, #2
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d119      	bne.n	800590a <HAL_SPI_TransmitReceive+0x1a4>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d014      	beq.n	800590a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ea:	b292      	uxth	r2, r2
 80058ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	1c9a      	adds	r2, r3, #2
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005906:	2301      	movs	r3, #1
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800590a:	f7fe f9cd 	bl	8003ca8 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005916:	429a      	cmp	r2, r3
 8005918:	d80d      	bhi.n	8005936 <HAL_SPI_TransmitReceive+0x1d0>
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005920:	d009      	beq.n	8005936 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e0bc      	b.n	8005ab0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1a0      	bne.n	8005882 <HAL_SPI_TransmitReceive+0x11c>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d19b      	bne.n	8005882 <HAL_SPI_TransmitReceive+0x11c>
 800594a:	e082      	b.n	8005a52 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_SPI_TransmitReceive+0x1f4>
 8005954:	8afb      	ldrh	r3, [r7, #22]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d171      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005980:	e05d      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b02      	cmp	r3, #2
 800598e:	d11c      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x264>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d017      	beq.n	80059ca <HAL_SPI_TransmitReceive+0x264>
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	2b01      	cmp	r3, #1
 800599e:	d114      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	7812      	ldrb	r2, [r2, #0]
 80059ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d119      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x2a6>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d014      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a0c:	f7fe f94c 	bl	8003ca8 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d803      	bhi.n	8005a24 <HAL_SPI_TransmitReceive+0x2be>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d102      	bne.n	8005a2a <HAL_SPI_TransmitReceive+0x2c4>
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e038      	b.n	8005ab0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d19c      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x21c>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d197      	bne.n	8005982 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fc2c 	bl	80062b4 <SPI_EndRxTxTransaction>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e01d      	b.n	8005ab0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005aae:	2300      	movs	r3, #0
  }
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3728      	adds	r7, #40	@ 0x28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005acc:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d00c      	beq.n	8005af4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ae0:	d106      	bne.n	8005af0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_SPI_TransmitReceive_DMA+0x38>
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d001      	beq.n	8005af4 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005af0:	2302      	movs	r3, #2
 8005af2:	e0cf      	b.n	8005c94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005b00:	887b      	ldrh	r3, [r7, #2]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e0c4      	b.n	8005c94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e0bd      	b.n	8005c94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d003      	beq.n	8005b34 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2205      	movs	r2, #5
 8005b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	887a      	ldrh	r2, [r7, #2]
 8005b44:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	887a      	ldrh	r2, [r7, #2]
 8005b4a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	887a      	ldrh	r2, [r7, #2]
 8005b56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	887a      	ldrh	r2, [r7, #2]
 8005b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d108      	bne.n	8005b88 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b7a:	4a48      	ldr	r2, [pc, #288]	@ (8005c9c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005b7c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b82:	4a47      	ldr	r2, [pc, #284]	@ (8005ca0 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005b84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b86:	e007      	b.n	8005b98 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8c:	4a45      	ldr	r2, [pc, #276]	@ (8005ca4 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b94:	4a44      	ldr	r2, [pc, #272]	@ (8005ca8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b9c:	4a43      	ldr	r2, [pc, #268]	@ (8005cac <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005b9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bbe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005bc0:	f7fe fa62 	bl	8004088 <HAL_DMA_Start_IT>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bce:	f043 0210 	orr.w	r2, r3, #16
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e058      	b.n	8005c94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bfe:	2200      	movs	r2, #0
 8005c00:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c06:	2200      	movs	r2, #0
 8005c08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c0e:	2200      	movs	r2, #0
 8005c10:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c28:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c2a:	f7fe fa2d 	bl	8004088 <HAL_DMA_Start_IT>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c38:	f043 0210 	orr.w	r2, r3, #16
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e023      	b.n	8005c94 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c56:	2b40      	cmp	r3, #64	@ 0x40
 8005c58:	d007      	beq.n	8005c6a <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c68:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0220 	orr.w	r2, r2, #32
 8005c80:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0202 	orr.w	r2, r2, #2
 8005c90:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	08006039 	.word	0x08006039
 8005ca0:	08005f01 	.word	0x08005f01
 8005ca4:	08006055 	.word	0x08006055
 8005ca8:	08005fa9 	.word	0x08005fa9
 8005cac:	08006071 	.word	0x08006071

08005cb0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10f      	bne.n	8005cf4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	099b      	lsrs	r3, r3, #6
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d004      	beq.n	8005cf4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
    return;
 8005cf2:	e0d7      	b.n	8005ea4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <HAL_SPI_IRQHandler+0x66>
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	09db      	lsrs	r3, r3, #7
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d004      	beq.n	8005d16 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
    return;
 8005d14:	e0c6      	b.n	8005ea4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	095b      	lsrs	r3, r3, #5
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10c      	bne.n	8005d3c <HAL_SPI_IRQHandler+0x8c>
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	099b      	lsrs	r3, r3, #6
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d106      	bne.n	8005d3c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80b4 	beq.w	8005ea4 <HAL_SPI_IRQHandler+0x1f4>
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80ad 	beq.w	8005ea4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	099b      	lsrs	r3, r3, #6
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d023      	beq.n	8005d9e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d011      	beq.n	8005d86 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	f043 0204 	orr.w	r2, r3, #4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	e00b      	b.n	8005d9e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d86:	2300      	movs	r3, #0
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	693b      	ldr	r3, [r7, #16]
        return;
 8005d9c:	e082      	b.n	8005ea4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	095b      	lsrs	r3, r3, #5
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d014      	beq.n	8005dd4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	f043 0201 	orr.w	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de4:	f043 0208 	orr.w	r2, r3, #8
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005dec:	2300      	movs	r3, #0
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	60bb      	str	r3, [r7, #8]
 8005df8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d04f      	beq.n	8005ea2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e10:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <HAL_SPI_IRQHandler+0x17e>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d034      	beq.n	8005e98 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0203 	bic.w	r2, r2, #3
 8005e3c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d011      	beq.n	8005e6a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4a:	4a18      	ldr	r2, [pc, #96]	@ (8005eac <HAL_SPI_IRQHandler+0x1fc>)
 8005e4c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe f9e0 	bl	8004218 <HAL_DMA_Abort_IT>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d016      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e76:	4a0d      	ldr	r2, [pc, #52]	@ (8005eac <HAL_SPI_IRQHandler+0x1fc>)
 8005e78:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe f9ca 	bl	8004218 <HAL_DMA_Abort_IT>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005e96:	e003      	b.n	8005ea0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f827 	bl	8005eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005e9e:	e000      	b.n	8005ea2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005ea0:	bf00      	nop
    return;
 8005ea2:	bf00      	nop
  }
}
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	080060b1 	.word	0x080060b1

08005eb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f0e:	f7fd fecb 	bl	8003ca8 <HAL_GetTick>
 8005f12:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f22:	d03b      	beq.n	8005f9c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0220 	bic.w	r2, r2, #32
 8005f32:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10d      	bne.n	8005f58 <SPI_DMAReceiveCplt+0x58>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f44:	d108      	bne.n	8005f58 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0203 	bic.w	r2, r2, #3
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	e007      	b.n	8005f68 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	2164      	movs	r1, #100	@ 0x64
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f93b 	bl	80061e8 <SPI_EndRxTransaction>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff ffa9 	bl	8005eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f9a:	e002      	b.n	8005fa2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff ff87 	bl	8005eb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fb6:	f7fd fe77 	bl	8003ca8 <HAL_GetTick>
 8005fba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fca:	d02f      	beq.n	800602c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0220 	bic.w	r2, r2, #32
 8005fda:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	2164      	movs	r1, #100	@ 0x64
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f967 	bl	80062b4 <SPI_EndRxTxTransaction>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff0:	f043 0220 	orr.w	r2, r3, #32
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0203 	bic.w	r2, r2, #3
 8006006:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7ff ff61 	bl	8005eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800602a:	e002      	b.n	8006032 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7fb fc01 	bl	8001834 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006044:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f7ff ff3c 	bl	8005ec4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f7ff ff38 	bl	8005ed8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0203 	bic.w	r2, r2, #3
 800608c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006092:	f043 0210 	orr.w	r2, r3, #16
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7ff ff22 	bl	8005eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff ff0e 	bl	8005eec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060e8:	f7fd fdde 	bl	8003ca8 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	4413      	add	r3, r2
 80060f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060f8:	f7fd fdd6 	bl	8003ca8 <HAL_GetTick>
 80060fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060fe:	4b39      	ldr	r3, [pc, #228]	@ (80061e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	015b      	lsls	r3, r3, #5
 8006104:	0d1b      	lsrs	r3, r3, #20
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	fb02 f303 	mul.w	r3, r2, r3
 800610c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610e:	e055      	b.n	80061bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d051      	beq.n	80061bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006118:	f7fd fdc6 	bl	8003ca8 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	429a      	cmp	r2, r3
 8006126:	d902      	bls.n	800612e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d13d      	bne.n	80061aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800613c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006146:	d111      	bne.n	800616c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006150:	d004      	beq.n	800615c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800615a:	d107      	bne.n	800616c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800616a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006174:	d10f      	bne.n	8006196 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006194:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e018      	b.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e002      	b.n	80061bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4013      	ands	r3, r2
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d19a      	bne.n	8006110 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	20000004 	.word	0x20000004

080061e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061fc:	d111      	bne.n	8006222 <SPI_EndRxTransaction+0x3a>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006206:	d004      	beq.n	8006212 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006210:	d107      	bne.n	8006222 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006220:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800622a:	d12a      	bne.n	8006282 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006234:	d012      	beq.n	800625c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	2180      	movs	r1, #128	@ 0x80
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff ff49 	bl	80060d8 <SPI_WaitFlagStateUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d02d      	beq.n	80062a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e026      	b.n	80062aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	2101      	movs	r1, #1
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f7ff ff36 	bl	80060d8 <SPI_WaitFlagStateUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01a      	beq.n	80062a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006276:	f043 0220 	orr.w	r2, r3, #32
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e013      	b.n	80062aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2200      	movs	r2, #0
 800628a:	2101      	movs	r1, #1
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff ff23 	bl	80060d8 <SPI_WaitFlagStateUntilTimeout>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d007      	beq.n	80062a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e000      	b.n	80062aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b088      	sub	sp, #32
 80062b8:	af02      	add	r7, sp, #8
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2201      	movs	r2, #1
 80062c8:	2102      	movs	r1, #2
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff ff04 	bl	80060d8 <SPI_WaitFlagStateUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062da:	f043 0220 	orr.w	r2, r3, #32
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e032      	b.n	800634c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006354 <SPI_EndRxTxTransaction+0xa0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006358 <SPI_EndRxTxTransaction+0xa4>)
 80062ec:	fba2 2303 	umull	r2, r3, r2, r3
 80062f0:	0d5b      	lsrs	r3, r3, #21
 80062f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
 80062fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006304:	d112      	bne.n	800632c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2200      	movs	r2, #0
 800630e:	2180      	movs	r1, #128	@ 0x80
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7ff fee1 	bl	80060d8 <SPI_WaitFlagStateUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d016      	beq.n	800634a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e00f      	b.n	800634c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	3b01      	subs	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006342:	2b80      	cmp	r3, #128	@ 0x80
 8006344:	d0f2      	beq.n	800632c <SPI_EndRxTxTransaction+0x78>
 8006346:	e000      	b.n	800634a <SPI_EndRxTxTransaction+0x96>
        break;
 8006348:	bf00      	nop
  }

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000004 	.word	0x20000004
 8006358:	165e9f81 	.word	0x165e9f81

0800635c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e041      	b.n	80063f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fd f98a 	bl	800369c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3304      	adds	r3, #4
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f000 fe3c 	bl	8007018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d001      	beq.n	8006414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e04e      	b.n	80064b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a23      	ldr	r2, [pc, #140]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x80>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643e:	d01d      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x80>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1f      	ldr	r2, [pc, #124]	@ (80064c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x80>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1e      	ldr	r2, [pc, #120]	@ (80064c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x80>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1c      	ldr	r2, [pc, #112]	@ (80064cc <HAL_TIM_Base_Start_IT+0xd0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00e      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x80>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a1b      	ldr	r2, [pc, #108]	@ (80064d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x80>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a19      	ldr	r2, [pc, #100]	@ (80064d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x80>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a18      	ldr	r2, [pc, #96]	@ (80064d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d111      	bne.n	80064a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b06      	cmp	r3, #6
 800648c:	d010      	beq.n	80064b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800649e:	e007      	b.n	80064b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40000400 	.word	0x40000400
 80064c8:	40000800 	.word	0x40000800
 80064cc:	40000c00 	.word	0x40000c00
 80064d0:	40010400 	.word	0x40010400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40001800 	.word	0x40001800

080064dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e041      	b.n	8006572 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f839 	bl	800657a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f000 fd7c 	bl	8007018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
	...

08006590 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_TIM_PWM_Start_DMA+0x2c>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	bf0c      	ite	eq
 80065b4:	2301      	moveq	r3, #1
 80065b6:	2300      	movne	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	e022      	b.n	8006602 <HAL_TIM_PWM_Start_DMA+0x72>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d109      	bne.n	80065d6 <HAL_TIM_PWM_Start_DMA+0x46>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	bf0c      	ite	eq
 80065ce:	2301      	moveq	r3, #1
 80065d0:	2300      	movne	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	e015      	b.n	8006602 <HAL_TIM_PWM_Start_DMA+0x72>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d109      	bne.n	80065f0 <HAL_TIM_PWM_Start_DMA+0x60>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	e008      	b.n	8006602 <HAL_TIM_PWM_Start_DMA+0x72>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
 8006608:	e171      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_TIM_PWM_Start_DMA+0x94>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	bf0c      	ite	eq
 800661c:	2301      	moveq	r3, #1
 800661e:	2300      	movne	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	e022      	b.n	800666a <HAL_TIM_PWM_Start_DMA+0xda>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b04      	cmp	r3, #4
 8006628:	d109      	bne.n	800663e <HAL_TIM_PWM_Start_DMA+0xae>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b01      	cmp	r3, #1
 8006634:	bf0c      	ite	eq
 8006636:	2301      	moveq	r3, #1
 8006638:	2300      	movne	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	e015      	b.n	800666a <HAL_TIM_PWM_Start_DMA+0xda>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b08      	cmp	r3, #8
 8006642:	d109      	bne.n	8006658 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b01      	cmp	r3, #1
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	e008      	b.n	800666a <HAL_TIM_PWM_Start_DMA+0xda>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d024      	beq.n	80066b8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <HAL_TIM_PWM_Start_DMA+0xea>
 8006674:	887b      	ldrh	r3, [r7, #2]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e137      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <HAL_TIM_PWM_Start_DMA+0xfe>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800668c:	e016      	b.n	80066bc <HAL_TIM_PWM_Start_DMA+0x12c>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b04      	cmp	r3, #4
 8006692:	d104      	bne.n	800669e <HAL_TIM_PWM_Start_DMA+0x10e>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800669c:	e00e      	b.n	80066bc <HAL_TIM_PWM_Start_DMA+0x12c>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d104      	bne.n	80066ae <HAL_TIM_PWM_Start_DMA+0x11e>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066ac:	e006      	b.n	80066bc <HAL_TIM_PWM_Start_DMA+0x12c>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2202      	movs	r2, #2
 80066b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066b6:	e001      	b.n	80066bc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e118      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b0c      	cmp	r3, #12
 80066c0:	f200 80ae 	bhi.w	8006820 <HAL_TIM_PWM_Start_DMA+0x290>
 80066c4:	a201      	add	r2, pc, #4	@ (adr r2, 80066cc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	08006701 	.word	0x08006701
 80066d0:	08006821 	.word	0x08006821
 80066d4:	08006821 	.word	0x08006821
 80066d8:	08006821 	.word	0x08006821
 80066dc:	08006749 	.word	0x08006749
 80066e0:	08006821 	.word	0x08006821
 80066e4:	08006821 	.word	0x08006821
 80066e8:	08006821 	.word	0x08006821
 80066ec:	08006791 	.word	0x08006791
 80066f0:	08006821 	.word	0x08006821
 80066f4:	08006821 	.word	0x08006821
 80066f8:	08006821 	.word	0x08006821
 80066fc:	080067d9 	.word	0x080067d9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	4a7c      	ldr	r2, [pc, #496]	@ (80068f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006706:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670c:	4a7b      	ldr	r2, [pc, #492]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800670e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006714:	4a7a      	ldr	r2, [pc, #488]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x370>)
 8006716:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3334      	adds	r3, #52	@ 0x34
 8006724:	461a      	mov	r2, r3
 8006726:	887b      	ldrh	r3, [r7, #2]
 8006728:	f7fd fcae 	bl	8004088 <HAL_DMA_Start_IT>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e0db      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006744:	60da      	str	r2, [r3, #12]
      break;
 8006746:	e06e      	b.n	8006826 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674c:	4a6a      	ldr	r2, [pc, #424]	@ (80068f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800674e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006754:	4a69      	ldr	r2, [pc, #420]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8006756:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	4a68      	ldr	r2, [pc, #416]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x370>)
 800675e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006764:	6879      	ldr	r1, [r7, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3338      	adds	r3, #56	@ 0x38
 800676c:	461a      	mov	r2, r3
 800676e:	887b      	ldrh	r3, [r7, #2]
 8006770:	f7fd fc8a 	bl	8004088 <HAL_DMA_Start_IT>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e0b7      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800678c:	60da      	str	r2, [r3, #12]
      break;
 800678e:	e04a      	b.n	8006826 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006794:	4a58      	ldr	r2, [pc, #352]	@ (80068f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006796:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679c:	4a57      	ldr	r2, [pc, #348]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800679e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	4a56      	ldr	r2, [pc, #344]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x370>)
 80067a6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	333c      	adds	r3, #60	@ 0x3c
 80067b4:	461a      	mov	r2, r3
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	f7fd fc66 	bl	8004088 <HAL_DMA_Start_IT>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e093      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067d4:	60da      	str	r2, [r3, #12]
      break;
 80067d6:	e026      	b.n	8006826 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	4a46      	ldr	r2, [pc, #280]	@ (80068f8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80067de:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e4:	4a45      	ldr	r2, [pc, #276]	@ (80068fc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80067e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ec:	4a44      	ldr	r2, [pc, #272]	@ (8006900 <HAL_TIM_PWM_Start_DMA+0x370>)
 80067ee:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3340      	adds	r3, #64	@ 0x40
 80067fc:	461a      	mov	r2, r3
 80067fe:	887b      	ldrh	r3, [r7, #2]
 8006800:	f7fd fc42 	bl	8004088 <HAL_DMA_Start_IT>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e06f      	b.n	80068ee <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800681c:	60da      	str	r2, [r3, #12]
      break;
 800681e:	e002      	b.n	8006826 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
      break;
 8006824:	bf00      	nop
  }

  if (status == HAL_OK)
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d15f      	bne.n	80068ec <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2201      	movs	r2, #1
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fedf 	bl	80075f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a31      	ldr	r2, [pc, #196]	@ (8006904 <HAL_TIM_PWM_Start_DMA+0x374>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <HAL_TIM_PWM_Start_DMA+0x2be>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a2f      	ldr	r2, [pc, #188]	@ (8006908 <HAL_TIM_PWM_Start_DMA+0x378>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d101      	bne.n	8006852 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006866:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a25      	ldr	r2, [pc, #148]	@ (8006904 <HAL_TIM_PWM_Start_DMA+0x374>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d022      	beq.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800687a:	d01d      	beq.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x328>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a22      	ldr	r2, [pc, #136]	@ (800690c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d018      	beq.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a21      	ldr	r2, [pc, #132]	@ (8006910 <HAL_TIM_PWM_Start_DMA+0x380>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x328>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1f      	ldr	r2, [pc, #124]	@ (8006914 <HAL_TIM_PWM_Start_DMA+0x384>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00e      	beq.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x328>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1a      	ldr	r2, [pc, #104]	@ (8006908 <HAL_TIM_PWM_Start_DMA+0x378>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d009      	beq.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x328>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <HAL_TIM_PWM_Start_DMA+0x388>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d004      	beq.n	80068b8 <HAL_TIM_PWM_Start_DMA+0x328>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <HAL_TIM_PWM_Start_DMA+0x38c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d111      	bne.n	80068dc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b06      	cmp	r3, #6
 80068c8:	d010      	beq.n	80068ec <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068da:	e007      	b.n	80068ec <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	08006f09 	.word	0x08006f09
 80068fc:	08006fb1 	.word	0x08006fb1
 8006900:	08006e77 	.word	0x08006e77
 8006904:	40010000 	.word	0x40010000
 8006908:	40010400 	.word	0x40010400
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40000c00 	.word	0x40000c00
 8006918:	40014000 	.word	0x40014000
 800691c:	40001800 	.word	0x40001800

08006920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d020      	beq.n	8006984 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01b      	beq.n	8006984 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0202 	mvn.w	r2, #2
 8006954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa5b 	bl	8006e26 <HAL_TIM_IC_CaptureCallback>
 8006970:	e005      	b.n	800697e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fa4d 	bl	8006e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fa5e 	bl	8006e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0304 	and.w	r3, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	d020      	beq.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01b      	beq.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0204 	mvn.w	r2, #4
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa35 	bl	8006e26 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fa27 	bl	8006e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fa38 	bl	8006e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d020      	beq.n	8006a1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01b      	beq.n	8006a1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0208 	mvn.w	r2, #8
 80069ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2204      	movs	r2, #4
 80069f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 0303 	and.w	r3, r3, #3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fa0f 	bl	8006e26 <HAL_TIM_IC_CaptureCallback>
 8006a08:	e005      	b.n	8006a16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa01 	bl	8006e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 fa12 	bl	8006e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d020      	beq.n	8006a68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f06f 0210 	mvn.w	r2, #16
 8006a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f9e9 	bl	8006e26 <HAL_TIM_IC_CaptureCallback>
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9db 	bl	8006e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f9ec 	bl	8006e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00c      	beq.n	8006a8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f06f 0201 	mvn.w	r2, #1
 8006a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fa feb8 	bl	80017fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00c      	beq.n	8006ab0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fe50 	bl	8007750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00c      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9bd 	bl	8006e4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0220 	mvn.w	r2, #32
 8006af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fe22 	bl	800773c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006af8:	bf00      	nop
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e0ae      	b.n	8006c7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b0c      	cmp	r3, #12
 8006b2a:	f200 809f 	bhi.w	8006c6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b69 	.word	0x08006b69
 8006b38:	08006c6d 	.word	0x08006c6d
 8006b3c:	08006c6d 	.word	0x08006c6d
 8006b40:	08006c6d 	.word	0x08006c6d
 8006b44:	08006ba9 	.word	0x08006ba9
 8006b48:	08006c6d 	.word	0x08006c6d
 8006b4c:	08006c6d 	.word	0x08006c6d
 8006b50:	08006c6d 	.word	0x08006c6d
 8006b54:	08006beb 	.word	0x08006beb
 8006b58:	08006c6d 	.word	0x08006c6d
 8006b5c:	08006c6d 	.word	0x08006c6d
 8006b60:	08006c6d 	.word	0x08006c6d
 8006b64:	08006c2b 	.word	0x08006c2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68b9      	ldr	r1, [r7, #8]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f000 faf8 	bl	8007164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0208 	orr.w	r2, r2, #8
 8006b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0204 	bic.w	r2, r2, #4
 8006b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6999      	ldr	r1, [r3, #24]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	619a      	str	r2, [r3, #24]
      break;
 8006ba6:	e064      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fb48 	bl	8007244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699a      	ldr	r2, [r3, #24]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6999      	ldr	r1, [r3, #24]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	021a      	lsls	r2, r3, #8
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	619a      	str	r2, [r3, #24]
      break;
 8006be8:	e043      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fb9d 	bl	8007330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69da      	ldr	r2, [r3, #28]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0208 	orr.w	r2, r2, #8
 8006c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0204 	bic.w	r2, r2, #4
 8006c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69d9      	ldr	r1, [r3, #28]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	61da      	str	r2, [r3, #28]
      break;
 8006c28:	e023      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 fbf1 	bl	8007418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69d9      	ldr	r1, [r3, #28]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	021a      	lsls	r2, r3, #8
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	61da      	str	r2, [r3, #28]
      break;
 8006c6a:	e002      	b.n	8006c72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e0b4      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x186>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cd8:	d03e      	beq.n	8006d58 <HAL_TIM_ConfigClockSource+0xd4>
 8006cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cde:	f200 8087 	bhi.w	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ce2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce6:	f000 8086 	beq.w	8006df6 <HAL_TIM_ConfigClockSource+0x172>
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cee:	d87f      	bhi.n	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf0:	2b70      	cmp	r3, #112	@ 0x70
 8006cf2:	d01a      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0xa6>
 8006cf4:	2b70      	cmp	r3, #112	@ 0x70
 8006cf6:	d87b      	bhi.n	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006cf8:	2b60      	cmp	r3, #96	@ 0x60
 8006cfa:	d050      	beq.n	8006d9e <HAL_TIM_ConfigClockSource+0x11a>
 8006cfc:	2b60      	cmp	r3, #96	@ 0x60
 8006cfe:	d877      	bhi.n	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006d00:	2b50      	cmp	r3, #80	@ 0x50
 8006d02:	d03c      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0xfa>
 8006d04:	2b50      	cmp	r3, #80	@ 0x50
 8006d06:	d873      	bhi.n	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	d058      	beq.n	8006dbe <HAL_TIM_ConfigClockSource+0x13a>
 8006d0c:	2b40      	cmp	r3, #64	@ 0x40
 8006d0e:	d86f      	bhi.n	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006d10:	2b30      	cmp	r3, #48	@ 0x30
 8006d12:	d064      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x15a>
 8006d14:	2b30      	cmp	r3, #48	@ 0x30
 8006d16:	d86b      	bhi.n	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d060      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x15a>
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d867      	bhi.n	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d05c      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x15a>
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d05a      	beq.n	8006dde <HAL_TIM_ConfigClockSource+0x15a>
 8006d28:	e062      	b.n	8006df0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d3a:	f000 fc3d 	bl	80075b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	609a      	str	r2, [r3, #8]
      break;
 8006d56:	e04f      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d68:	f000 fc26 	bl	80075b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d7a:	609a      	str	r2, [r3, #8]
      break;
 8006d7c:	e03c      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f000 fb9a 	bl	80074c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2150      	movs	r1, #80	@ 0x50
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fbf3 	bl	8007582 <TIM_ITRx_SetConfig>
      break;
 8006d9c:	e02c      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006daa:	461a      	mov	r2, r3
 8006dac:	f000 fbb9 	bl	8007522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2160      	movs	r1, #96	@ 0x60
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fbe3 	bl	8007582 <TIM_ITRx_SetConfig>
      break;
 8006dbc:	e01c      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f000 fb7a 	bl	80074c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2140      	movs	r1, #64	@ 0x40
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f000 fbd3 	bl	8007582 <TIM_ITRx_SetConfig>
      break;
 8006ddc:	e00c      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f000 fbca 	bl	8007582 <TIM_ITRx_SetConfig>
      break;
 8006dee:	e003      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	73fb      	strb	r3, [r7, #15]
      break;
 8006df4:	e000      	b.n	8006df8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d107      	bne.n	8006e9e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e9c:	e02a      	b.n	8006ef4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d107      	bne.n	8006eb8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006eb6:	e01d      	b.n	8006ef4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d107      	bne.n	8006ed2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ed0:	e010      	b.n	8006ef4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d107      	bne.n	8006eec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2208      	movs	r2, #8
 8006ee0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006eea:	e003      	b.n	8006ef4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ffb4 	bl	8006e62 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d10b      	bne.n	8006f38 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d136      	bne.n	8006f9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f36:	e031      	b.n	8006f9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d10b      	bne.n	8006f5a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2202      	movs	r2, #2
 8006f46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d125      	bne.n	8006f9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f58:	e020      	b.n	8006f9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d10b      	bne.n	8006f7c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2204      	movs	r2, #4
 8006f68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d114      	bne.n	8006f9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f7a:	e00f      	b.n	8006f9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d10a      	bne.n	8006f9c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7ff ff4c 	bl	8006e3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
}
 8006fa8:	bf00      	nop
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d103      	bne.n	8006fd0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	771a      	strb	r2, [r3, #28]
 8006fce:	e019      	b.n	8007004 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d103      	bne.n	8006fe2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	771a      	strb	r2, [r3, #28]
 8006fe0:	e010      	b.n	8007004 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d103      	bne.n	8006ff4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2204      	movs	r2, #4
 8006ff0:	771a      	strb	r2, [r3, #28]
 8006ff2:	e007      	b.n	8007004 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d102      	bne.n	8007004 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2208      	movs	r2, #8
 8007002:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7fa fc35 	bl	8001874 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	771a      	strb	r2, [r3, #28]
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a43      	ldr	r2, [pc, #268]	@ (8007138 <TIM_Base_SetConfig+0x120>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d013      	beq.n	8007058 <TIM_Base_SetConfig+0x40>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007036:	d00f      	beq.n	8007058 <TIM_Base_SetConfig+0x40>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a40      	ldr	r2, [pc, #256]	@ (800713c <TIM_Base_SetConfig+0x124>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d00b      	beq.n	8007058 <TIM_Base_SetConfig+0x40>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a3f      	ldr	r2, [pc, #252]	@ (8007140 <TIM_Base_SetConfig+0x128>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d007      	beq.n	8007058 <TIM_Base_SetConfig+0x40>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a3e      	ldr	r2, [pc, #248]	@ (8007144 <TIM_Base_SetConfig+0x12c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a3d      	ldr	r2, [pc, #244]	@ (8007148 <TIM_Base_SetConfig+0x130>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d108      	bne.n	800706a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a32      	ldr	r2, [pc, #200]	@ (8007138 <TIM_Base_SetConfig+0x120>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d02b      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007078:	d027      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a2f      	ldr	r2, [pc, #188]	@ (800713c <TIM_Base_SetConfig+0x124>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d023      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a2e      	ldr	r2, [pc, #184]	@ (8007140 <TIM_Base_SetConfig+0x128>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01f      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2d      	ldr	r2, [pc, #180]	@ (8007144 <TIM_Base_SetConfig+0x12c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01b      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a2c      	ldr	r2, [pc, #176]	@ (8007148 <TIM_Base_SetConfig+0x130>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d017      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2b      	ldr	r2, [pc, #172]	@ (800714c <TIM_Base_SetConfig+0x134>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d013      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007150 <TIM_Base_SetConfig+0x138>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00f      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a29      	ldr	r2, [pc, #164]	@ (8007154 <TIM_Base_SetConfig+0x13c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00b      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a28      	ldr	r2, [pc, #160]	@ (8007158 <TIM_Base_SetConfig+0x140>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d007      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a27      	ldr	r2, [pc, #156]	@ (800715c <TIM_Base_SetConfig+0x144>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d003      	beq.n	80070ca <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a26      	ldr	r2, [pc, #152]	@ (8007160 <TIM_Base_SetConfig+0x148>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d108      	bne.n	80070dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007138 <TIM_Base_SetConfig+0x120>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d003      	beq.n	800710a <TIM_Base_SetConfig+0xf2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a10      	ldr	r2, [pc, #64]	@ (8007148 <TIM_Base_SetConfig+0x130>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d103      	bne.n	8007112 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691a      	ldr	r2, [r3, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f043 0204 	orr.w	r2, r3, #4
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]
}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40010000 	.word	0x40010000
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800
 8007144:	40000c00 	.word	0x40000c00
 8007148:	40010400 	.word	0x40010400
 800714c:	40014000 	.word	0x40014000
 8007150:	40014400 	.word	0x40014400
 8007154:	40014800 	.word	0x40014800
 8007158:	40001800 	.word	0x40001800
 800715c:	40001c00 	.word	0x40001c00
 8007160:	40002000 	.word	0x40002000

08007164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	f023 0201 	bic.w	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f023 0302 	bic.w	r3, r3, #2
 80071ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a20      	ldr	r2, [pc, #128]	@ (800723c <TIM_OC1_SetConfig+0xd8>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_OC1_SetConfig+0x64>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007240 <TIM_OC1_SetConfig+0xdc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d10c      	bne.n	80071e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0308 	bic.w	r3, r3, #8
 80071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 0304 	bic.w	r3, r3, #4
 80071e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a15      	ldr	r2, [pc, #84]	@ (800723c <TIM_OC1_SetConfig+0xd8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_OC1_SetConfig+0x8e>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a14      	ldr	r2, [pc, #80]	@ (8007240 <TIM_OC1_SetConfig+0xdc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d111      	bne.n	8007216 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40010000 	.word	0x40010000
 8007240:	40010400 	.word	0x40010400

08007244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	f023 0210 	bic.w	r2, r3, #16
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800727a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f023 0320 	bic.w	r3, r3, #32
 800728e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a22      	ldr	r2, [pc, #136]	@ (8007328 <TIM_OC2_SetConfig+0xe4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC2_SetConfig+0x68>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a21      	ldr	r2, [pc, #132]	@ (800732c <TIM_OC2_SetConfig+0xe8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d10d      	bne.n	80072c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a17      	ldr	r2, [pc, #92]	@ (8007328 <TIM_OC2_SetConfig+0xe4>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_OC2_SetConfig+0x94>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a16      	ldr	r2, [pc, #88]	@ (800732c <TIM_OC2_SetConfig+0xe8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d113      	bne.n	8007300 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40010000 	.word	0x40010000
 800732c:	40010400 	.word	0x40010400

08007330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800735e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a21      	ldr	r2, [pc, #132]	@ (8007410 <TIM_OC3_SetConfig+0xe0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d003      	beq.n	8007396 <TIM_OC3_SetConfig+0x66>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a20      	ldr	r2, [pc, #128]	@ (8007414 <TIM_OC3_SetConfig+0xe4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d10d      	bne.n	80073b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800739c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a16      	ldr	r2, [pc, #88]	@ (8007410 <TIM_OC3_SetConfig+0xe0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d003      	beq.n	80073c2 <TIM_OC3_SetConfig+0x92>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a15      	ldr	r2, [pc, #84]	@ (8007414 <TIM_OC3_SetConfig+0xe4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d113      	bne.n	80073ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	011b      	lsls	r3, r3, #4
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	621a      	str	r2, [r3, #32]
}
 8007404:	bf00      	nop
 8007406:	371c      	adds	r7, #28
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400

08007418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800744e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	021b      	lsls	r3, r3, #8
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	031b      	lsls	r3, r3, #12
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a12      	ldr	r2, [pc, #72]	@ (80074bc <TIM_OC4_SetConfig+0xa4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d003      	beq.n	8007480 <TIM_OC4_SetConfig+0x68>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a11      	ldr	r2, [pc, #68]	@ (80074c0 <TIM_OC4_SetConfig+0xa8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d109      	bne.n	8007494 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	019b      	lsls	r3, r3, #6
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	4313      	orrs	r3, r2
 8007492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	621a      	str	r2, [r3, #32]
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	40010000 	.word	0x40010000
 80074c0:	40010400 	.word	0x40010400

080074c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f023 0201 	bic.w	r2, r3, #1
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 030a 	bic.w	r3, r3, #10
 8007500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	4313      	orrs	r3, r2
 8007508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	621a      	str	r2, [r3, #32]
}
 8007516:	bf00      	nop
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007522:	b480      	push	{r7}
 8007524:	b087      	sub	sp, #28
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a1b      	ldr	r3, [r3, #32]
 8007538:	f023 0210 	bic.w	r2, r3, #16
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800754c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	031b      	lsls	r3, r3, #12
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800755e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	621a      	str	r2, [r3, #32]
}
 8007576:	bf00      	nop
 8007578:	371c      	adds	r7, #28
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007582:	b480      	push	{r7}
 8007584:	b085      	sub	sp, #20
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	f043 0307 	orr.w	r3, r3, #7
 80075a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	609a      	str	r2, [r3, #8]
}
 80075ac:	bf00      	nop
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	431a      	orrs	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	4313      	orrs	r3, r2
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	609a      	str	r2, [r3, #8]
}
 80075ec:	bf00      	nop
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 031f 	and.w	r3, r3, #31
 800760a:	2201      	movs	r2, #1
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a1a      	ldr	r2, [r3, #32]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	43db      	mvns	r3, r3
 800761a:	401a      	ands	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a1a      	ldr	r2, [r3, #32]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	fa01 f303 	lsl.w	r3, r1, r3
 8007630:	431a      	orrs	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007644:	b480      	push	{r7}
 8007646:	b085      	sub	sp, #20
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007658:	2302      	movs	r3, #2
 800765a:	e05a      	b.n	8007712 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2202      	movs	r2, #2
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a21      	ldr	r2, [pc, #132]	@ (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d022      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a8:	d01d      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d018      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d013      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1a      	ldr	r2, [pc, #104]	@ (800772c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00e      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a18      	ldr	r2, [pc, #96]	@ (8007730 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d009      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a17      	ldr	r2, [pc, #92]	@ (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d004      	beq.n	80076e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a15      	ldr	r2, [pc, #84]	@ (8007738 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d10c      	bne.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40010000 	.word	0x40010000
 8007724:	40000400 	.word	0x40000400
 8007728:	40000800 	.word	0x40000800
 800772c:	40000c00 	.word	0x40000c00
 8007730:	40010400 	.word	0x40010400
 8007734:	40014000 	.word	0x40014000
 8007738:	40001800 	.word	0x40001800

0800773c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d101      	bne.n	8007776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e042      	b.n	80077fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fc f978 	bl	8003a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2224      	movs	r2, #36	@ 0x24
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fe95 	bl	80084d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	695a      	ldr	r2, [r3, #20]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68da      	ldr	r2, [r3, #12]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b20      	cmp	r3, #32
 800781c:	d112      	bne.n	8007844 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_UART_Receive_DMA+0x26>
 8007824:	88fb      	ldrh	r3, [r7, #6]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e00b      	b.n	8007846 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	461a      	mov	r2, r3
 8007838:	68b9      	ldr	r1, [r7, #8]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 fbe4 	bl	8008008 <UART_Start_Receive_DMA>
 8007840:	4603      	mov	r3, r0
 8007842:	e000      	b.n	8007846 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007844:	2302      	movs	r3, #2
  }
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b0ba      	sub	sp, #232	@ 0xe8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007876:	2300      	movs	r3, #0
 8007878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800787c:	2300      	movs	r3, #0
 800787e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007886:	f003 030f 	and.w	r3, r3, #15
 800788a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800788e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <HAL_UART_IRQHandler+0x66>
 80078a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a6:	f003 0320 	and.w	r3, r3, #32
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fd54 	bl	800835c <UART_Receive_IT>
      return;
 80078b4:	e273      	b.n	8007d9e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80de 	beq.w	8007a7c <HAL_UART_IRQHandler+0x22c>
 80078c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 80d1 	beq.w	8007a7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <HAL_UART_IRQHandler+0xae>
 80078e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d005      	beq.n	80078fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f6:	f043 0201 	orr.w	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00b      	beq.n	8007922 <HAL_UART_IRQHandler+0xd2>
 800790a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800791a:	f043 0202 	orr.w	r2, r3, #2
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00b      	beq.n	8007946 <HAL_UART_IRQHandler+0xf6>
 800792e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d005      	beq.n	8007946 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793e:	f043 0204 	orr.w	r2, r3, #4
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d011      	beq.n	8007976 <HAL_UART_IRQHandler+0x126>
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800795e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800796e:	f043 0208 	orr.w	r2, r3, #8
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 820a 	beq.w	8007d94 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_UART_IRQHandler+0x14e>
 800798c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fcdf 	bl	800835c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079a8:	2b40      	cmp	r3, #64	@ 0x40
 80079aa:	bf0c      	ite	eq
 80079ac:	2301      	moveq	r3, #1
 80079ae:	2300      	movne	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d103      	bne.n	80079ca <HAL_UART_IRQHandler+0x17a>
 80079c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d04f      	beq.n	8007a6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fbea 	bl	80081a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079da:	2b40      	cmp	r3, #64	@ 0x40
 80079dc:	d141      	bne.n	8007a62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3314      	adds	r3, #20
 80079e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3314      	adds	r3, #20
 8007a06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1d9      	bne.n	80079de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d013      	beq.n	8007a5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a36:	4a8a      	ldr	r2, [pc, #552]	@ (8007c60 <HAL_UART_IRQHandler+0x410>)
 8007a38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fc fbea 	bl	8004218 <HAL_DMA_Abort_IT>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d016      	beq.n	8007a78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	e00e      	b.n	8007a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f9c0 	bl	8007de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	e00a      	b.n	8007a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f9bc 	bl	8007de0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a68:	e006      	b.n	8007a78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f9b8 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007a76:	e18d      	b.n	8007d94 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a78:	bf00      	nop
    return;
 8007a7a:	e18b      	b.n	8007d94 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	f040 8167 	bne.w	8007d54 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8a:	f003 0310 	and.w	r3, r3, #16
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 8160 	beq.w	8007d54 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8159 	beq.w	8007d54 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60bb      	str	r3, [r7, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	60bb      	str	r3, [r7, #8]
 8007ab6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac2:	2b40      	cmp	r3, #64	@ 0x40
 8007ac4:	f040 80ce 	bne.w	8007c64 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ad4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 80a9 	beq.w	8007c30 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	f080 80a2 	bcs.w	8007c30 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007af2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007afe:	f000 8088 	beq.w	8007c12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	330c      	adds	r3, #12
 8007b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	330c      	adds	r3, #12
 8007b2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b3e:	e841 2300 	strex	r3, r2, [r1]
 8007b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1d9      	bne.n	8007b02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3314      	adds	r3, #20
 8007b54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b60:	f023 0301 	bic.w	r3, r3, #1
 8007b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3314      	adds	r3, #20
 8007b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e1      	bne.n	8007b4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3314      	adds	r3, #20
 8007b90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e3      	bne.n	8007b8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	330c      	adds	r3, #12
 8007bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007be2:	f023 0310 	bic.w	r3, r3, #16
 8007be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	330c      	adds	r3, #12
 8007bf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007bf4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bf6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e3      	bne.n	8007bd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fc fa93 	bl	8004138 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2202      	movs	r2, #2
 8007c16:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f8e3 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007c2e:	e0b3      	b.n	8007d98 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	f040 80ad 	bne.w	8007d98 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c48:	f040 80a6 	bne.w	8007d98 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f8cb 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
      return;
 8007c5e:	e09b      	b.n	8007d98 <HAL_UART_IRQHandler+0x548>
 8007c60:	0800826b 	.word	0x0800826b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 808e 	beq.w	8007d9c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 8089 	beq.w	8007d9c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	330c      	adds	r3, #12
 8007c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007cae:	647a      	str	r2, [r7, #68]	@ 0x44
 8007cb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e3      	bne.n	8007c8a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3314      	adds	r3, #20
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3314      	adds	r3, #20
 8007ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007ce6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e3      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0310 	bic.w	r3, r3, #16
 8007d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	330c      	adds	r3, #12
 8007d28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007d2c:	61fa      	str	r2, [r7, #28]
 8007d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	69b9      	ldr	r1, [r7, #24]
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	617b      	str	r3, [r7, #20]
   return(result);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e3      	bne.n	8007d08 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f851 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d52:	e023      	b.n	8007d9c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <HAL_UART_IRQHandler+0x524>
 8007d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fa8d 	bl	800828c <UART_Transmit_IT>
    return;
 8007d72:	e014      	b.n	8007d9e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <HAL_UART_IRQHandler+0x54e>
 8007d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 facd 	bl	800832c <UART_EndTransmit_IT>
    return;
 8007d92:	e004      	b.n	8007d9e <HAL_UART_IRQHandler+0x54e>
    return;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <HAL_UART_IRQHandler+0x54e>
      return;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <HAL_UART_IRQHandler+0x54e>
      return;
 8007d9c:	bf00      	nop
  }
}
 8007d9e:	37e8      	adds	r7, #232	@ 0xe8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b09c      	sub	sp, #112	@ 0x70
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e18:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d172      	bne.n	8007f0e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007e28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	330c      	adds	r3, #12
 8007e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	330c      	adds	r3, #12
 8007e4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007e4e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e50:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e5      	bne.n	8007e2e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3314      	adds	r3, #20
 8007e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6c:	e853 3f00 	ldrex	r3, [r3]
 8007e70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3314      	adds	r3, #20
 8007e80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007e82:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e5      	bne.n	8007e62 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3314      	adds	r3, #20
 8007e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8007eae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3314      	adds	r3, #20
 8007eb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007eb6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e5      	bne.n	8007e96 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d119      	bne.n	8007f0e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	330c      	adds	r3, #12
 8007ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f023 0310 	bic.w	r3, r3, #16
 8007ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	330c      	adds	r3, #12
 8007ef8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007efa:	61fa      	str	r2, [r7, #28]
 8007efc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	69b9      	ldr	r1, [r7, #24]
 8007f00:	69fa      	ldr	r2, [r7, #28]
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	617b      	str	r3, [r7, #20]
   return(result);
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e5      	bne.n	8007eda <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f10:	2200      	movs	r2, #0
 8007f12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d106      	bne.n	8007f2a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f20:	4619      	mov	r1, r3
 8007f22:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f24:	f7ff ff66 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f28:	e002      	b.n	8007f30 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007f2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f2c:	f7ff ff44 	bl	8007db8 <HAL_UART_RxCpltCallback>
}
 8007f30:	bf00      	nop
 8007f32:	3770      	adds	r7, #112	@ 0x70
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d108      	bne.n	8007f66 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7ff ff48 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f64:	e002      	b.n	8007f6c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7ff ff30 	bl	8007dcc <HAL_UART_RxHalfCpltCallback>
}
 8007f6c:	bf00      	nop
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f84:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f90:	2b80      	cmp	r3, #128	@ 0x80
 8007f92:	bf0c      	ite	eq
 8007f94:	2301      	moveq	r3, #1
 8007f96:	2300      	movne	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b21      	cmp	r3, #33	@ 0x21
 8007fa6:	d108      	bne.n	8007fba <UART_DMAError+0x46>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d005      	beq.n	8007fba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007fb4:	68b8      	ldr	r0, [r7, #8]
 8007fb6:	f000 f8cd 	bl	8008154 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc4:	2b40      	cmp	r3, #64	@ 0x40
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2301      	moveq	r3, #1
 8007fca:	2300      	movne	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b22      	cmp	r3, #34	@ 0x22
 8007fda:	d108      	bne.n	8007fee <UART_DMAError+0x7a>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007fe8:	68b8      	ldr	r0, [r7, #8]
 8007fea:	f000 f8db 	bl	80081a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff2:	f043 0210 	orr.w	r2, r3, #16
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ffa:	68b8      	ldr	r0, [r7, #8]
 8007ffc:	f7ff fef0 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b098      	sub	sp, #96	@ 0x60
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	4613      	mov	r3, r2
 8008014:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	88fa      	ldrh	r2, [r7, #6]
 8008020:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2222      	movs	r2, #34	@ 0x22
 800802c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008034:	4a44      	ldr	r2, [pc, #272]	@ (8008148 <UART_Start_Receive_DMA+0x140>)
 8008036:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803c:	4a43      	ldr	r2, [pc, #268]	@ (800814c <UART_Start_Receive_DMA+0x144>)
 800803e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008044:	4a42      	ldr	r2, [pc, #264]	@ (8008150 <UART_Start_Receive_DMA+0x148>)
 8008046:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800804c:	2200      	movs	r2, #0
 800804e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008050:	f107 0308 	add.w	r3, r7, #8
 8008054:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	f7fc f80e 	bl	8004088 <HAL_DMA_Start_IT>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d008      	beq.n	8008084 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2210      	movs	r2, #16
 8008076:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2220      	movs	r2, #32
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e05d      	b.n	8008140 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008084:	2300      	movs	r3, #0
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d019      	beq.n	80080d6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	330c      	adds	r3, #12
 80080a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80080b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	330c      	adds	r3, #12
 80080c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080c2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80080c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80080c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80080d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e5      	bne.n	80080a2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3314      	adds	r3, #20
 80080dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e0:	e853 3f00 	ldrex	r3, [r3]
 80080e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3314      	adds	r3, #20
 80080f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080f6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80080f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80080fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e5      	bne.n	80080d6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3314      	adds	r3, #20
 8008110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	617b      	str	r3, [r7, #20]
   return(result);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008120:	653b      	str	r3, [r7, #80]	@ 0x50
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3314      	adds	r3, #20
 8008128:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800812a:	627a      	str	r2, [r7, #36]	@ 0x24
 800812c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812e:	6a39      	ldr	r1, [r7, #32]
 8008130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	61fb      	str	r3, [r7, #28]
   return(result);
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e5      	bne.n	800810a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3760      	adds	r7, #96	@ 0x60
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	08007e0d 	.word	0x08007e0d
 800814c:	08007f39 	.word	0x08007f39
 8008150:	08007f75 	.word	0x08007f75

08008154 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b089      	sub	sp, #36	@ 0x24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	330c      	adds	r3, #12
 8008162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	60bb      	str	r3, [r7, #8]
   return(result);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008172:	61fb      	str	r3, [r7, #28]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	330c      	adds	r3, #12
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	61ba      	str	r2, [r7, #24]
 800817e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	6979      	ldr	r1, [r7, #20]
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	613b      	str	r3, [r7, #16]
   return(result);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e5      	bne.n	800815c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008198:	bf00      	nop
 800819a:	3724      	adds	r7, #36	@ 0x24
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b095      	sub	sp, #84	@ 0x54
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	330c      	adds	r3, #12
 80081b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	330c      	adds	r3, #12
 80081ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80081ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e5      	bne.n	80081ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3314      	adds	r3, #20
 80081e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	f023 0301 	bic.w	r3, r3, #1
 80081f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3314      	adds	r3, #20
 80081fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e5      	bne.n	80081e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008218:	2b01      	cmp	r3, #1
 800821a:	d119      	bne.n	8008250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	60bb      	str	r3, [r7, #8]
   return(result);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f023 0310 	bic.w	r3, r3, #16
 8008232:	647b      	str	r3, [r7, #68]	@ 0x44
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	330c      	adds	r3, #12
 800823a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800823c:	61ba      	str	r2, [r7, #24]
 800823e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6979      	ldr	r1, [r7, #20]
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	613b      	str	r3, [r7, #16]
   return(result);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e5      	bne.n	800821c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800825e:	bf00      	nop
 8008260:	3754      	adds	r7, #84	@ 0x54
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f7ff fdae 	bl	8007de0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b21      	cmp	r3, #33	@ 0x21
 800829e:	d13e      	bne.n	800831e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a8:	d114      	bne.n	80082d4 <UART_Transmit_IT+0x48>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d110      	bne.n	80082d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	1c9a      	adds	r2, r3, #2
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	621a      	str	r2, [r3, #32]
 80082d2:	e008      	b.n	80082e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	1c59      	adds	r1, r3, #1
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6211      	str	r1, [r2, #32]
 80082de:	781a      	ldrb	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	3b01      	subs	r3, #1
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4619      	mov	r1, r3
 80082f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10f      	bne.n	800831a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008308:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008318:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	e000      	b.n	8008320 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800831e:	2302      	movs	r3, #2
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008342:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7ff fd29 	bl	8007da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08c      	sub	sp, #48	@ 0x30
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008364:	2300      	movs	r3, #0
 8008366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008368:	2300      	movs	r3, #0
 800836a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b22      	cmp	r3, #34	@ 0x22
 8008376:	f040 80aa 	bne.w	80084ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008382:	d115      	bne.n	80083b0 <UART_Receive_IT+0x54>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d111      	bne.n	80083b0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008390:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839e:	b29a      	uxth	r2, r3
 80083a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a8:	1c9a      	adds	r2, r3, #2
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80083ae:	e024      	b.n	80083fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083be:	d007      	beq.n	80083d0 <UART_Receive_IT+0x74>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <UART_Receive_IT+0x82>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083da:	701a      	strb	r2, [r3, #0]
 80083dc:	e008      	b.n	80083f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f4:	1c5a      	adds	r2, r3, #1
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3b01      	subs	r3, #1
 8008402:	b29b      	uxth	r3, r3
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	4619      	mov	r1, r3
 8008408:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800840a:	2b00      	cmp	r3, #0
 800840c:	d15d      	bne.n	80084ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f022 0220 	bic.w	r2, r2, #32
 800841c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800842c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	695a      	ldr	r2, [r3, #20]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0201 	bic.w	r2, r2, #1
 800843c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008450:	2b01      	cmp	r3, #1
 8008452:	d135      	bne.n	80084c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	613b      	str	r3, [r7, #16]
   return(result);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f023 0310 	bic.w	r3, r3, #16
 8008470:	627b      	str	r3, [r7, #36]	@ 0x24
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	330c      	adds	r3, #12
 8008478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800847a:	623a      	str	r2, [r7, #32]
 800847c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	69f9      	ldr	r1, [r7, #28]
 8008480:	6a3a      	ldr	r2, [r7, #32]
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	61bb      	str	r3, [r7, #24]
   return(result);
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e5      	bne.n	800845a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b10      	cmp	r3, #16
 800849a:	d10a      	bne.n	80084b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800849c:	2300      	movs	r3, #0
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fc9b 	bl	8007df4 <HAL_UARTEx_RxEventCallback>
 80084be:	e002      	b.n	80084c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff fc79 	bl	8007db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e002      	b.n	80084d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e000      	b.n	80084d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084ce:	2302      	movs	r3, #2
  }
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3730      	adds	r7, #48	@ 0x30
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084dc:	b0c0      	sub	sp, #256	@ 0x100
 80084de:	af00      	add	r7, sp, #0
 80084e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80084f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f4:	68d9      	ldr	r1, [r3, #12]
 80084f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	ea40 0301 	orr.w	r3, r0, r1
 8008500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	431a      	orrs	r2, r3
 8008510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	431a      	orrs	r2, r3
 8008518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	4313      	orrs	r3, r2
 8008520:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008530:	f021 010c 	bic.w	r1, r1, #12
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800853e:	430b      	orrs	r3, r1
 8008540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008552:	6999      	ldr	r1, [r3, #24]
 8008554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	ea40 0301 	orr.w	r3, r0, r1
 800855e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4b8f      	ldr	r3, [pc, #572]	@ (80087a4 <UART_SetConfig+0x2cc>)
 8008568:	429a      	cmp	r2, r3
 800856a:	d005      	beq.n	8008578 <UART_SetConfig+0xa0>
 800856c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	4b8d      	ldr	r3, [pc, #564]	@ (80087a8 <UART_SetConfig+0x2d0>)
 8008574:	429a      	cmp	r2, r3
 8008576:	d104      	bne.n	8008582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008578:	f7fc ff14 	bl	80053a4 <HAL_RCC_GetPCLK2Freq>
 800857c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008580:	e003      	b.n	800858a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008582:	f7fc fefb 	bl	800537c <HAL_RCC_GetPCLK1Freq>
 8008586:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800858a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008594:	f040 810c 	bne.w	80087b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800859c:	2200      	movs	r2, #0
 800859e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80085a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80085aa:	4622      	mov	r2, r4
 80085ac:	462b      	mov	r3, r5
 80085ae:	1891      	adds	r1, r2, r2
 80085b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80085b2:	415b      	adcs	r3, r3
 80085b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80085ba:	4621      	mov	r1, r4
 80085bc:	eb12 0801 	adds.w	r8, r2, r1
 80085c0:	4629      	mov	r1, r5
 80085c2:	eb43 0901 	adc.w	r9, r3, r1
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085da:	4690      	mov	r8, r2
 80085dc:	4699      	mov	r9, r3
 80085de:	4623      	mov	r3, r4
 80085e0:	eb18 0303 	adds.w	r3, r8, r3
 80085e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085e8:	462b      	mov	r3, r5
 80085ea:	eb49 0303 	adc.w	r3, r9, r3
 80085ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008606:	460b      	mov	r3, r1
 8008608:	18db      	adds	r3, r3, r3
 800860a:	653b      	str	r3, [r7, #80]	@ 0x50
 800860c:	4613      	mov	r3, r2
 800860e:	eb42 0303 	adc.w	r3, r2, r3
 8008612:	657b      	str	r3, [r7, #84]	@ 0x54
 8008614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800861c:	f7f8 f9f2 	bl	8000a04 <__aeabi_uldivmod>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4b61      	ldr	r3, [pc, #388]	@ (80087ac <UART_SetConfig+0x2d4>)
 8008626:	fba3 2302 	umull	r2, r3, r3, r2
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	011c      	lsls	r4, r3, #4
 800862e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008632:	2200      	movs	r2, #0
 8008634:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008638:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800863c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008640:	4642      	mov	r2, r8
 8008642:	464b      	mov	r3, r9
 8008644:	1891      	adds	r1, r2, r2
 8008646:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008648:	415b      	adcs	r3, r3
 800864a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800864c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008650:	4641      	mov	r1, r8
 8008652:	eb12 0a01 	adds.w	sl, r2, r1
 8008656:	4649      	mov	r1, r9
 8008658:	eb43 0b01 	adc.w	fp, r3, r1
 800865c:	f04f 0200 	mov.w	r2, #0
 8008660:	f04f 0300 	mov.w	r3, #0
 8008664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800866c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008670:	4692      	mov	sl, r2
 8008672:	469b      	mov	fp, r3
 8008674:	4643      	mov	r3, r8
 8008676:	eb1a 0303 	adds.w	r3, sl, r3
 800867a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800867e:	464b      	mov	r3, r9
 8008680:	eb4b 0303 	adc.w	r3, fp, r3
 8008684:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008694:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800869c:	460b      	mov	r3, r1
 800869e:	18db      	adds	r3, r3, r3
 80086a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80086a2:	4613      	mov	r3, r2
 80086a4:	eb42 0303 	adc.w	r3, r2, r3
 80086a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80086b2:	f7f8 f9a7 	bl	8000a04 <__aeabi_uldivmod>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4611      	mov	r1, r2
 80086bc:	4b3b      	ldr	r3, [pc, #236]	@ (80087ac <UART_SetConfig+0x2d4>)
 80086be:	fba3 2301 	umull	r2, r3, r3, r1
 80086c2:	095b      	lsrs	r3, r3, #5
 80086c4:	2264      	movs	r2, #100	@ 0x64
 80086c6:	fb02 f303 	mul.w	r3, r2, r3
 80086ca:	1acb      	subs	r3, r1, r3
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80086d2:	4b36      	ldr	r3, [pc, #216]	@ (80087ac <UART_SetConfig+0x2d4>)
 80086d4:	fba3 2302 	umull	r2, r3, r3, r2
 80086d8:	095b      	lsrs	r3, r3, #5
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80086e0:	441c      	add	r4, r3
 80086e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80086f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80086f4:	4642      	mov	r2, r8
 80086f6:	464b      	mov	r3, r9
 80086f8:	1891      	adds	r1, r2, r2
 80086fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80086fc:	415b      	adcs	r3, r3
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008704:	4641      	mov	r1, r8
 8008706:	1851      	adds	r1, r2, r1
 8008708:	6339      	str	r1, [r7, #48]	@ 0x30
 800870a:	4649      	mov	r1, r9
 800870c:	414b      	adcs	r3, r1
 800870e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	f04f 0300 	mov.w	r3, #0
 8008718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800871c:	4659      	mov	r1, fp
 800871e:	00cb      	lsls	r3, r1, #3
 8008720:	4651      	mov	r1, sl
 8008722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008726:	4651      	mov	r1, sl
 8008728:	00ca      	lsls	r2, r1, #3
 800872a:	4610      	mov	r0, r2
 800872c:	4619      	mov	r1, r3
 800872e:	4603      	mov	r3, r0
 8008730:	4642      	mov	r2, r8
 8008732:	189b      	adds	r3, r3, r2
 8008734:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008738:	464b      	mov	r3, r9
 800873a:	460a      	mov	r2, r1
 800873c:	eb42 0303 	adc.w	r3, r2, r3
 8008740:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008750:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008758:	460b      	mov	r3, r1
 800875a:	18db      	adds	r3, r3, r3
 800875c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800875e:	4613      	mov	r3, r2
 8008760:	eb42 0303 	adc.w	r3, r2, r3
 8008764:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800876a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800876e:	f7f8 f949 	bl	8000a04 <__aeabi_uldivmod>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4b0d      	ldr	r3, [pc, #52]	@ (80087ac <UART_SetConfig+0x2d4>)
 8008778:	fba3 1302 	umull	r1, r3, r3, r2
 800877c:	095b      	lsrs	r3, r3, #5
 800877e:	2164      	movs	r1, #100	@ 0x64
 8008780:	fb01 f303 	mul.w	r3, r1, r3
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	3332      	adds	r3, #50	@ 0x32
 800878a:	4a08      	ldr	r2, [pc, #32]	@ (80087ac <UART_SetConfig+0x2d4>)
 800878c:	fba2 2303 	umull	r2, r3, r2, r3
 8008790:	095b      	lsrs	r3, r3, #5
 8008792:	f003 0207 	and.w	r2, r3, #7
 8008796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4422      	add	r2, r4
 800879e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087a0:	e106      	b.n	80089b0 <UART_SetConfig+0x4d8>
 80087a2:	bf00      	nop
 80087a4:	40011000 	.word	0x40011000
 80087a8:	40011400 	.word	0x40011400
 80087ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80087ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80087be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80087c2:	4642      	mov	r2, r8
 80087c4:	464b      	mov	r3, r9
 80087c6:	1891      	adds	r1, r2, r2
 80087c8:	6239      	str	r1, [r7, #32]
 80087ca:	415b      	adcs	r3, r3
 80087cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087d2:	4641      	mov	r1, r8
 80087d4:	1854      	adds	r4, r2, r1
 80087d6:	4649      	mov	r1, r9
 80087d8:	eb43 0501 	adc.w	r5, r3, r1
 80087dc:	f04f 0200 	mov.w	r2, #0
 80087e0:	f04f 0300 	mov.w	r3, #0
 80087e4:	00eb      	lsls	r3, r5, #3
 80087e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087ea:	00e2      	lsls	r2, r4, #3
 80087ec:	4614      	mov	r4, r2
 80087ee:	461d      	mov	r5, r3
 80087f0:	4643      	mov	r3, r8
 80087f2:	18e3      	adds	r3, r4, r3
 80087f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087f8:	464b      	mov	r3, r9
 80087fa:	eb45 0303 	adc.w	r3, r5, r3
 80087fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800880e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800881e:	4629      	mov	r1, r5
 8008820:	008b      	lsls	r3, r1, #2
 8008822:	4621      	mov	r1, r4
 8008824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008828:	4621      	mov	r1, r4
 800882a:	008a      	lsls	r2, r1, #2
 800882c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008830:	f7f8 f8e8 	bl	8000a04 <__aeabi_uldivmod>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4b60      	ldr	r3, [pc, #384]	@ (80089bc <UART_SetConfig+0x4e4>)
 800883a:	fba3 2302 	umull	r2, r3, r3, r2
 800883e:	095b      	lsrs	r3, r3, #5
 8008840:	011c      	lsls	r4, r3, #4
 8008842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008846:	2200      	movs	r2, #0
 8008848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800884c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008854:	4642      	mov	r2, r8
 8008856:	464b      	mov	r3, r9
 8008858:	1891      	adds	r1, r2, r2
 800885a:	61b9      	str	r1, [r7, #24]
 800885c:	415b      	adcs	r3, r3
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008864:	4641      	mov	r1, r8
 8008866:	1851      	adds	r1, r2, r1
 8008868:	6139      	str	r1, [r7, #16]
 800886a:	4649      	mov	r1, r9
 800886c:	414b      	adcs	r3, r1
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	f04f 0200 	mov.w	r2, #0
 8008874:	f04f 0300 	mov.w	r3, #0
 8008878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800887c:	4659      	mov	r1, fp
 800887e:	00cb      	lsls	r3, r1, #3
 8008880:	4651      	mov	r1, sl
 8008882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008886:	4651      	mov	r1, sl
 8008888:	00ca      	lsls	r2, r1, #3
 800888a:	4610      	mov	r0, r2
 800888c:	4619      	mov	r1, r3
 800888e:	4603      	mov	r3, r0
 8008890:	4642      	mov	r2, r8
 8008892:	189b      	adds	r3, r3, r2
 8008894:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008898:	464b      	mov	r3, r9
 800889a:	460a      	mov	r2, r1
 800889c:	eb42 0303 	adc.w	r3, r2, r3
 80088a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80088b0:	f04f 0200 	mov.w	r2, #0
 80088b4:	f04f 0300 	mov.w	r3, #0
 80088b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80088bc:	4649      	mov	r1, r9
 80088be:	008b      	lsls	r3, r1, #2
 80088c0:	4641      	mov	r1, r8
 80088c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088c6:	4641      	mov	r1, r8
 80088c8:	008a      	lsls	r2, r1, #2
 80088ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80088ce:	f7f8 f899 	bl	8000a04 <__aeabi_uldivmod>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4611      	mov	r1, r2
 80088d8:	4b38      	ldr	r3, [pc, #224]	@ (80089bc <UART_SetConfig+0x4e4>)
 80088da:	fba3 2301 	umull	r2, r3, r3, r1
 80088de:	095b      	lsrs	r3, r3, #5
 80088e0:	2264      	movs	r2, #100	@ 0x64
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
 80088e6:	1acb      	subs	r3, r1, r3
 80088e8:	011b      	lsls	r3, r3, #4
 80088ea:	3332      	adds	r3, #50	@ 0x32
 80088ec:	4a33      	ldr	r2, [pc, #204]	@ (80089bc <UART_SetConfig+0x4e4>)
 80088ee:	fba2 2303 	umull	r2, r3, r2, r3
 80088f2:	095b      	lsrs	r3, r3, #5
 80088f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80088f8:	441c      	add	r4, r3
 80088fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088fe:	2200      	movs	r2, #0
 8008900:	673b      	str	r3, [r7, #112]	@ 0x70
 8008902:	677a      	str	r2, [r7, #116]	@ 0x74
 8008904:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008908:	4642      	mov	r2, r8
 800890a:	464b      	mov	r3, r9
 800890c:	1891      	adds	r1, r2, r2
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	415b      	adcs	r3, r3
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008918:	4641      	mov	r1, r8
 800891a:	1851      	adds	r1, r2, r1
 800891c:	6039      	str	r1, [r7, #0]
 800891e:	4649      	mov	r1, r9
 8008920:	414b      	adcs	r3, r1
 8008922:	607b      	str	r3, [r7, #4]
 8008924:	f04f 0200 	mov.w	r2, #0
 8008928:	f04f 0300 	mov.w	r3, #0
 800892c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008930:	4659      	mov	r1, fp
 8008932:	00cb      	lsls	r3, r1, #3
 8008934:	4651      	mov	r1, sl
 8008936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800893a:	4651      	mov	r1, sl
 800893c:	00ca      	lsls	r2, r1, #3
 800893e:	4610      	mov	r0, r2
 8008940:	4619      	mov	r1, r3
 8008942:	4603      	mov	r3, r0
 8008944:	4642      	mov	r2, r8
 8008946:	189b      	adds	r3, r3, r2
 8008948:	66bb      	str	r3, [r7, #104]	@ 0x68
 800894a:	464b      	mov	r3, r9
 800894c:	460a      	mov	r2, r1
 800894e:	eb42 0303 	adc.w	r3, r2, r3
 8008952:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	663b      	str	r3, [r7, #96]	@ 0x60
 800895e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	f04f 0300 	mov.w	r3, #0
 8008968:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800896c:	4649      	mov	r1, r9
 800896e:	008b      	lsls	r3, r1, #2
 8008970:	4641      	mov	r1, r8
 8008972:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008976:	4641      	mov	r1, r8
 8008978:	008a      	lsls	r2, r1, #2
 800897a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800897e:	f7f8 f841 	bl	8000a04 <__aeabi_uldivmod>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
 8008986:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <UART_SetConfig+0x4e4>)
 8008988:	fba3 1302 	umull	r1, r3, r3, r2
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	2164      	movs	r1, #100	@ 0x64
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	011b      	lsls	r3, r3, #4
 8008998:	3332      	adds	r3, #50	@ 0x32
 800899a:	4a08      	ldr	r2, [pc, #32]	@ (80089bc <UART_SetConfig+0x4e4>)
 800899c:	fba2 2303 	umull	r2, r3, r2, r3
 80089a0:	095b      	lsrs	r3, r3, #5
 80089a2:	f003 020f 	and.w	r2, r3, #15
 80089a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4422      	add	r2, r4
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	bf00      	nop
 80089b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80089b6:	46bd      	mov	sp, r7
 80089b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089bc:	51eb851f 	.word	0x51eb851f

080089c0 <memset>:
 80089c0:	4402      	add	r2, r0
 80089c2:	4603      	mov	r3, r0
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d100      	bne.n	80089ca <memset+0xa>
 80089c8:	4770      	bx	lr
 80089ca:	f803 1b01 	strb.w	r1, [r3], #1
 80089ce:	e7f9      	b.n	80089c4 <memset+0x4>

080089d0 <__errno>:
 80089d0:	4b01      	ldr	r3, [pc, #4]	@ (80089d8 <__errno+0x8>)
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000010 	.word	0x20000010

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4d0d      	ldr	r5, [pc, #52]	@ (8008a14 <__libc_init_array+0x38>)
 80089e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008a18 <__libc_init_array+0x3c>)
 80089e2:	1b64      	subs	r4, r4, r5
 80089e4:	10a4      	asrs	r4, r4, #2
 80089e6:	2600      	movs	r6, #0
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	4d0b      	ldr	r5, [pc, #44]	@ (8008a1c <__libc_init_array+0x40>)
 80089ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008a20 <__libc_init_array+0x44>)
 80089f0:	f001 f83e 	bl	8009a70 <_init>
 80089f4:	1b64      	subs	r4, r4, r5
 80089f6:	10a4      	asrs	r4, r4, #2
 80089f8:	2600      	movs	r6, #0
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	4798      	blx	r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	4798      	blx	r3
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	08009eb8 	.word	0x08009eb8
 8008a18:	08009eb8 	.word	0x08009eb8
 8008a1c:	08009eb8 	.word	0x08009eb8
 8008a20:	08009ebc 	.word	0x08009ebc

08008a24 <memcpy>:
 8008a24:	440a      	add	r2, r1
 8008a26:	4291      	cmp	r1, r2
 8008a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a2c:	d100      	bne.n	8008a30 <memcpy+0xc>
 8008a2e:	4770      	bx	lr
 8008a30:	b510      	push	{r4, lr}
 8008a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3a:	4291      	cmp	r1, r2
 8008a3c:	d1f9      	bne.n	8008a32 <memcpy+0xe>
 8008a3e:	bd10      	pop	{r4, pc}

08008a40 <atan2f>:
 8008a40:	f000 ba58 	b.w	8008ef4 <__ieee754_atan2f>

08008a44 <sqrtf>:
 8008a44:	b508      	push	{r3, lr}
 8008a46:	ed2d 8b02 	vpush	{d8}
 8008a4a:	eeb0 8a40 	vmov.f32	s16, s0
 8008a4e:	f000 f8cd 	bl	8008bec <__ieee754_sqrtf>
 8008a52:	eeb4 8a48 	vcmp.f32	s16, s16
 8008a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5a:	d60c      	bvs.n	8008a76 <sqrtf+0x32>
 8008a5c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008a7c <sqrtf+0x38>
 8008a60:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a68:	d505      	bpl.n	8008a76 <sqrtf+0x32>
 8008a6a:	f7ff ffb1 	bl	80089d0 <__errno>
 8008a6e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008a72:	2321      	movs	r3, #33	@ 0x21
 8008a74:	6003      	str	r3, [r0, #0]
 8008a76:	ecbd 8b02 	vpop	{d8}
 8008a7a:	bd08      	pop	{r3, pc}
 8008a7c:	00000000 	.word	0x00000000

08008a80 <cosf>:
 8008a80:	ee10 3a10 	vmov	r3, s0
 8008a84:	b507      	push	{r0, r1, r2, lr}
 8008a86:	4a1e      	ldr	r2, [pc, #120]	@ (8008b00 <cosf+0x80>)
 8008a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d806      	bhi.n	8008a9e <cosf+0x1e>
 8008a90:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008b04 <cosf+0x84>
 8008a94:	b003      	add	sp, #12
 8008a96:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a9a:	f000 b8ab 	b.w	8008bf4 <__kernel_cosf>
 8008a9e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008aa2:	d304      	bcc.n	8008aae <cosf+0x2e>
 8008aa4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008aa8:	b003      	add	sp, #12
 8008aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8008aae:	4668      	mov	r0, sp
 8008ab0:	f000 fac0 	bl	8009034 <__ieee754_rem_pio2f>
 8008ab4:	f000 0003 	and.w	r0, r0, #3
 8008ab8:	2801      	cmp	r0, #1
 8008aba:	d009      	beq.n	8008ad0 <cosf+0x50>
 8008abc:	2802      	cmp	r0, #2
 8008abe:	d010      	beq.n	8008ae2 <cosf+0x62>
 8008ac0:	b9b0      	cbnz	r0, 8008af0 <cosf+0x70>
 8008ac2:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ac6:	ed9d 0a00 	vldr	s0, [sp]
 8008aca:	f000 f893 	bl	8008bf4 <__kernel_cosf>
 8008ace:	e7eb      	b.n	8008aa8 <cosf+0x28>
 8008ad0:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ad4:	ed9d 0a00 	vldr	s0, [sp]
 8008ad8:	f000 f8e4 	bl	8008ca4 <__kernel_sinf>
 8008adc:	eeb1 0a40 	vneg.f32	s0, s0
 8008ae0:	e7e2      	b.n	8008aa8 <cosf+0x28>
 8008ae2:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ae6:	ed9d 0a00 	vldr	s0, [sp]
 8008aea:	f000 f883 	bl	8008bf4 <__kernel_cosf>
 8008aee:	e7f5      	b.n	8008adc <cosf+0x5c>
 8008af0:	eddd 0a01 	vldr	s1, [sp, #4]
 8008af4:	ed9d 0a00 	vldr	s0, [sp]
 8008af8:	2001      	movs	r0, #1
 8008afa:	f000 f8d3 	bl	8008ca4 <__kernel_sinf>
 8008afe:	e7d3      	b.n	8008aa8 <cosf+0x28>
 8008b00:	3f490fd8 	.word	0x3f490fd8
 8008b04:	00000000 	.word	0x00000000

08008b08 <sinf>:
 8008b08:	ee10 3a10 	vmov	r3, s0
 8008b0c:	b507      	push	{r0, r1, r2, lr}
 8008b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008b8c <sinf+0x84>)
 8008b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d807      	bhi.n	8008b28 <sinf+0x20>
 8008b18:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8008b90 <sinf+0x88>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	b003      	add	sp, #12
 8008b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b24:	f000 b8be 	b.w	8008ca4 <__kernel_sinf>
 8008b28:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008b2c:	d304      	bcc.n	8008b38 <sinf+0x30>
 8008b2e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008b32:	b003      	add	sp, #12
 8008b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b38:	4668      	mov	r0, sp
 8008b3a:	f000 fa7b 	bl	8009034 <__ieee754_rem_pio2f>
 8008b3e:	f000 0003 	and.w	r0, r0, #3
 8008b42:	2801      	cmp	r0, #1
 8008b44:	d00a      	beq.n	8008b5c <sinf+0x54>
 8008b46:	2802      	cmp	r0, #2
 8008b48:	d00f      	beq.n	8008b6a <sinf+0x62>
 8008b4a:	b9c0      	cbnz	r0, 8008b7e <sinf+0x76>
 8008b4c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008b50:	ed9d 0a00 	vldr	s0, [sp]
 8008b54:	2001      	movs	r0, #1
 8008b56:	f000 f8a5 	bl	8008ca4 <__kernel_sinf>
 8008b5a:	e7ea      	b.n	8008b32 <sinf+0x2a>
 8008b5c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008b60:	ed9d 0a00 	vldr	s0, [sp]
 8008b64:	f000 f846 	bl	8008bf4 <__kernel_cosf>
 8008b68:	e7e3      	b.n	8008b32 <sinf+0x2a>
 8008b6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8008b6e:	ed9d 0a00 	vldr	s0, [sp]
 8008b72:	2001      	movs	r0, #1
 8008b74:	f000 f896 	bl	8008ca4 <__kernel_sinf>
 8008b78:	eeb1 0a40 	vneg.f32	s0, s0
 8008b7c:	e7d9      	b.n	8008b32 <sinf+0x2a>
 8008b7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008b82:	ed9d 0a00 	vldr	s0, [sp]
 8008b86:	f000 f835 	bl	8008bf4 <__kernel_cosf>
 8008b8a:	e7f5      	b.n	8008b78 <sinf+0x70>
 8008b8c:	3f490fd8 	.word	0x3f490fd8
 8008b90:	00000000 	.word	0x00000000

08008b94 <tanf>:
 8008b94:	ee10 3a10 	vmov	r3, s0
 8008b98:	b507      	push	{r0, r1, r2, lr}
 8008b9a:	4a12      	ldr	r2, [pc, #72]	@ (8008be4 <tanf+0x50>)
 8008b9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d807      	bhi.n	8008bb4 <tanf+0x20>
 8008ba4:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8008be8 <tanf+0x54>
 8008ba8:	2001      	movs	r0, #1
 8008baa:	b003      	add	sp, #12
 8008bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb0:	f000 b8c0 	b.w	8008d34 <__kernel_tanf>
 8008bb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008bb8:	d304      	bcc.n	8008bc4 <tanf+0x30>
 8008bba:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008bbe:	b003      	add	sp, #12
 8008bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bc4:	4668      	mov	r0, sp
 8008bc6:	f000 fa35 	bl	8009034 <__ieee754_rem_pio2f>
 8008bca:	0040      	lsls	r0, r0, #1
 8008bcc:	f000 0002 	and.w	r0, r0, #2
 8008bd0:	eddd 0a01 	vldr	s1, [sp, #4]
 8008bd4:	ed9d 0a00 	vldr	s0, [sp]
 8008bd8:	f1c0 0001 	rsb	r0, r0, #1
 8008bdc:	f000 f8aa 	bl	8008d34 <__kernel_tanf>
 8008be0:	e7ed      	b.n	8008bbe <tanf+0x2a>
 8008be2:	bf00      	nop
 8008be4:	3f490fda 	.word	0x3f490fda
 8008be8:	00000000 	.word	0x00000000

08008bec <__ieee754_sqrtf>:
 8008bec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008bf0:	4770      	bx	lr
	...

08008bf4 <__kernel_cosf>:
 8008bf4:	ee10 3a10 	vmov	r3, s0
 8008bf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bfc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008c00:	eef0 6a40 	vmov.f32	s13, s0
 8008c04:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008c08:	d204      	bcs.n	8008c14 <__kernel_cosf+0x20>
 8008c0a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8008c0e:	ee17 2a90 	vmov	r2, s15
 8008c12:	b342      	cbz	r2, 8008c66 <__kernel_cosf+0x72>
 8008c14:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008c18:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008c84 <__kernel_cosf+0x90>
 8008c1c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008c88 <__kernel_cosf+0x94>
 8008c20:	4a1a      	ldr	r2, [pc, #104]	@ (8008c8c <__kernel_cosf+0x98>)
 8008c22:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008c26:	4293      	cmp	r3, r2
 8008c28:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008c90 <__kernel_cosf+0x9c>
 8008c2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008c30:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008c94 <__kernel_cosf+0xa0>
 8008c34:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008c38:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008c98 <__kernel_cosf+0xa4>
 8008c3c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008c40:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008c9c <__kernel_cosf+0xa8>
 8008c44:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008c48:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008c4c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8008c50:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008c54:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5c:	d804      	bhi.n	8008c68 <__kernel_cosf+0x74>
 8008c5e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008c62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008c66:	4770      	bx	lr
 8008c68:	4a0d      	ldr	r2, [pc, #52]	@ (8008ca0 <__kernel_cosf+0xac>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bf9a      	itte	ls
 8008c6e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8008c72:	ee07 3a10 	vmovls	s14, r3
 8008c76:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008c7a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c82:	e7ec      	b.n	8008c5e <__kernel_cosf+0x6a>
 8008c84:	ad47d74e 	.word	0xad47d74e
 8008c88:	310f74f6 	.word	0x310f74f6
 8008c8c:	3e999999 	.word	0x3e999999
 8008c90:	b493f27c 	.word	0xb493f27c
 8008c94:	37d00d01 	.word	0x37d00d01
 8008c98:	bab60b61 	.word	0xbab60b61
 8008c9c:	3d2aaaab 	.word	0x3d2aaaab
 8008ca0:	3f480000 	.word	0x3f480000

08008ca4 <__kernel_sinf>:
 8008ca4:	ee10 3a10 	vmov	r3, s0
 8008ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008cb0:	d204      	bcs.n	8008cbc <__kernel_sinf+0x18>
 8008cb2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008cb6:	ee17 3a90 	vmov	r3, s15
 8008cba:	b35b      	cbz	r3, 8008d14 <__kernel_sinf+0x70>
 8008cbc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008cc0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008d18 <__kernel_sinf+0x74>
 8008cc4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008d1c <__kernel_sinf+0x78>
 8008cc8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008ccc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8008d20 <__kernel_sinf+0x7c>
 8008cd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008cd4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008d24 <__kernel_sinf+0x80>
 8008cd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008cdc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008d28 <__kernel_sinf+0x84>
 8008ce0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008ce4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008ce8:	b930      	cbnz	r0, 8008cf8 <__kernel_sinf+0x54>
 8008cea:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008d2c <__kernel_sinf+0x88>
 8008cee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008cf2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008cf6:	4770      	bx	lr
 8008cf8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008cfc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008d00:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008d04:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008d08:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008d30 <__kernel_sinf+0x8c>
 8008d0c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008d10:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	2f2ec9d3 	.word	0x2f2ec9d3
 8008d1c:	b2d72f34 	.word	0xb2d72f34
 8008d20:	3638ef1b 	.word	0x3638ef1b
 8008d24:	b9500d01 	.word	0xb9500d01
 8008d28:	3c088889 	.word	0x3c088889
 8008d2c:	be2aaaab 	.word	0xbe2aaaab
 8008d30:	3e2aaaab 	.word	0x3e2aaaab

08008d34 <__kernel_tanf>:
 8008d34:	b508      	push	{r3, lr}
 8008d36:	ee10 3a10 	vmov	r3, s0
 8008d3a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d3e:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8008d42:	eef0 7a40 	vmov.f32	s15, s0
 8008d46:	d217      	bcs.n	8008d78 <__kernel_tanf+0x44>
 8008d48:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8008d4c:	ee17 1a10 	vmov	r1, s14
 8008d50:	bb41      	cbnz	r1, 8008da4 <__kernel_tanf+0x70>
 8008d52:	1c43      	adds	r3, r0, #1
 8008d54:	4313      	orrs	r3, r2
 8008d56:	d108      	bne.n	8008d6a <__kernel_tanf+0x36>
 8008d58:	f000 fb70 	bl	800943c <fabsf>
 8008d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008d64:	eeb0 0a67 	vmov.f32	s0, s15
 8008d68:	bd08      	pop	{r3, pc}
 8008d6a:	2801      	cmp	r0, #1
 8008d6c:	d0fa      	beq.n	8008d64 <__kernel_tanf+0x30>
 8008d6e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008d72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008d76:	e7f5      	b.n	8008d64 <__kernel_tanf+0x30>
 8008d78:	494c      	ldr	r1, [pc, #304]	@ (8008eac <__kernel_tanf+0x178>)
 8008d7a:	428a      	cmp	r2, r1
 8008d7c:	d312      	bcc.n	8008da4 <__kernel_tanf+0x70>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8008eb0 <__kernel_tanf+0x17c>
 8008d84:	bfb8      	it	lt
 8008d86:	eef1 7a40 	vneglt.f32	s15, s0
 8008d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008d8e:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8008eb4 <__kernel_tanf+0x180>
 8008d92:	bfb8      	it	lt
 8008d94:	eef1 0a60 	vneglt.f32	s1, s1
 8008d98:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008d9c:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8008eb8 <__kernel_tanf+0x184>
 8008da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008da4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8008da8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008ebc <__kernel_tanf+0x188>
 8008dac:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8008ec0 <__kernel_tanf+0x18c>
 8008db0:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8008ec4 <__kernel_tanf+0x190>
 8008db4:	493d      	ldr	r1, [pc, #244]	@ (8008eac <__kernel_tanf+0x178>)
 8008db6:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008dba:	428a      	cmp	r2, r1
 8008dbc:	eea7 6a25 	vfma.f32	s12, s14, s11
 8008dc0:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8008ec8 <__kernel_tanf+0x194>
 8008dc4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008dc8:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8008ecc <__kernel_tanf+0x198>
 8008dcc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008dd0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ed0 <__kernel_tanf+0x19c>
 8008dd4:	eee6 5a07 	vfma.f32	s11, s12, s14
 8008dd8:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8008ed4 <__kernel_tanf+0x1a0>
 8008ddc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8008de0:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008ed8 <__kernel_tanf+0x1a4>
 8008de4:	eee7 5a05 	vfma.f32	s11, s14, s10
 8008de8:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8008edc <__kernel_tanf+0x1a8>
 8008dec:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008df0:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8008ee0 <__kernel_tanf+0x1ac>
 8008df4:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008df8:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8008ee4 <__kernel_tanf+0x1b0>
 8008dfc:	eea5 5a87 	vfma.f32	s10, s11, s14
 8008e00:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8008ee8 <__kernel_tanf+0x1b4>
 8008e04:	eee5 5a07 	vfma.f32	s11, s10, s14
 8008e08:	eeb0 7a46 	vmov.f32	s14, s12
 8008e0c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008e10:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8008e14:	eeb0 6a60 	vmov.f32	s12, s1
 8008e18:	eea7 6a05 	vfma.f32	s12, s14, s10
 8008e1c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8008eec <__kernel_tanf+0x1b8>
 8008e20:	eee6 0a26 	vfma.f32	s1, s12, s13
 8008e24:	eee5 0a07 	vfma.f32	s1, s10, s14
 8008e28:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8008e2c:	d31d      	bcc.n	8008e6a <__kernel_tanf+0x136>
 8008e2e:	ee07 0a10 	vmov	s14, r0
 8008e32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008e36:	ee26 5a06 	vmul.f32	s10, s12, s12
 8008e3a:	ee36 6a07 	vadd.f32	s12, s12, s14
 8008e3e:	179b      	asrs	r3, r3, #30
 8008e40:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	f1c3 0301 	rsb	r3, r3, #1
 8008e4c:	ee06 3a90 	vmov	s13, r3
 8008e50:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8008e54:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008e58:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008e5c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8008e60:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8008e64:	ee66 7a87 	vmul.f32	s15, s13, s14
 8008e68:	e77c      	b.n	8008d64 <__kernel_tanf+0x30>
 8008e6a:	2801      	cmp	r0, #1
 8008e6c:	d01b      	beq.n	8008ea6 <__kernel_tanf+0x172>
 8008e6e:	4b20      	ldr	r3, [pc, #128]	@ (8008ef0 <__kernel_tanf+0x1bc>)
 8008e70:	ee16 2a10 	vmov	r2, s12
 8008e74:	401a      	ands	r2, r3
 8008e76:	ee05 2a90 	vmov	s11, r2
 8008e7a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e82:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8008e86:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8008e8a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008e8e:	ee16 2a90 	vmov	r2, s13
 8008e92:	4013      	ands	r3, r2
 8008e94:	ee07 3a90 	vmov	s15, r3
 8008e98:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008e9c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8008ea0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8008ea4:	e75e      	b.n	8008d64 <__kernel_tanf+0x30>
 8008ea6:	eef0 7a46 	vmov.f32	s15, s12
 8008eaa:	e75b      	b.n	8008d64 <__kernel_tanf+0x30>
 8008eac:	3f2ca140 	.word	0x3f2ca140
 8008eb0:	3f490fda 	.word	0x3f490fda
 8008eb4:	33222168 	.word	0x33222168
 8008eb8:	00000000 	.word	0x00000000
 8008ebc:	b79bae5f 	.word	0xb79bae5f
 8008ec0:	38a3f445 	.word	0x38a3f445
 8008ec4:	37d95384 	.word	0x37d95384
 8008ec8:	3a1a26c8 	.word	0x3a1a26c8
 8008ecc:	3b6b6916 	.word	0x3b6b6916
 8008ed0:	3cb327a4 	.word	0x3cb327a4
 8008ed4:	3e088889 	.word	0x3e088889
 8008ed8:	3895c07a 	.word	0x3895c07a
 8008edc:	398137b9 	.word	0x398137b9
 8008ee0:	3abede48 	.word	0x3abede48
 8008ee4:	3c11371f 	.word	0x3c11371f
 8008ee8:	3d5d0dd1 	.word	0x3d5d0dd1
 8008eec:	3eaaaaab 	.word	0x3eaaaaab
 8008ef0:	fffff000 	.word	0xfffff000

08008ef4 <__ieee754_atan2f>:
 8008ef4:	ee10 2a90 	vmov	r2, s1
 8008ef8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008efc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008f00:	b510      	push	{r4, lr}
 8008f02:	eef0 7a40 	vmov.f32	s15, s0
 8008f06:	d806      	bhi.n	8008f16 <__ieee754_atan2f+0x22>
 8008f08:	ee10 0a10 	vmov	r0, s0
 8008f0c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008f10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f14:	d904      	bls.n	8008f20 <__ieee754_atan2f+0x2c>
 8008f16:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8008f1e:	bd10      	pop	{r4, pc}
 8008f20:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008f24:	d103      	bne.n	8008f2e <__ieee754_atan2f+0x3a>
 8008f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f2a:	f000 b9b3 	b.w	8009294 <atanf>
 8008f2e:	1794      	asrs	r4, r2, #30
 8008f30:	f004 0402 	and.w	r4, r4, #2
 8008f34:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008f38:	b943      	cbnz	r3, 8008f4c <__ieee754_atan2f+0x58>
 8008f3a:	2c02      	cmp	r4, #2
 8008f3c:	d05e      	beq.n	8008ffc <__ieee754_atan2f+0x108>
 8008f3e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009010 <__ieee754_atan2f+0x11c>
 8008f42:	2c03      	cmp	r4, #3
 8008f44:	bf08      	it	eq
 8008f46:	eef0 7a47 	vmoveq.f32	s15, s14
 8008f4a:	e7e6      	b.n	8008f1a <__ieee754_atan2f+0x26>
 8008f4c:	b941      	cbnz	r1, 8008f60 <__ieee754_atan2f+0x6c>
 8008f4e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8009014 <__ieee754_atan2f+0x120>
 8008f52:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009018 <__ieee754_atan2f+0x124>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	bfa8      	it	ge
 8008f5a:	eef0 7a47 	vmovge.f32	s15, s14
 8008f5e:	e7dc      	b.n	8008f1a <__ieee754_atan2f+0x26>
 8008f60:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008f64:	d110      	bne.n	8008f88 <__ieee754_atan2f+0x94>
 8008f66:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f6e:	d107      	bne.n	8008f80 <__ieee754_atan2f+0x8c>
 8008f70:	2c02      	cmp	r4, #2
 8008f72:	d846      	bhi.n	8009002 <__ieee754_atan2f+0x10e>
 8008f74:	4b29      	ldr	r3, [pc, #164]	@ (800901c <__ieee754_atan2f+0x128>)
 8008f76:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008f7a:	edd3 7a00 	vldr	s15, [r3]
 8008f7e:	e7cc      	b.n	8008f1a <__ieee754_atan2f+0x26>
 8008f80:	2c02      	cmp	r4, #2
 8008f82:	d841      	bhi.n	8009008 <__ieee754_atan2f+0x114>
 8008f84:	4b26      	ldr	r3, [pc, #152]	@ (8009020 <__ieee754_atan2f+0x12c>)
 8008f86:	e7f6      	b.n	8008f76 <__ieee754_atan2f+0x82>
 8008f88:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f8c:	d0df      	beq.n	8008f4e <__ieee754_atan2f+0x5a>
 8008f8e:	1a5b      	subs	r3, r3, r1
 8008f90:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8008f94:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008f98:	da1a      	bge.n	8008fd0 <__ieee754_atan2f+0xdc>
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	da01      	bge.n	8008fa2 <__ieee754_atan2f+0xae>
 8008f9e:	313c      	adds	r1, #60	@ 0x3c
 8008fa0:	db19      	blt.n	8008fd6 <__ieee754_atan2f+0xe2>
 8008fa2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008fa6:	f000 fa49 	bl	800943c <fabsf>
 8008faa:	f000 f973 	bl	8009294 <atanf>
 8008fae:	eef0 7a40 	vmov.f32	s15, s0
 8008fb2:	2c01      	cmp	r4, #1
 8008fb4:	d012      	beq.n	8008fdc <__ieee754_atan2f+0xe8>
 8008fb6:	2c02      	cmp	r4, #2
 8008fb8:	d017      	beq.n	8008fea <__ieee754_atan2f+0xf6>
 8008fba:	2c00      	cmp	r4, #0
 8008fbc:	d0ad      	beq.n	8008f1a <__ieee754_atan2f+0x26>
 8008fbe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009024 <__ieee754_atan2f+0x130>
 8008fc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fc6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009028 <__ieee754_atan2f+0x134>
 8008fca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008fce:	e7a4      	b.n	8008f1a <__ieee754_atan2f+0x26>
 8008fd0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8009018 <__ieee754_atan2f+0x124>
 8008fd4:	e7ed      	b.n	8008fb2 <__ieee754_atan2f+0xbe>
 8008fd6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800902c <__ieee754_atan2f+0x138>
 8008fda:	e7ea      	b.n	8008fb2 <__ieee754_atan2f+0xbe>
 8008fdc:	ee17 3a90 	vmov	r3, s15
 8008fe0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008fe4:	ee07 3a90 	vmov	s15, r3
 8008fe8:	e797      	b.n	8008f1a <__ieee754_atan2f+0x26>
 8008fea:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009024 <__ieee754_atan2f+0x130>
 8008fee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ff2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009028 <__ieee754_atan2f+0x134>
 8008ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ffa:	e78e      	b.n	8008f1a <__ieee754_atan2f+0x26>
 8008ffc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009028 <__ieee754_atan2f+0x134>
 8009000:	e78b      	b.n	8008f1a <__ieee754_atan2f+0x26>
 8009002:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8009030 <__ieee754_atan2f+0x13c>
 8009006:	e788      	b.n	8008f1a <__ieee754_atan2f+0x26>
 8009008:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800902c <__ieee754_atan2f+0x138>
 800900c:	e785      	b.n	8008f1a <__ieee754_atan2f+0x26>
 800900e:	bf00      	nop
 8009010:	c0490fdb 	.word	0xc0490fdb
 8009014:	bfc90fdb 	.word	0xbfc90fdb
 8009018:	3fc90fdb 	.word	0x3fc90fdb
 800901c:	08009ab4 	.word	0x08009ab4
 8009020:	08009aa8 	.word	0x08009aa8
 8009024:	33bbbd2e 	.word	0x33bbbd2e
 8009028:	40490fdb 	.word	0x40490fdb
 800902c:	00000000 	.word	0x00000000
 8009030:	3f490fdb 	.word	0x3f490fdb

08009034 <__ieee754_rem_pio2f>:
 8009034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009036:	ee10 6a10 	vmov	r6, s0
 800903a:	4b88      	ldr	r3, [pc, #544]	@ (800925c <__ieee754_rem_pio2f+0x228>)
 800903c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009040:	429d      	cmp	r5, r3
 8009042:	b087      	sub	sp, #28
 8009044:	4604      	mov	r4, r0
 8009046:	d805      	bhi.n	8009054 <__ieee754_rem_pio2f+0x20>
 8009048:	2300      	movs	r3, #0
 800904a:	ed80 0a00 	vstr	s0, [r0]
 800904e:	6043      	str	r3, [r0, #4]
 8009050:	2000      	movs	r0, #0
 8009052:	e022      	b.n	800909a <__ieee754_rem_pio2f+0x66>
 8009054:	4b82      	ldr	r3, [pc, #520]	@ (8009260 <__ieee754_rem_pio2f+0x22c>)
 8009056:	429d      	cmp	r5, r3
 8009058:	d83a      	bhi.n	80090d0 <__ieee754_rem_pio2f+0x9c>
 800905a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800905e:	2e00      	cmp	r6, #0
 8009060:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009264 <__ieee754_rem_pio2f+0x230>
 8009064:	4a80      	ldr	r2, [pc, #512]	@ (8009268 <__ieee754_rem_pio2f+0x234>)
 8009066:	f023 030f 	bic.w	r3, r3, #15
 800906a:	dd18      	ble.n	800909e <__ieee754_rem_pio2f+0x6a>
 800906c:	4293      	cmp	r3, r2
 800906e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009072:	bf09      	itett	eq
 8009074:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800926c <__ieee754_rem_pio2f+0x238>
 8009078:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009270 <__ieee754_rem_pio2f+0x23c>
 800907c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009274 <__ieee754_rem_pio2f+0x240>
 8009080:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009084:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800908c:	ed80 7a00 	vstr	s14, [r0]
 8009090:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009094:	edc0 7a01 	vstr	s15, [r0, #4]
 8009098:	2001      	movs	r0, #1
 800909a:	b007      	add	sp, #28
 800909c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909e:	4293      	cmp	r3, r2
 80090a0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80090a4:	bf09      	itett	eq
 80090a6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800926c <__ieee754_rem_pio2f+0x238>
 80090aa:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009270 <__ieee754_rem_pio2f+0x23c>
 80090ae:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009274 <__ieee754_rem_pio2f+0x240>
 80090b2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80090b6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80090ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090be:	ed80 7a00 	vstr	s14, [r0]
 80090c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090c6:	edc0 7a01 	vstr	s15, [r0, #4]
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	e7e4      	b.n	800909a <__ieee754_rem_pio2f+0x66>
 80090d0:	4b69      	ldr	r3, [pc, #420]	@ (8009278 <__ieee754_rem_pio2f+0x244>)
 80090d2:	429d      	cmp	r5, r3
 80090d4:	d873      	bhi.n	80091be <__ieee754_rem_pio2f+0x18a>
 80090d6:	f000 f9b1 	bl	800943c <fabsf>
 80090da:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800927c <__ieee754_rem_pio2f+0x248>
 80090de:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80090e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80090e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090ee:	ee17 0a90 	vmov	r0, s15
 80090f2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009264 <__ieee754_rem_pio2f+0x230>
 80090f6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80090fa:	281f      	cmp	r0, #31
 80090fc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009270 <__ieee754_rem_pio2f+0x23c>
 8009100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009104:	eeb1 6a47 	vneg.f32	s12, s14
 8009108:	ee70 6a67 	vsub.f32	s13, s0, s15
 800910c:	ee16 1a90 	vmov	r1, s13
 8009110:	dc09      	bgt.n	8009126 <__ieee754_rem_pio2f+0xf2>
 8009112:	4a5b      	ldr	r2, [pc, #364]	@ (8009280 <__ieee754_rem_pio2f+0x24c>)
 8009114:	1e47      	subs	r7, r0, #1
 8009116:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800911a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800911e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009122:	4293      	cmp	r3, r2
 8009124:	d107      	bne.n	8009136 <__ieee754_rem_pio2f+0x102>
 8009126:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800912a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800912e:	2a08      	cmp	r2, #8
 8009130:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009134:	dc14      	bgt.n	8009160 <__ieee754_rem_pio2f+0x12c>
 8009136:	6021      	str	r1, [r4, #0]
 8009138:	ed94 7a00 	vldr	s14, [r4]
 800913c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009140:	2e00      	cmp	r6, #0
 8009142:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009146:	ed84 0a01 	vstr	s0, [r4, #4]
 800914a:	daa6      	bge.n	800909a <__ieee754_rem_pio2f+0x66>
 800914c:	eeb1 7a47 	vneg.f32	s14, s14
 8009150:	eeb1 0a40 	vneg.f32	s0, s0
 8009154:	ed84 7a00 	vstr	s14, [r4]
 8009158:	ed84 0a01 	vstr	s0, [r4, #4]
 800915c:	4240      	negs	r0, r0
 800915e:	e79c      	b.n	800909a <__ieee754_rem_pio2f+0x66>
 8009160:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800926c <__ieee754_rem_pio2f+0x238>
 8009164:	eef0 6a40 	vmov.f32	s13, s0
 8009168:	eee6 6a25 	vfma.f32	s13, s12, s11
 800916c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009170:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009174:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009274 <__ieee754_rem_pio2f+0x240>
 8009178:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800917c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009180:	ee15 2a90 	vmov	r2, s11
 8009184:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009188:	1a5b      	subs	r3, r3, r1
 800918a:	2b19      	cmp	r3, #25
 800918c:	dc04      	bgt.n	8009198 <__ieee754_rem_pio2f+0x164>
 800918e:	edc4 5a00 	vstr	s11, [r4]
 8009192:	eeb0 0a66 	vmov.f32	s0, s13
 8009196:	e7cf      	b.n	8009138 <__ieee754_rem_pio2f+0x104>
 8009198:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009284 <__ieee754_rem_pio2f+0x250>
 800919c:	eeb0 0a66 	vmov.f32	s0, s13
 80091a0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80091a4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80091a8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009288 <__ieee754_rem_pio2f+0x254>
 80091ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 80091b0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80091b4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80091b8:	ed84 7a00 	vstr	s14, [r4]
 80091bc:	e7bc      	b.n	8009138 <__ieee754_rem_pio2f+0x104>
 80091be:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80091c2:	d306      	bcc.n	80091d2 <__ieee754_rem_pio2f+0x19e>
 80091c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80091c8:	edc0 7a01 	vstr	s15, [r0, #4]
 80091cc:	edc0 7a00 	vstr	s15, [r0]
 80091d0:	e73e      	b.n	8009050 <__ieee754_rem_pio2f+0x1c>
 80091d2:	15ea      	asrs	r2, r5, #23
 80091d4:	3a86      	subs	r2, #134	@ 0x86
 80091d6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80091e2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800928c <__ieee754_rem_pio2f+0x258>
 80091e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091ee:	ed8d 7a03 	vstr	s14, [sp, #12]
 80091f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80091f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80091fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80091fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009202:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009206:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800920a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800920e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009212:	edcd 7a05 	vstr	s15, [sp, #20]
 8009216:	d11e      	bne.n	8009256 <__ieee754_rem_pio2f+0x222>
 8009218:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800921c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009220:	bf0c      	ite	eq
 8009222:	2301      	moveq	r3, #1
 8009224:	2302      	movne	r3, #2
 8009226:	491a      	ldr	r1, [pc, #104]	@ (8009290 <__ieee754_rem_pio2f+0x25c>)
 8009228:	9101      	str	r1, [sp, #4]
 800922a:	2102      	movs	r1, #2
 800922c:	9100      	str	r1, [sp, #0]
 800922e:	a803      	add	r0, sp, #12
 8009230:	4621      	mov	r1, r4
 8009232:	f000 f90b 	bl	800944c <__kernel_rem_pio2f>
 8009236:	2e00      	cmp	r6, #0
 8009238:	f6bf af2f 	bge.w	800909a <__ieee754_rem_pio2f+0x66>
 800923c:	edd4 7a00 	vldr	s15, [r4]
 8009240:	eef1 7a67 	vneg.f32	s15, s15
 8009244:	edc4 7a00 	vstr	s15, [r4]
 8009248:	edd4 7a01 	vldr	s15, [r4, #4]
 800924c:	eef1 7a67 	vneg.f32	s15, s15
 8009250:	edc4 7a01 	vstr	s15, [r4, #4]
 8009254:	e782      	b.n	800915c <__ieee754_rem_pio2f+0x128>
 8009256:	2303      	movs	r3, #3
 8009258:	e7e5      	b.n	8009226 <__ieee754_rem_pio2f+0x1f2>
 800925a:	bf00      	nop
 800925c:	3f490fd8 	.word	0x3f490fd8
 8009260:	4016cbe3 	.word	0x4016cbe3
 8009264:	3fc90f80 	.word	0x3fc90f80
 8009268:	3fc90fd0 	.word	0x3fc90fd0
 800926c:	37354400 	.word	0x37354400
 8009270:	37354443 	.word	0x37354443
 8009274:	2e85a308 	.word	0x2e85a308
 8009278:	43490f80 	.word	0x43490f80
 800927c:	3f22f984 	.word	0x3f22f984
 8009280:	08009ac0 	.word	0x08009ac0
 8009284:	2e85a300 	.word	0x2e85a300
 8009288:	248d3132 	.word	0x248d3132
 800928c:	43800000 	.word	0x43800000
 8009290:	08009b40 	.word	0x08009b40

08009294 <atanf>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	ee10 5a10 	vmov	r5, s0
 800929a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800929e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80092a2:	eef0 7a40 	vmov.f32	s15, s0
 80092a6:	d310      	bcc.n	80092ca <atanf+0x36>
 80092a8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80092ac:	d904      	bls.n	80092b8 <atanf+0x24>
 80092ae:	ee70 7a00 	vadd.f32	s15, s0, s0
 80092b2:	eeb0 0a67 	vmov.f32	s0, s15
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80093f0 <atanf+0x15c>
 80092bc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80093f4 <atanf+0x160>
 80092c0:	2d00      	cmp	r5, #0
 80092c2:	bfc8      	it	gt
 80092c4:	eef0 7a47 	vmovgt.f32	s15, s14
 80092c8:	e7f3      	b.n	80092b2 <atanf+0x1e>
 80092ca:	4b4b      	ldr	r3, [pc, #300]	@ (80093f8 <atanf+0x164>)
 80092cc:	429c      	cmp	r4, r3
 80092ce:	d810      	bhi.n	80092f2 <atanf+0x5e>
 80092d0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80092d4:	d20a      	bcs.n	80092ec <atanf+0x58>
 80092d6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80093fc <atanf+0x168>
 80092da:	ee30 7a07 	vadd.f32	s14, s0, s14
 80092de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092e2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80092e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ea:	dce2      	bgt.n	80092b2 <atanf+0x1e>
 80092ec:	f04f 33ff 	mov.w	r3, #4294967295
 80092f0:	e013      	b.n	800931a <atanf+0x86>
 80092f2:	f000 f8a3 	bl	800943c <fabsf>
 80092f6:	4b42      	ldr	r3, [pc, #264]	@ (8009400 <atanf+0x16c>)
 80092f8:	429c      	cmp	r4, r3
 80092fa:	d84f      	bhi.n	800939c <atanf+0x108>
 80092fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8009300:	429c      	cmp	r4, r3
 8009302:	d841      	bhi.n	8009388 <atanf+0xf4>
 8009304:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009308:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800930c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009310:	2300      	movs	r3, #0
 8009312:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009316:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009320:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009404 <atanf+0x170>
 8009324:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8009408 <atanf+0x174>
 8009328:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800940c <atanf+0x178>
 800932c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009330:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009334:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8009410 <atanf+0x17c>
 8009338:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800933c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009414 <atanf+0x180>
 8009340:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009344:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009418 <atanf+0x184>
 8009348:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800934c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800941c <atanf+0x188>
 8009350:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009354:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8009420 <atanf+0x18c>
 8009358:	eea6 5a87 	vfma.f32	s10, s13, s14
 800935c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009424 <atanf+0x190>
 8009360:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009364:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8009428 <atanf+0x194>
 8009368:	eea7 5a26 	vfma.f32	s10, s14, s13
 800936c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800942c <atanf+0x198>
 8009370:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009374:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009378:	eea5 7a86 	vfma.f32	s14, s11, s12
 800937c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009380:	d121      	bne.n	80093c6 <atanf+0x132>
 8009382:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009386:	e794      	b.n	80092b2 <atanf+0x1e>
 8009388:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800938c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009390:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009394:	2301      	movs	r3, #1
 8009396:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800939a:	e7be      	b.n	800931a <atanf+0x86>
 800939c:	4b24      	ldr	r3, [pc, #144]	@ (8009430 <atanf+0x19c>)
 800939e:	429c      	cmp	r4, r3
 80093a0:	d80b      	bhi.n	80093ba <atanf+0x126>
 80093a2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80093a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093aa:	eea0 7a27 	vfma.f32	s14, s0, s15
 80093ae:	2302      	movs	r3, #2
 80093b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80093b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093b8:	e7af      	b.n	800931a <atanf+0x86>
 80093ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80093be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093c2:	2303      	movs	r3, #3
 80093c4:	e7a9      	b.n	800931a <atanf+0x86>
 80093c6:	4a1b      	ldr	r2, [pc, #108]	@ (8009434 <atanf+0x1a0>)
 80093c8:	491b      	ldr	r1, [pc, #108]	@ (8009438 <atanf+0x1a4>)
 80093ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80093ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80093d2:	edd3 6a00 	vldr	s13, [r3]
 80093d6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80093da:	2d00      	cmp	r5, #0
 80093dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80093e0:	edd2 7a00 	vldr	s15, [r2]
 80093e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093e8:	bfb8      	it	lt
 80093ea:	eef1 7a67 	vneglt.f32	s15, s15
 80093ee:	e760      	b.n	80092b2 <atanf+0x1e>
 80093f0:	bfc90fdb 	.word	0xbfc90fdb
 80093f4:	3fc90fdb 	.word	0x3fc90fdb
 80093f8:	3edfffff 	.word	0x3edfffff
 80093fc:	7149f2ca 	.word	0x7149f2ca
 8009400:	3f97ffff 	.word	0x3f97ffff
 8009404:	3c8569d7 	.word	0x3c8569d7
 8009408:	3d4bda59 	.word	0x3d4bda59
 800940c:	bd6ef16b 	.word	0xbd6ef16b
 8009410:	3d886b35 	.word	0x3d886b35
 8009414:	3dba2e6e 	.word	0x3dba2e6e
 8009418:	3e124925 	.word	0x3e124925
 800941c:	3eaaaaab 	.word	0x3eaaaaab
 8009420:	bd15a221 	.word	0xbd15a221
 8009424:	bd9d8795 	.word	0xbd9d8795
 8009428:	bde38e38 	.word	0xbde38e38
 800942c:	be4ccccd 	.word	0xbe4ccccd
 8009430:	401bffff 	.word	0x401bffff
 8009434:	08009e68 	.word	0x08009e68
 8009438:	08009e58 	.word	0x08009e58

0800943c <fabsf>:
 800943c:	ee10 3a10 	vmov	r3, s0
 8009440:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009444:	ee00 3a10 	vmov	s0, r3
 8009448:	4770      	bx	lr
	...

0800944c <__kernel_rem_pio2f>:
 800944c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009450:	ed2d 8b04 	vpush	{d8-d9}
 8009454:	b0d9      	sub	sp, #356	@ 0x164
 8009456:	4690      	mov	r8, r2
 8009458:	9001      	str	r0, [sp, #4]
 800945a:	4ab6      	ldr	r2, [pc, #728]	@ (8009734 <__kernel_rem_pio2f+0x2e8>)
 800945c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800945e:	f118 0f04 	cmn.w	r8, #4
 8009462:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009466:	460f      	mov	r7, r1
 8009468:	f103 3bff 	add.w	fp, r3, #4294967295
 800946c:	db26      	blt.n	80094bc <__kernel_rem_pio2f+0x70>
 800946e:	f1b8 0203 	subs.w	r2, r8, #3
 8009472:	bf48      	it	mi
 8009474:	f108 0204 	addmi.w	r2, r8, #4
 8009478:	10d2      	asrs	r2, r2, #3
 800947a:	1c55      	adds	r5, r2, #1
 800947c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800947e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009744 <__kernel_rem_pio2f+0x2f8>
 8009482:	00e8      	lsls	r0, r5, #3
 8009484:	eba2 060b 	sub.w	r6, r2, fp
 8009488:	9002      	str	r0, [sp, #8]
 800948a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800948e:	eb0a 0c0b 	add.w	ip, sl, fp
 8009492:	ac1c      	add	r4, sp, #112	@ 0x70
 8009494:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009498:	2000      	movs	r0, #0
 800949a:	4560      	cmp	r0, ip
 800949c:	dd10      	ble.n	80094c0 <__kernel_rem_pio2f+0x74>
 800949e:	a91c      	add	r1, sp, #112	@ 0x70
 80094a0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80094a4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80094a8:	2600      	movs	r6, #0
 80094aa:	4556      	cmp	r6, sl
 80094ac:	dc24      	bgt.n	80094f8 <__kernel_rem_pio2f+0xac>
 80094ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80094b2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8009744 <__kernel_rem_pio2f+0x2f8>
 80094b6:	4684      	mov	ip, r0
 80094b8:	2400      	movs	r4, #0
 80094ba:	e016      	b.n	80094ea <__kernel_rem_pio2f+0x9e>
 80094bc:	2200      	movs	r2, #0
 80094be:	e7dc      	b.n	800947a <__kernel_rem_pio2f+0x2e>
 80094c0:	42c6      	cmn	r6, r0
 80094c2:	bf5d      	ittte	pl
 80094c4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80094c8:	ee07 1a90 	vmovpl	s15, r1
 80094cc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80094d0:	eef0 7a47 	vmovmi.f32	s15, s14
 80094d4:	ece4 7a01 	vstmia	r4!, {s15}
 80094d8:	3001      	adds	r0, #1
 80094da:	e7de      	b.n	800949a <__kernel_rem_pio2f+0x4e>
 80094dc:	ecfe 6a01 	vldmia	lr!, {s13}
 80094e0:	ed3c 7a01 	vldmdb	ip!, {s14}
 80094e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80094e8:	3401      	adds	r4, #1
 80094ea:	455c      	cmp	r4, fp
 80094ec:	ddf6      	ble.n	80094dc <__kernel_rem_pio2f+0x90>
 80094ee:	ece9 7a01 	vstmia	r9!, {s15}
 80094f2:	3601      	adds	r6, #1
 80094f4:	3004      	adds	r0, #4
 80094f6:	e7d8      	b.n	80094aa <__kernel_rem_pio2f+0x5e>
 80094f8:	a908      	add	r1, sp, #32
 80094fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094fe:	9104      	str	r1, [sp, #16]
 8009500:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009502:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8009740 <__kernel_rem_pio2f+0x2f4>
 8009506:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800973c <__kernel_rem_pio2f+0x2f0>
 800950a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800950e:	9203      	str	r2, [sp, #12]
 8009510:	4654      	mov	r4, sl
 8009512:	00a2      	lsls	r2, r4, #2
 8009514:	9205      	str	r2, [sp, #20]
 8009516:	aa58      	add	r2, sp, #352	@ 0x160
 8009518:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800951c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8009520:	a944      	add	r1, sp, #272	@ 0x110
 8009522:	aa08      	add	r2, sp, #32
 8009524:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8009528:	4694      	mov	ip, r2
 800952a:	4626      	mov	r6, r4
 800952c:	2e00      	cmp	r6, #0
 800952e:	dc4c      	bgt.n	80095ca <__kernel_rem_pio2f+0x17e>
 8009530:	4628      	mov	r0, r5
 8009532:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009536:	f000 f9f1 	bl	800991c <scalbnf>
 800953a:	eeb0 8a40 	vmov.f32	s16, s0
 800953e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8009542:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009546:	f000 fa4f 	bl	80099e8 <floorf>
 800954a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800954e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009552:	2d00      	cmp	r5, #0
 8009554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009558:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800955c:	ee17 9a90 	vmov	r9, s15
 8009560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009564:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009568:	dd41      	ble.n	80095ee <__kernel_rem_pio2f+0x1a2>
 800956a:	f104 3cff 	add.w	ip, r4, #4294967295
 800956e:	a908      	add	r1, sp, #32
 8009570:	f1c5 0e08 	rsb	lr, r5, #8
 8009574:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8009578:	fa46 f00e 	asr.w	r0, r6, lr
 800957c:	4481      	add	r9, r0
 800957e:	fa00 f00e 	lsl.w	r0, r0, lr
 8009582:	1a36      	subs	r6, r6, r0
 8009584:	f1c5 0007 	rsb	r0, r5, #7
 8009588:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800958c:	4106      	asrs	r6, r0
 800958e:	2e00      	cmp	r6, #0
 8009590:	dd3c      	ble.n	800960c <__kernel_rem_pio2f+0x1c0>
 8009592:	f04f 0e00 	mov.w	lr, #0
 8009596:	f109 0901 	add.w	r9, r9, #1
 800959a:	4670      	mov	r0, lr
 800959c:	4574      	cmp	r4, lr
 800959e:	dc68      	bgt.n	8009672 <__kernel_rem_pio2f+0x226>
 80095a0:	2d00      	cmp	r5, #0
 80095a2:	dd03      	ble.n	80095ac <__kernel_rem_pio2f+0x160>
 80095a4:	2d01      	cmp	r5, #1
 80095a6:	d074      	beq.n	8009692 <__kernel_rem_pio2f+0x246>
 80095a8:	2d02      	cmp	r5, #2
 80095aa:	d07d      	beq.n	80096a8 <__kernel_rem_pio2f+0x25c>
 80095ac:	2e02      	cmp	r6, #2
 80095ae:	d12d      	bne.n	800960c <__kernel_rem_pio2f+0x1c0>
 80095b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80095b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80095b8:	b340      	cbz	r0, 800960c <__kernel_rem_pio2f+0x1c0>
 80095ba:	4628      	mov	r0, r5
 80095bc:	9306      	str	r3, [sp, #24]
 80095be:	f000 f9ad 	bl	800991c <scalbnf>
 80095c2:	9b06      	ldr	r3, [sp, #24]
 80095c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 80095c8:	e020      	b.n	800960c <__kernel_rem_pio2f+0x1c0>
 80095ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 80095ce:	3e01      	subs	r6, #1
 80095d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80095dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80095e0:	ecac 0a01 	vstmia	ip!, {s0}
 80095e4:	ed30 0a01 	vldmdb	r0!, {s0}
 80095e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80095ec:	e79e      	b.n	800952c <__kernel_rem_pio2f+0xe0>
 80095ee:	d105      	bne.n	80095fc <__kernel_rem_pio2f+0x1b0>
 80095f0:	1e60      	subs	r0, r4, #1
 80095f2:	a908      	add	r1, sp, #32
 80095f4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80095f8:	11f6      	asrs	r6, r6, #7
 80095fa:	e7c8      	b.n	800958e <__kernel_rem_pio2f+0x142>
 80095fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009600:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009608:	da31      	bge.n	800966e <__kernel_rem_pio2f+0x222>
 800960a:	2600      	movs	r6, #0
 800960c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009614:	f040 8098 	bne.w	8009748 <__kernel_rem_pio2f+0x2fc>
 8009618:	1e60      	subs	r0, r4, #1
 800961a:	2200      	movs	r2, #0
 800961c:	4550      	cmp	r0, sl
 800961e:	da4b      	bge.n	80096b8 <__kernel_rem_pio2f+0x26c>
 8009620:	2a00      	cmp	r2, #0
 8009622:	d065      	beq.n	80096f0 <__kernel_rem_pio2f+0x2a4>
 8009624:	3c01      	subs	r4, #1
 8009626:	ab08      	add	r3, sp, #32
 8009628:	3d08      	subs	r5, #8
 800962a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0f8      	beq.n	8009624 <__kernel_rem_pio2f+0x1d8>
 8009632:	4628      	mov	r0, r5
 8009634:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009638:	f000 f970 	bl	800991c <scalbnf>
 800963c:	1c63      	adds	r3, r4, #1
 800963e:	aa44      	add	r2, sp, #272	@ 0x110
 8009640:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009740 <__kernel_rem_pio2f+0x2f4>
 8009644:	0099      	lsls	r1, r3, #2
 8009646:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800964a:	4623      	mov	r3, r4
 800964c:	2b00      	cmp	r3, #0
 800964e:	f280 80a9 	bge.w	80097a4 <__kernel_rem_pio2f+0x358>
 8009652:	4623      	mov	r3, r4
 8009654:	2b00      	cmp	r3, #0
 8009656:	f2c0 80c7 	blt.w	80097e8 <__kernel_rem_pio2f+0x39c>
 800965a:	aa44      	add	r2, sp, #272	@ 0x110
 800965c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009660:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009738 <__kernel_rem_pio2f+0x2ec>
 8009664:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009744 <__kernel_rem_pio2f+0x2f8>
 8009668:	2000      	movs	r0, #0
 800966a:	1ae2      	subs	r2, r4, r3
 800966c:	e0b1      	b.n	80097d2 <__kernel_rem_pio2f+0x386>
 800966e:	2602      	movs	r6, #2
 8009670:	e78f      	b.n	8009592 <__kernel_rem_pio2f+0x146>
 8009672:	f852 1b04 	ldr.w	r1, [r2], #4
 8009676:	b948      	cbnz	r0, 800968c <__kernel_rem_pio2f+0x240>
 8009678:	b121      	cbz	r1, 8009684 <__kernel_rem_pio2f+0x238>
 800967a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800967e:	f842 1c04 	str.w	r1, [r2, #-4]
 8009682:	2101      	movs	r1, #1
 8009684:	f10e 0e01 	add.w	lr, lr, #1
 8009688:	4608      	mov	r0, r1
 800968a:	e787      	b.n	800959c <__kernel_rem_pio2f+0x150>
 800968c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8009690:	e7f5      	b.n	800967e <__kernel_rem_pio2f+0x232>
 8009692:	f104 3cff 	add.w	ip, r4, #4294967295
 8009696:	aa08      	add	r2, sp, #32
 8009698:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800969c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80096a0:	a908      	add	r1, sp, #32
 80096a2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80096a6:	e781      	b.n	80095ac <__kernel_rem_pio2f+0x160>
 80096a8:	f104 3cff 	add.w	ip, r4, #4294967295
 80096ac:	aa08      	add	r2, sp, #32
 80096ae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80096b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80096b6:	e7f3      	b.n	80096a0 <__kernel_rem_pio2f+0x254>
 80096b8:	a908      	add	r1, sp, #32
 80096ba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80096be:	3801      	subs	r0, #1
 80096c0:	430a      	orrs	r2, r1
 80096c2:	e7ab      	b.n	800961c <__kernel_rem_pio2f+0x1d0>
 80096c4:	3201      	adds	r2, #1
 80096c6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80096ca:	2e00      	cmp	r6, #0
 80096cc:	d0fa      	beq.n	80096c4 <__kernel_rem_pio2f+0x278>
 80096ce:	9905      	ldr	r1, [sp, #20]
 80096d0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80096d4:	eb0d 0001 	add.w	r0, sp, r1
 80096d8:	18e6      	adds	r6, r4, r3
 80096da:	a91c      	add	r1, sp, #112	@ 0x70
 80096dc:	f104 0c01 	add.w	ip, r4, #1
 80096e0:	384c      	subs	r0, #76	@ 0x4c
 80096e2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80096e6:	4422      	add	r2, r4
 80096e8:	4562      	cmp	r2, ip
 80096ea:	da04      	bge.n	80096f6 <__kernel_rem_pio2f+0x2aa>
 80096ec:	4614      	mov	r4, r2
 80096ee:	e710      	b.n	8009512 <__kernel_rem_pio2f+0xc6>
 80096f0:	9804      	ldr	r0, [sp, #16]
 80096f2:	2201      	movs	r2, #1
 80096f4:	e7e7      	b.n	80096c6 <__kernel_rem_pio2f+0x27a>
 80096f6:	9903      	ldr	r1, [sp, #12]
 80096f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80096fc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	ee07 1a90 	vmov	s15, r1
 8009706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800970a:	2400      	movs	r4, #0
 800970c:	ece6 7a01 	vstmia	r6!, {s15}
 8009710:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009744 <__kernel_rem_pio2f+0x2f8>
 8009714:	46b1      	mov	r9, r6
 8009716:	455c      	cmp	r4, fp
 8009718:	dd04      	ble.n	8009724 <__kernel_rem_pio2f+0x2d8>
 800971a:	ece0 7a01 	vstmia	r0!, {s15}
 800971e:	f10c 0c01 	add.w	ip, ip, #1
 8009722:	e7e1      	b.n	80096e8 <__kernel_rem_pio2f+0x29c>
 8009724:	ecfe 6a01 	vldmia	lr!, {s13}
 8009728:	ed39 7a01 	vldmdb	r9!, {s14}
 800972c:	3401      	adds	r4, #1
 800972e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009732:	e7f0      	b.n	8009716 <__kernel_rem_pio2f+0x2ca>
 8009734:	08009ea4 	.word	0x08009ea4
 8009738:	08009e78 	.word	0x08009e78
 800973c:	43800000 	.word	0x43800000
 8009740:	3b800000 	.word	0x3b800000
 8009744:	00000000 	.word	0x00000000
 8009748:	9b02      	ldr	r3, [sp, #8]
 800974a:	eeb0 0a48 	vmov.f32	s0, s16
 800974e:	eba3 0008 	sub.w	r0, r3, r8
 8009752:	f000 f8e3 	bl	800991c <scalbnf>
 8009756:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800973c <__kernel_rem_pio2f+0x2f0>
 800975a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800975e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009762:	db19      	blt.n	8009798 <__kernel_rem_pio2f+0x34c>
 8009764:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8009740 <__kernel_rem_pio2f+0x2f4>
 8009768:	ee60 7a27 	vmul.f32	s15, s0, s15
 800976c:	aa08      	add	r2, sp, #32
 800976e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009772:	3508      	adds	r5, #8
 8009774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009778:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800977c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009780:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009784:	ee10 3a10 	vmov	r3, s0
 8009788:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800978c:	ee17 3a90 	vmov	r3, s15
 8009790:	3401      	adds	r4, #1
 8009792:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009796:	e74c      	b.n	8009632 <__kernel_rem_pio2f+0x1e6>
 8009798:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800979c:	aa08      	add	r2, sp, #32
 800979e:	ee10 3a10 	vmov	r3, s0
 80097a2:	e7f6      	b.n	8009792 <__kernel_rem_pio2f+0x346>
 80097a4:	a808      	add	r0, sp, #32
 80097a6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80097aa:	9001      	str	r0, [sp, #4]
 80097ac:	ee07 0a90 	vmov	s15, r0
 80097b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097b4:	3b01      	subs	r3, #1
 80097b6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80097ba:	ee20 0a07 	vmul.f32	s0, s0, s14
 80097be:	ed62 7a01 	vstmdb	r2!, {s15}
 80097c2:	e743      	b.n	800964c <__kernel_rem_pio2f+0x200>
 80097c4:	ecfc 6a01 	vldmia	ip!, {s13}
 80097c8:	ecb5 7a01 	vldmia	r5!, {s14}
 80097cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097d0:	3001      	adds	r0, #1
 80097d2:	4550      	cmp	r0, sl
 80097d4:	dc01      	bgt.n	80097da <__kernel_rem_pio2f+0x38e>
 80097d6:	4290      	cmp	r0, r2
 80097d8:	ddf4      	ble.n	80097c4 <__kernel_rem_pio2f+0x378>
 80097da:	a858      	add	r0, sp, #352	@ 0x160
 80097dc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80097e0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80097e4:	3b01      	subs	r3, #1
 80097e6:	e735      	b.n	8009654 <__kernel_rem_pio2f+0x208>
 80097e8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	dc09      	bgt.n	8009802 <__kernel_rem_pio2f+0x3b6>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dc27      	bgt.n	8009842 <__kernel_rem_pio2f+0x3f6>
 80097f2:	d040      	beq.n	8009876 <__kernel_rem_pio2f+0x42a>
 80097f4:	f009 0007 	and.w	r0, r9, #7
 80097f8:	b059      	add	sp, #356	@ 0x164
 80097fa:	ecbd 8b04 	vpop	{d8-d9}
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009804:	2b03      	cmp	r3, #3
 8009806:	d1f5      	bne.n	80097f4 <__kernel_rem_pio2f+0x3a8>
 8009808:	aa30      	add	r2, sp, #192	@ 0xc0
 800980a:	1f0b      	subs	r3, r1, #4
 800980c:	4413      	add	r3, r2
 800980e:	461a      	mov	r2, r3
 8009810:	4620      	mov	r0, r4
 8009812:	2800      	cmp	r0, #0
 8009814:	dc50      	bgt.n	80098b8 <__kernel_rem_pio2f+0x46c>
 8009816:	4622      	mov	r2, r4
 8009818:	2a01      	cmp	r2, #1
 800981a:	dc5d      	bgt.n	80098d8 <__kernel_rem_pio2f+0x48c>
 800981c:	ab30      	add	r3, sp, #192	@ 0xc0
 800981e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8009744 <__kernel_rem_pio2f+0x2f8>
 8009822:	440b      	add	r3, r1
 8009824:	2c01      	cmp	r4, #1
 8009826:	dc67      	bgt.n	80098f8 <__kernel_rem_pio2f+0x4ac>
 8009828:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800982c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009830:	2e00      	cmp	r6, #0
 8009832:	d167      	bne.n	8009904 <__kernel_rem_pio2f+0x4b8>
 8009834:	edc7 6a00 	vstr	s13, [r7]
 8009838:	ed87 7a01 	vstr	s14, [r7, #4]
 800983c:	edc7 7a02 	vstr	s15, [r7, #8]
 8009840:	e7d8      	b.n	80097f4 <__kernel_rem_pio2f+0x3a8>
 8009842:	ab30      	add	r3, sp, #192	@ 0xc0
 8009844:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8009744 <__kernel_rem_pio2f+0x2f8>
 8009848:	440b      	add	r3, r1
 800984a:	4622      	mov	r2, r4
 800984c:	2a00      	cmp	r2, #0
 800984e:	da24      	bge.n	800989a <__kernel_rem_pio2f+0x44e>
 8009850:	b34e      	cbz	r6, 80098a6 <__kernel_rem_pio2f+0x45a>
 8009852:	eef1 7a47 	vneg.f32	s15, s14
 8009856:	edc7 7a00 	vstr	s15, [r7]
 800985a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800985e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009862:	aa31      	add	r2, sp, #196	@ 0xc4
 8009864:	2301      	movs	r3, #1
 8009866:	429c      	cmp	r4, r3
 8009868:	da20      	bge.n	80098ac <__kernel_rem_pio2f+0x460>
 800986a:	b10e      	cbz	r6, 8009870 <__kernel_rem_pio2f+0x424>
 800986c:	eef1 7a67 	vneg.f32	s15, s15
 8009870:	edc7 7a01 	vstr	s15, [r7, #4]
 8009874:	e7be      	b.n	80097f4 <__kernel_rem_pio2f+0x3a8>
 8009876:	ab30      	add	r3, sp, #192	@ 0xc0
 8009878:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8009744 <__kernel_rem_pio2f+0x2f8>
 800987c:	440b      	add	r3, r1
 800987e:	2c00      	cmp	r4, #0
 8009880:	da05      	bge.n	800988e <__kernel_rem_pio2f+0x442>
 8009882:	b10e      	cbz	r6, 8009888 <__kernel_rem_pio2f+0x43c>
 8009884:	eef1 7a67 	vneg.f32	s15, s15
 8009888:	edc7 7a00 	vstr	s15, [r7]
 800988c:	e7b2      	b.n	80097f4 <__kernel_rem_pio2f+0x3a8>
 800988e:	ed33 7a01 	vldmdb	r3!, {s14}
 8009892:	3c01      	subs	r4, #1
 8009894:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009898:	e7f1      	b.n	800987e <__kernel_rem_pio2f+0x432>
 800989a:	ed73 7a01 	vldmdb	r3!, {s15}
 800989e:	3a01      	subs	r2, #1
 80098a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098a4:	e7d2      	b.n	800984c <__kernel_rem_pio2f+0x400>
 80098a6:	eef0 7a47 	vmov.f32	s15, s14
 80098aa:	e7d4      	b.n	8009856 <__kernel_rem_pio2f+0x40a>
 80098ac:	ecb2 7a01 	vldmia	r2!, {s14}
 80098b0:	3301      	adds	r3, #1
 80098b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098b6:	e7d6      	b.n	8009866 <__kernel_rem_pio2f+0x41a>
 80098b8:	ed72 7a01 	vldmdb	r2!, {s15}
 80098bc:	edd2 6a01 	vldr	s13, [r2, #4]
 80098c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80098c4:	3801      	subs	r0, #1
 80098c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098ca:	ed82 7a00 	vstr	s14, [r2]
 80098ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d2:	edc2 7a01 	vstr	s15, [r2, #4]
 80098d6:	e79c      	b.n	8009812 <__kernel_rem_pio2f+0x3c6>
 80098d8:	ed73 7a01 	vldmdb	r3!, {s15}
 80098dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80098e0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80098e4:	3a01      	subs	r2, #1
 80098e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098ea:	ed83 7a00 	vstr	s14, [r3]
 80098ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f2:	edc3 7a01 	vstr	s15, [r3, #4]
 80098f6:	e78f      	b.n	8009818 <__kernel_rem_pio2f+0x3cc>
 80098f8:	ed33 7a01 	vldmdb	r3!, {s14}
 80098fc:	3c01      	subs	r4, #1
 80098fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009902:	e78f      	b.n	8009824 <__kernel_rem_pio2f+0x3d8>
 8009904:	eef1 6a66 	vneg.f32	s13, s13
 8009908:	eeb1 7a47 	vneg.f32	s14, s14
 800990c:	edc7 6a00 	vstr	s13, [r7]
 8009910:	ed87 7a01 	vstr	s14, [r7, #4]
 8009914:	eef1 7a67 	vneg.f32	s15, s15
 8009918:	e790      	b.n	800983c <__kernel_rem_pio2f+0x3f0>
 800991a:	bf00      	nop

0800991c <scalbnf>:
 800991c:	ee10 3a10 	vmov	r3, s0
 8009920:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009924:	d02b      	beq.n	800997e <scalbnf+0x62>
 8009926:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800992a:	d302      	bcc.n	8009932 <scalbnf+0x16>
 800992c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009930:	4770      	bx	lr
 8009932:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009936:	d123      	bne.n	8009980 <scalbnf+0x64>
 8009938:	4b24      	ldr	r3, [pc, #144]	@ (80099cc <scalbnf+0xb0>)
 800993a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80099d0 <scalbnf+0xb4>
 800993e:	4298      	cmp	r0, r3
 8009940:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009944:	db17      	blt.n	8009976 <scalbnf+0x5a>
 8009946:	ee10 3a10 	vmov	r3, s0
 800994a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800994e:	3a19      	subs	r2, #25
 8009950:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009954:	4288      	cmp	r0, r1
 8009956:	dd15      	ble.n	8009984 <scalbnf+0x68>
 8009958:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80099d4 <scalbnf+0xb8>
 800995c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80099d8 <scalbnf+0xbc>
 8009960:	ee10 3a10 	vmov	r3, s0
 8009964:	eeb0 7a67 	vmov.f32	s14, s15
 8009968:	2b00      	cmp	r3, #0
 800996a:	bfb8      	it	lt
 800996c:	eef0 7a66 	vmovlt.f32	s15, s13
 8009970:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009974:	4770      	bx	lr
 8009976:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80099dc <scalbnf+0xc0>
 800997a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800997e:	4770      	bx	lr
 8009980:	0dd2      	lsrs	r2, r2, #23
 8009982:	e7e5      	b.n	8009950 <scalbnf+0x34>
 8009984:	4410      	add	r0, r2
 8009986:	28fe      	cmp	r0, #254	@ 0xfe
 8009988:	dce6      	bgt.n	8009958 <scalbnf+0x3c>
 800998a:	2800      	cmp	r0, #0
 800998c:	dd06      	ble.n	800999c <scalbnf+0x80>
 800998e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009992:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009996:	ee00 3a10 	vmov	s0, r3
 800999a:	4770      	bx	lr
 800999c:	f110 0f16 	cmn.w	r0, #22
 80099a0:	da09      	bge.n	80099b6 <scalbnf+0x9a>
 80099a2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80099dc <scalbnf+0xc0>
 80099a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80099e0 <scalbnf+0xc4>
 80099aa:	ee10 3a10 	vmov	r3, s0
 80099ae:	eeb0 7a67 	vmov.f32	s14, s15
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	e7d9      	b.n	800996a <scalbnf+0x4e>
 80099b6:	3019      	adds	r0, #25
 80099b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80099bc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80099c0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80099e4 <scalbnf+0xc8>
 80099c4:	ee07 3a90 	vmov	s15, r3
 80099c8:	e7d7      	b.n	800997a <scalbnf+0x5e>
 80099ca:	bf00      	nop
 80099cc:	ffff3cb0 	.word	0xffff3cb0
 80099d0:	4c000000 	.word	0x4c000000
 80099d4:	7149f2ca 	.word	0x7149f2ca
 80099d8:	f149f2ca 	.word	0xf149f2ca
 80099dc:	0da24260 	.word	0x0da24260
 80099e0:	8da24260 	.word	0x8da24260
 80099e4:	33000000 	.word	0x33000000

080099e8 <floorf>:
 80099e8:	ee10 3a10 	vmov	r3, s0
 80099ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80099f0:	3a7f      	subs	r2, #127	@ 0x7f
 80099f2:	2a16      	cmp	r2, #22
 80099f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80099f8:	dc2b      	bgt.n	8009a52 <floorf+0x6a>
 80099fa:	2a00      	cmp	r2, #0
 80099fc:	da12      	bge.n	8009a24 <floorf+0x3c>
 80099fe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009a64 <floorf+0x7c>
 8009a02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a0e:	dd06      	ble.n	8009a1e <floorf+0x36>
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	da24      	bge.n	8009a5e <floorf+0x76>
 8009a14:	2900      	cmp	r1, #0
 8009a16:	4b14      	ldr	r3, [pc, #80]	@ (8009a68 <floorf+0x80>)
 8009a18:	bf08      	it	eq
 8009a1a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009a1e:	ee00 3a10 	vmov	s0, r3
 8009a22:	4770      	bx	lr
 8009a24:	4911      	ldr	r1, [pc, #68]	@ (8009a6c <floorf+0x84>)
 8009a26:	4111      	asrs	r1, r2
 8009a28:	420b      	tst	r3, r1
 8009a2a:	d0fa      	beq.n	8009a22 <floorf+0x3a>
 8009a2c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009a64 <floorf+0x7c>
 8009a30:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009a34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3c:	ddef      	ble.n	8009a1e <floorf+0x36>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfbe      	ittt	lt
 8009a42:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009a46:	fa40 f202 	asrlt.w	r2, r0, r2
 8009a4a:	189b      	addlt	r3, r3, r2
 8009a4c:	ea23 0301 	bic.w	r3, r3, r1
 8009a50:	e7e5      	b.n	8009a1e <floorf+0x36>
 8009a52:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009a56:	d3e4      	bcc.n	8009a22 <floorf+0x3a>
 8009a58:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a5c:	4770      	bx	lr
 8009a5e:	2300      	movs	r3, #0
 8009a60:	e7dd      	b.n	8009a1e <floorf+0x36>
 8009a62:	bf00      	nop
 8009a64:	7149f2ca 	.word	0x7149f2ca
 8009a68:	bf800000 	.word	0xbf800000
 8009a6c:	007fffff 	.word	0x007fffff

08009a70 <_init>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	bf00      	nop
 8009a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a76:	bc08      	pop	{r3}
 8009a78:	469e      	mov	lr, r3
 8009a7a:	4770      	bx	lr

08009a7c <_fini>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	bf00      	nop
 8009a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a82:	bc08      	pop	{r3}
 8009a84:	469e      	mov	lr, r3
 8009a86:	4770      	bx	lr
